ID;Source;Creation Date;Content;Sentiment
17026215;HackerNews;2018-05-09;Title:Everything old is new again: Microservices, Content: https://blogs.dxc.technology/2018/05/08/everything-old-is-new-again-microservices/;0

17037944;HackerNews;2018-05-10;oh no my workplace avoids microservices like the plague. i can only think of one pdf generation is handled by a network call that hands a webpage to a heavily firewalled in and out special container that hands back a pdf. there's no state in the container other than what it's processing so we can discard and regenerate them.we keep development and operations staff tied closely together as a team and have done since well before devops was coined.;0
17035780;HackerNews;2018-05-10;it can work the opposite way just as easily. code that should go in one microservice ends up in a different one because the developer is rushed and doesn't want to go to the extra work of changing multiple services.;0
17035703;HackerNews;2018-05-10;our shop tried microservices and so far it's a big flop and timedrain. conway's law overpowered it if the org structure both dev's and domain org don't match the microservices partitioning bleep happens. you cannot force sharingreuse where the parties don't want it both dev and domain.if you share something you create a dependency and that dependency needs to be managed both technically and domainwise. group x now has to depend on group y's decisions if they both useshare service z. if x and y don't buy off on a common dependency on z they get frustrated and blame devs and the other service users.stored procedures and sql allow dataservice sharing with less code anyhow.;0
17032883;HackerNews;2018-05-09;i completely agree with you.i tend to like the idea of the 2 pizzas rule from jeff bezos.having a small team let say under 10 people manage a service end to end from spec to code to production can be really efficient.on large code baseslarge products this can help a lot offsetting the cost of a more complex architecture.however in a microservice architecture the apis between services is critical. it's a contract between services and it should be clearly stated you cannot go berserk every other day and change it. you also need to establish clear rules about versioning deprecation and end of life of said apis.by the way it would be nice if we had a standard to negotiate api versions for example stating that a rest api must always have a version which lists the available versions if some versions are deprecated and when they will be eoled.;0
17032810;HackerNews;2018-05-09;that's completely orthogonal to microservices though. having your modules communicate to each other via function calls does not make them significantly less modular than having them communicate to each other via network requests but it removes a lot of complexity in serialization and network protocols.;0
17030856;HackerNews;2018-05-09;soa amp micro services are not the same.microservices by theory are a return to the early theory of soa which may frequently have been diverged from in practice but that probably happens with microservices too. services in 90s amp 2000 are soa in a monolith.the theory of soa is loose coupling through independent services interacting through a shared communication medium. that may not always have been observed strictly in practice but that's true of microservices too.;0
17030691;HackerNews;2018-05-09;yes i've always seen microservices as an organizational win over any type of technical win.basically having separate teams work on one code base with one deployment cycle can sometimes be really tough. and sometimes you can get a big win by splitting up this service so multiple teams can each have their own service to focus on.this whole team of one developer supporting 8 microservices seems ludicrious to me.;0
17030491;HackerNews;2018-05-09;agreed on all counts. the ionlyi time i recommend multiple services rather than just loadbalancing across monolithic applications is when part of it's written on a different stack. as an example i'm writing a gizmo with a ruby core and a nodejs ingest endpoint and yeah i'll probably run them on separate machines.but here's the dirty secret if you have a load balancer in front of your application you ialreadyi have a way to send requests for feature x to a separate pool of machines if that feature is a hot spot for you currentlyand unless your application hits some really degenerate cases your base ram load simply should not be that high for your application in the first place making the marginal cost and machine sizing floor less of an issue.there are benefits to microservices in some environments chiefly to reflect your org chart when your human protocols are breaking down. they tend to be marginal and whether they outstrip the increased overhead of dealing with more moving parts whether in your code or not i quite like k8s but i still wouldn't want somebody less comfortable with it than i am running it in production and plenty of those folks do! is in many ways up in the air.;0
17030484;HackerNews;2018-05-09;monolith abmicroservice aasyncserializationnetworkserializationschedulingba monolith is extremely simple to traverse with a debugger a microservice is not. i can make a dozen jumps overintoout in less time than it would take me to open fiddler or man tcpdump.i have heard that some companies have tooling that makes the microservices debugging situation tolerable or sometimes even better than monolith e.g. writing tests for you by snooping the network layer but i have yet to play with any. do you have recommendations?;0
17030454;HackerNews;2018-05-09;this is not a real distinction though. you can have n instances of a monolith if it's written smartly generally speaking where smart equals is a twelvefactor app.and frankly for the 95 and probably the 99 case running a copy of each monolithic application its own autoscaling group is probably significantly less work and less hairpulling than the chasing the microservice dragon.;0
17030414;HackerNews;2018-05-09;it's not. the benefit is that you can keep a service running long after the project that created it has disbanded andor the runtime and build environment is deprecated on a given os you don't necessarily need to deepdive into the business logic of legacy services you can replace a service implementation with another one running on another stack without having to adapt service clients you can change auth mechanism outside of the service implementations you can scale out cpubound services onto multiple hostsmind you these benefits are not achieved by using microservicessoa in itself the contribution of microservicessoa however is that these design goals aren't impossible to achieve because of iarchitectedi reasons.;0
17030280;HackerNews;2018-05-09;it's worth remembering how painful soap was and what a disaster the early implementations were and how little agreement there was on anything for many years. pete lacey has written a hilarious satire of the whole thing maybe soap wasn't the entirety of soa but back then it was a big part of it.i agree the term microservices has been ruined by those who came in with a very specific agenda. when i was at timeout.com in 2013 i used the phrase an architecture of small apps it was a few months later when martin fowler wrote his essay about it that i first heard the term microservices. when i read his essay i assumed he was talking about the same thing that i was talking about. but i later found that the people promoting microservices defined it entirely in terms of http so i've gone back to talking about an architecture of small apps when i am talking about small apps that talk to each other with something other than http such as this kind of architecture in that example mattias nehlsen builds a system where the communication is via redis.;0
17030269;HackerNews;2018-05-09;this in turn might point to the services not being cut alongside the right dimensions that is they might be cut horizontally rather than vertically.microservices lend themselves to being used in conjunction with domaindriven design. a single microservice should only deal with one domain.if you have a service that covers crosscutting concerns such as orders that service is not a microservice. in order to improve the design in your case each microservice could access and manipulate order data according to its scope.that way if one of the services fails only the small part of the order functionality implemented by that service will fail while the remaining order features will remain intact to some extent steps in a linear order process that depend on each other of course will still fail without successful outcomes from previous steps.;0
17030127;HackerNews;2018-05-09;almost none of that is strictly true. soa and microservices are so close to being synonyms that we might as well say that they are. at worst they're different flavors of the same thing. like vanilla ice cream versus strawberry ice cream.;0
17030096;HackerNews;2018-05-09;the thing you're missing though is that as newthings get more popular and more people try to implement them they do it badly spread their bad implementation as gospel and that actually changes the popular definition into something barely recognizable that becomes oldthing.a few smart nongraybeards eventually play around with oldthing enough that they actually stumble upon the original definition of it but don't realize that they are really just rediscovering the original definition. so of course they rename their discovery as the next newthing. then cue the graybeards.soa is really just object oriented programming.microservices is really just object oriented programming.object oriented programming is really just dependency management.;0
17030082;HackerNews;2018-05-09;i've always got the impression that microservices are a bad idea most of the time apart from sometimes where they're not.i'll argue that if you're building something you should iprobablyi build it as a monolith with the exception of some welldefined services like authentication amp authorisation. once you've got version 1 built itheni you know enough about the problem that you're ready to consider breaking stuff off into microservices this is why auth2 make sense to break off from the getgo they're pretty wellunderstood at this point so we all should know how to handle them.premature microservicement is the root of much evil. trying to break things up into services before you actually understand the problem will only lead to tears amp suffering.;0
17030026;HackerNews;2018-05-09;i would say much of todays micro services are mainly s function of current front end fashion of fat clients mobile and spas consuming jsonformatted data. less driven by the soa qualities of a microservices architecture.;0
17029976;HackerNews;2018-05-09;having microservices doesn't really solve this problem though because you still have all those lines of code plus all the extra code to make it all talk to each other. if the problem is one of organization that can probably also be solved in large codebases without breaking into multiple systems.;0
17029828;HackerNews;2018-05-09;...microservices need to be isolated all the waythey may be but don't have to be. like many other technology terms that go through a hype cycle microservices also vary in definition by a large measure. this talk from 2014 by martin fowler 1 is about the breadth of definitions as well as contrasts with monoliths.1;0
17029780;HackerNews;2018-05-09;by being brutal with decomposing and decoupling your concerns you could scale each intelligently and independently.yep. this is the first concept he misses.they think of microservices as just another buzzword. and this is the second one.what he's describing as soa doesn't match what i've seen. even your 15 services example is rare. it was mostly taking a buzzword loading up on some tooling and cranking wsdls. you could end up with dozens of those little rascals right out of the starting gate. it should have been 15 agreed. i just never saw it work like that in shops of any significant size;0
17029740;HackerNews;2018-05-09;i...so what does this mean? the long and short of it is that microservices are an soa variation for container and cloud computing...ii do not agree with this at all. i think one of the biggest problems microservices face is the overapplication of preexisting paradigms. the failures i see are big object models large frameworks dependency on shared resources complexity in the service and so forth all signs of 90s and 00s thinking moving over to microservices.i agree that everything old is new again. i'd suggest you need to go back further. good microservices in my opinion are not only loosely coupled any sort of coupling at all is provided by the os nothing else. so you'd need to go back to jcl days to find a good analogy for microservices. trying to stick these other concepts into the microservices bucket looks like a nonstarter to me.;0
17029726;HackerNews;2018-05-09;microservice is a monolith. so what you're describing is essentially i've got a few frontend microservices tied to 1 huge microservice i call the database.there's no data layer that is managed outside the microservice. it is a microservice.that's one of the reasons google uses a monorepo any microservice can easily import a database instance and start using it as part of it's structure.;0
17029659;HackerNews;2018-05-09;microservices really shine when your setup requires ha everywhere. if you're running multiple copies of everything and need your overall product to still run while parts fail then it's a lot easier when the individual parts are small microservices that do one thing with predictable operating conditions.if you're not running in high availability and can tolerate one copy of everything then monolithic probably makes more sense. glue it all together and roll out improvements across all the parts at once.;0
17029350;HackerNews;2018-05-09;as other have pointed out he's ignoring key failings of soa and critical differences between soa and microservices.can you describe the fundamental differences?;0
17029333;HackerNews;2018-05-09;given the extent to which erlang feels like microservices ill submit virdings first rule for consideration.;0
17029321;HackerNews;2018-05-09;i'm just mentioning that containers may make implementing amp deploying microservices easier and thus a more popular solution.;0
17029312;HackerNews;2018-05-09;i'm of the same belief dedicated persistence a small single purpose api.that said there is nothing micro about most microservices i've come across over the years. they're miniservices at best.;0
17029308;HackerNews;2018-05-09;i hate the graybeard need to say newthing is actually oldthing but with a silly name because these silly kids don't know anything new while both glossing over the bleak hellscape of oldthing wcf service development anyone? while grossly misunderstanding newthing.as other have pointed out he's ignoring key failings of soa and critical differences between soa and microservices.overall i like the article but i think he's misstating a few key things.and maybe a nitpick but iit lends itself to the continuous integrationcontinuous deployment cicd model of developing large complex applications.ireally? because i thought cicd was the standard way to deploy any application more complex than a spike or proof of concept which probably doesn't need to be deployed anyway.;0
17029249;HackerNews;2018-05-09;even if you're not really big sometimes it's helpful just to have everything broken up and not have to go to a 750000 loc solution and find the 10line file that you need to edit.i'm on the architecture side so am bearing the brunt of the complexity but the senior and especially mid level developers who have code open 7.8 hours a day say the few things we do that have real microservices are the easiest to debug and work on. the monolithic apps take longer to get less done.agreed though that it certainly adds complexity on the adminarchops side.;0
17029243;HackerNews;2018-05-09;i've been working for telecoms for ages and it's been like this since forever. bunch of independent hardware devices from dozens of vendors software services from independent vendors and you gotta integrate them into one. hlr knows about your users billing knows about other part of those users then you have devices everything independent and glued together via soap. in my previous job company had multiple smscs short message service center and you had to target the proper one depending on the geography of the customer and you'd go to proper hlr to find the customer and their geo location you should read country here not precise location.and then people running around screaming soa microservices json and i like you don't say? oo?edit spelling;0
17029232;HackerNews;2018-05-09;then it becomes easier to know in which conditions it might be useful to apply it especially for people with less experiencein my experience it's exactly the opposite that has happened. i see microservices being abused all the time just because someone read a blog and thought they were cool. the same thing happened with soa by the way.;0
17029230;HackerNews;2018-05-09;i started coding when soa was in full swing and microservices was just something people were doing before it was called microservices. basically the soa contractors and newly minted certificate holders were pitching these complicated protocol interactions. there was just way too much overhead. so many developers that just needed to get stuff working whipped up rest services for the frontend to consume. ultimately these rest services made their way to production and they worked. and people coded them faster. this seemed to have been going on in multiple places and people were discussing it online and the term microservice was coined somewhere along the way.in the end soa just had too much overhead rules and protocols. i remember seeing what these guys were doing with soa and i would just ignore it and create rest services with json. we were able to get stuff in production. eventually i found out that what we were doing was part of a movement called microservices and then started following and learning what other folks were doing.;0
17029186;HackerNews;2018-05-09;there is no microservices protocol description or rfc so its hard to say anything definitive but yes you are right. we typically like to have a db table or mongo collection owned by 1 microservice. this allows changes to be made to the underlying datastore without affecting multiple applications. the other apps that need data just get it from the microservice without caring about how the microservice handles it.i am in a team now that is just started using to use microservices. and i am noticing that we are stuck on a lot of db changes we want to make because there are various applications accessing the same tables. so now we are getting into the habit of constraining backend data stores tables and collections to just one microservice because we feel the pain of not doing that now.;0
17029177;HackerNews;2018-05-09;probably non related but i have a question how do microservices scale in terms of communication to other microservices or to a monolith?we have broken off two of our monoliths components into a microservice and for now its working great but there are just some things i dont think make sense to decouple and isolate. im afraid id get in an integration hell. has anyone had such an issue?;0
17029145;HackerNews;2018-05-09;you need a certain level of maturity in devops practices before microservices are worth it.deploying an extra service to a kubernetes cluster for example is neither costly nor prone to breaking nor harder to monitor etc.i think the best practice nowadays is for a small startup to first write a monolith and then later split it out into microservices when they're ready.;0
17029124;HackerNews;2018-05-09;isn't one of the defining characteristic of microservices to have a data persistence instance for each service even at the cost of duplication?i am basing myself on just a superficial interest for ms so i might be wrong here is what i am talking about if this is correct than no microservices are really not just like soa.if i am wrong please correct me i am here to learn.;0
17028973;HackerNews;2018-05-09;i'm not an expert but what is the difference between a plain old esb and what we now call an api gateway or api manager such as kong or wso2 in the world of microservices?i know of some architectures where the api gateway has a lot of logic put into it... and you have to go through it to reach any of the microservices in the network.isn't this a single point of failure and similar to an esb?;0
17028967;HackerNews;2018-05-09;sorry for nitpicking but i think the central value proposition of microservicessoa is that you communicate with you backend via welldefined inetwork protocolsi rather than eg. procedure calls so that the client and server technology stack doesn't matter.containers have nothing to do with it.;0
17028310;HackerNews;2018-05-09;soa was just as notable as microservices is for people arguing over its true meaning which is how so many arguments got started.in reality the definition of both was always fairly fuzzy.;0
17028302;HackerNews;2018-05-09;with microservices though you can make changes one service at a time.that's the main property that sets microservices apart from mere soas microservices reduce the risk of change.with properly architected microservices a single deployment is unlikely to impair an application as a whole whereas with traditional monolithic deployments a single change can severely affect the functionality and operations of an application.this is also why you probably don't need microservices if you don't need that kind of finegrained control and risk mitigation.;0
17028241;HackerNews;2018-05-09;aren't you comparing the historical reality of soa with the idealtheoretical implementation of microservices?i wasn't around in the soa era;0
17028222;HackerNews;2018-05-09;yes people were doing microservices before the name appeared but that's true of all design and architectural patterns. a few peopleteams implement similar solutions to similar problems then someone recognizes the similitude and names that general pattern. then it becomes easier to know in which conditions it might be useful to apply it especially for people with less experience assuming they can see through the snakeoil sellers that inevitably pop up.;0
17028183;HackerNews;2018-05-09;in the eighties we used turbo pascal 20 years later we found out we were writing microservices. for us it was needed because you could only write programs under 720kb so send a message to another program over a 5mb network en let that program handle a specific task and port the results back to the main program.;0
17028178;HackerNews;2018-05-09;you're also making a lot of assumptions. i started working in 2004 and in 2006 i was already doing 'microservices' i was responsible for a few web services .net with a few endpoints each other colleagues had others. these web services where part of a bigger system out of the many that we had. emphasis here is on few endpoints the services where split on functionality some services talked to other services some directly to the database. one of the reasons for the split was also because we were using visual source safe and multiple people working on the same code was hard. so yes i think 'microservices' is a buzzword it's been driven by the use of containers deployment automation and the assumptions that people have done monotliths because they didn't know better is wrong. every sane engineer who has put too much functionality in a service which at some point caused problems with scaling agility etc would take measures to address it.;0
17028081;HackerNews;2018-05-09;first as tragedy then as farce has never been as true as in the age of node.js hello world microservices with 136 mb of low quality dependencies in nodemodules i just checked mine. i can run java servlets with less dependencies including the jvm.;0
17028077;HackerNews;2018-05-09;this is highly misleading.what made serviceorientatedarchitecture stand out in the 90's and 2000's was standardized communication protocols. it made integrating across teams and even across companies easier than it's ever been before.but there were no best practices around service architecture. sure methods were decoupled by responsibility maybe. but when companies thought about their web service strategy that meant putting up one service exposed to the world and moving on.internally soa meant 15 services for a midsized shop.this worked for a while until it didn't. first the services became monoliths of conflicting responsibilities then the mobile revolution and big data led to scalability challenges that the era of soa never had to consider.that is what microservices promised to solve. by being brutal with decomposing and decoupling your concerns you could scale each intelligently and independently. containers are just an implementation detail and weren't around yet when microservices first made their impact.of course plenty of people don't get this. they think of microservices as just another buzzword. so it's been ruined like agile has and you hear companies about their microservice architecture when really all they've done is migrated their backend to node.js and moved to the cloud.shame. it's a good idea a lot of the time and sometimes it isn't as with all good ideas.;0
17028036;HackerNews;2018-05-09;there is nothing about microservices that dictates the use of js. our microservices is written in .net and i could write it in c if i wanted to.;0
17028033;HackerNews;2018-05-09;you are right i meant more in terms of software developer popularity apologies for my bad phrasing.but i do think microservices will become bigger we'll have to wait and see how k8s pans out.;0
17027999;HackerNews;2018-05-09;imicroservices are also lighter than soa. while soa services are deployed to servers and virtual machines vms microservices are deployed in containers. the protocols are also lighter. this makes microservices more flexible than soaiboth of these are wrong.a soa service of yore would be much lighter in cpu if not memory than a microservice of today. heck it had to be in the 90s they couldn't afford to run a js runtime to power their service. it was either c or java.the protocols were also lighter then not now. except if the author means simpler and easier to work with. else corba or dcoc are lighter than serializing to json and back.;0
17027924;HackerNews;2018-05-09;without an esb soa services and microservices are just remote procedure calls. unless there is a real need like a clientserver architecture then remote procedure calls are just an extremely slow version of normal procedure calls.;0
17027880;HackerNews;2018-05-09;i think abstracting the differences away between the 2 seemingly equal technologies is not a good process for understanding them better. yes we seem to go back on ideas but this is because the market is constantly evolving not because we forgot about the past.soa was not that big of a hit because the time wasn't right. just like myspace before facebook the market wasn't ready. and to say they are the same is to ignore the advances each tech made.you could push this argument to the extremes and say well microservices are just processes on different computers talking through a network ipc and this unknownproject has done that back when ethernet first started.nothing in tech is original and everything is.;0
17027852;HackerNews;2018-05-09;soa never required an esb this was simply vendors trying to shoehorn in a saleable unit of software which they succeeded at better in the 90s. likewise i've seen people implement microservices with an esb in the middle.long an short of it is the esb is an antipattern always has been and soa and microservices are the same thing.;0
