ID;Source;Creation Date;Content;Sentiment
1ao4m33;Reddit;2024-02-11;"Title:What is your thought process when designing microservices?, Content: I had an argument with my CTO recently and I'd like to hear your opinions.     Lets say you have a simple ETL type of app to do. Pure backend. Here are the general assumptions:     1. Load some data from a db via its api (nothing crazy in terms of size, enough to keep it in memory) 2. Parse a bit (nothing crazy either, just some string massaging) 3. Send parsed data to another 3rd party service via their api 4. Scaling is not a concern, very little load expected  &#x200B;  I said that this is going to be just 1 service doing it all. But I got absolutely crapped on by the CTO (guy has been with the company for almost 30 years now, big authority, but I really disagree with him almost on everything lately lol).     The CTO initially said to do it in 3 microservices (load, parse, send), and I politely asked why, since it seems to me the following are true:  1. Load and data size are non-issues, no need to consider scaling particular pieces of the flow 2. If any of those 3 microservices explodes at any time, the entire flow is compromised (unless we use queues or something but come on..) 3. More services, more maintenance, and it will take longer to code too  &#x200B;  He was very unhappy with my questions and concerns but did not offer any technical response, just frustrations with me not doing what he said immediately, and then said: ""Ok, lets do just two, one for loading and parsing and another for sending"". Needless to say I'm still not super happy lol.     I'm curious am I just being a bit naive with microservice architecture (I'm not SUPER experienced with it)? Is there value in really being super micro granular like that?  &#x200B;  Bonus context: we use java/spring microservices.     &#x200B;";0

kpws1pl;Reddit;2024-02-11 11:09:20;do you need microservices? is there a real value proposition in using them or we are looking at cvdriven development? splitting things to multiple services does not make it easy but rather add maintenance costs and overhead. microservices has became a tool to increase developer workload and to justify the work of people whom otherwise would not be needed. my best advice is to solve the given problem in the simplest possible way. the simpler something is the lower the chance of failure is.;0
kpwwhrn;Reddit;2024-02-11 11:55:33;i'm not sure why this should even by described as a microservice. you basically have three batch jobs. those aren't commonly described in microservice terms. an orchestrator might be but it's not clear how you're handling that. it's pretty common to divide batch jobs into atomic preferably idempotent pieces of work but it's probably absolute overkill for everything you've described. an etl job usually includes the e the t and the l! anyway the real issues is none of the above it's that the cto doesn't trust the developers to use their judgement to solve this problem and is mandating an implementation detail on a trivial feature.;0
kpwsizg;Reddit;2024-02-11 11:14:15;i have a problem. i will solve it with microservices! i now have two problems.;0
kpx8slr;Reddit;2024-02-11 14:00:55;call your cto insane and demand it be broken down into at least 10 microservices minimum. where's your config server!? your notification service!?;0
kpwrsno;Reddit;2024-02-11 11:06:47;there would be value if you intend to have several different 'parse' services or several different 'send' services. that being said the statements you made are valid. there is a lot more complexity with more granular microservices. however the type of app you described simple small in scope easily scalable is imo ideal for a microservice.;0
kpxb02l;Reddit;2024-02-11 14:18:04;what is your thought process when designing microservices? it's don't. if you need any particular microservice you will know that you need it and you will be able to define very well why you need it why it needs to be separate and how it will fit with the rest of the infrastructure. the worst thing you can do is design something with microservices being your primary goal. but i got absolutely crapped on by the cto. ... the cto initially said to do it in 3 microservices sounds like a really fun chap. since it seems to me the following are true and you're absolutely right. on top of that it will be very hard to test if the combination works well together. someone will enter a change in the load microservice which will pass all tests cicd will succeed it will be deployed but the communications with the rest is now broken. what if you do know that it's gonna be broken so you need to implement the handling of the breaking change in all 3 of them? how are you gonna orchestrate the e2e tests and deployment pipeline so that all 3 get deployed together and not apart? the whole thing will become either a manual process full of mistakes or an extremely complicated convoluted pipeline. he was very unhappy with my questions and concerns but did not offer any technical response just frustrations with me not doing what he said immediately sounds like a really fun chap. ok lets do just two one for loading and parsing and another for sending if a service does loading and parsing but no sending and the sending service does only the sending .... what is the output of the first service and the input of the second service? guy has been with the company for almost 30 years now looks like he holds the company hostage. ... i might have a slightly emotional response to this question i'm sorry. i was working with a company that had exactly the same type of toxic assholes leading to as many microservices as possible. according to real experts people who are actively involved in really successful products that sit at the heart of many software infrastructures those architects are just egocentric assholes more words more polite but the essence was this. this company with this approach became impossible to work with. the technology built ont he principles of let's build a microservice for every piece of data and let's split microservices into nanoservices has made the whole infrastructure a beast that's impossible to maintain that is so slow that it's actually faster to do things by hand sometimes. even after a year of healing and consolidation we're only up to a point where 1m a year infrastructure can process in 24h what my 1000 laptop can do in 20 seconds with a script written in 30 minutes and get the exact same end result.;0
kpxfdm1;Reddit;2024-02-11 14:49:57;microservices are a solution to an organisational problem more than a technical one.;0
kpwurj3;Reddit;2024-02-11 11:36:44;i am working at somewhere with an etl pipeline spread across multiple services. i dont consider it micro services and i dont consider your ctos example to be that either. its one distributed monolith split across multiple nodes. i mention mine because my work is turning most of our etl from multiple nodes your ctos into one single node like yours. i also move some parts into genuine microservices. id disagree with your cto as youre jumping straight to a more ambitious architecture. once you have data being processed across multiple nodes it becomes a huge pain to debug and get right. our etl has been an utter shit show. one of the worst projects ive ever had to work on. when i joined only about 60 of data went out in production. changing that is glacial because its a distributed monolith. getting it to run locally on ones machine takes literally one to two weeks. one of the main reasons is because its very difficult to know what is going on internally. finding a part you are missing or got wrong can take whole days to debug. writing a distributed etl is a bit like saying im going to write my own database and use that. you can but itll be shit for a long time and itll take years to get right. there is also a large trap here. it is easy to get a simple distributed etl built and running on day one only to find out its a shit show on day 100 when your dats requirements increase. thats what happened where i work.;0
kpx1wre;Reddit;2024-02-11 12:54:58;most commonly microsevices are divided into products like we sell a car insurance named foobar so we build a foobar service. this so that the one day that foobar is not sold anymore we can delete the service in reality you will never delete anything. or that you divide them into what service they provide like user service payment service login service etc. you dont do a single service for a single function. unless its a generic parsing service that will parse several different formats for several different consuming microservices? otherwise he is wrong.;0
kpxo46w;Reddit;2024-02-11 15:47:48;so here you have options. 1 service which does fetch parse send fps. 2 services fp and s. 2 services fs and p. 2 services sp and f. my rules with microservices are as follows 1. is the problem we are solving able to be split such that two independent teams can work on it without constant communication? if the two service teams need daily communication they are actually one team. 2. will more than 1 entity at the company consume the individual service? for example if you did f p and s will each service have multiple consumers? what if you did fs and p will multiple entities consume fs and multiple consume p? if you build fp and s and the s service will only be used by fp then don't split s because its added friction. 3. do we have the resources to allocate teams to the different services? sometimes 1 and 2 are true. but the company cannot or will not allocates resources to do multiple services. 4. is this service we are building going to have persistent state? often a service is actually a library. for example if something takes an input and spits out an ouput... thats not a service thats a library. unless all 4 rules are true then a microservice isn't the right idea. rarely rules 1 2 and 3 will be true and 4 is false and a microservice can be viable because the company has multiple teams at their disposal. good example authentication service to handle login users forgot password. every product the company offers is going to consume it. it has an independent team. it has persistent state in a db that manages users. consumers of auth don't need to communicate frequently. they just want an oauth connector when its ready and have no cares about the internal engineering.;0
kpwx84d;Reddit;2024-02-11 12:03:51;this sounds like the kind of thing you can do with a script. are you doing this as a oneoff import? if so im fucked if i know whyd you have any sort of service. in any case microservices are this generations soap. huge complexity in the pursuit of simplicity.;0
kpx0qxz;Reddit;2024-02-11 12:42:38;oh damn. youre me in another world. i had to go through this with my team too and their entire architecture revolves around microservices. im playing techlead so i do have some say. in the end now were doing fitness functions to gauge when to split services.;0
kpx1ldz;Reddit;2024-02-11 12:51:36;i have not fallen for the microservice meme;0
kpx4edx;Reddit;2024-02-11 13:20:32;is he crazy? you should have a slice per property. each slice must have three microservices. to ensure that you don't have any concurrency issues you can have a message bus in between each step. then you can have a job that runs every hour and ensures the sync is completed as expected. s incase you didn't realise this was satire.;0
kpx7nkk;Reddit;2024-02-11 13:51:17;where is the parsing microservice meant to be getting the data to parse? is the load from db one sending requests with the data in it to the parsing one? how does the parsing one send its data to the send one only for it to then send it again to this 3rd party one?;0
kpx9mnl;Reddit;2024-02-11 14:07:28;is this being run on a schedule or ad hoc or triggered by events? if it's as you describe just a service whose only job is to pull data transform it and post it elsewhere isn't that already a microservice? where i work this would be just be an aws lambda triggered by a scheduled event.;0
kpxb7lu;Reddit;2024-02-11 14:19:35;i think you only need micro when you're trying to divide work between multiple teams or trying to limit blast radius. if it doesn't have a new team to take it on you probably don't need another microservice.;0
kpxd1l6;Reddit;2024-02-11 14:33:14;scaling is not a concern very little load expected then don't use microservices. microservices are an architectural pattern to scale parts of your application independently and also to decouple . if you don't need that you're following a cargo cult creating a lot of unnecessary overhead and complexity. i've seen this in three different projects and it's always a clusterfuck.;0
kpxlncn;Reddit;2024-02-11 15:32:27;microservices are an optimization. if he can't articulate which problem a microservice will solve better then it is a premature optimization. i've worked with poorly designed microservices architecture. i had to make numerous calls across multiple microservices just to get a single number that should normally have been a single db query.;0
kpxmoxe;Reddit;2024-02-11 15:39:02;is the same team in charge of developing the services? if so you risk ending up with a distributed monolith. microservices solve an organisational problem.;0
kpxqmpc;Reddit;2024-02-11 16:02:52;people have varying ideas of what a microservice is. before i can have any sort of conversation about it i have to ask what problem are you trying to solve with microservices to get a grasp of what they want to do. i've worked in an organization where microservices were basically an aws lambda. the lambdas all accessed the same data records and a lot of behavior was duplicated between them. if the idea of microservices involves copying code or making a library all of them use to share code please don't do it.;0
kpxtfh5;Reddit;2024-02-11 16:19:36;does he really see having different teams working on three different parts of an etl process and deploying then independently of each other? also does he imagine that these would not be tightly coupled to each other despite the processing the same data and likely inserting it into the same database? it seems like a change to one would necessarily cause a change to the others. there's nothing autonomous about any of these. it sounds like he also thinks distributing this across multiple processes would solve some problem assuming that's part of his view of microservices.;0
kpxxt88;Reddit;2024-02-11 16:44:39;the cto initially said to do it in 3 microservices load parse send this is insane. load the data in one microservice then have the parsing microservice load it from the first microservice to parse it then send it to the sending microservice to send it?;0
kpycoyh;Reddit;2024-02-11 18:07:12;if scaling is not a concern... why use microservices?;0
kpyfarr;Reddit;2024-02-11 18:21:08;cons depth of call stack on microservices is an issue. debugging is an issue use a correlation id to tag requests or a distributed tracer so is logging you have to gather the logs and reintegrate into a single view. moving around data across networks is an issue particularly if you don't have all the plumbing and testing for network delayssplits recovery. data duplication you're copying all your data around. pros unit testability scalability it can be... but you generally need to put some thought and work into it. your case is so toy i wouldn't consider it microservices... on the other hand its concerning your cto is insisting it be written the way you've outlined... because invariably he will be asking you to do it for other more complex software. and if you don't develop the correct habits now you will be in microservices hell in about two seconds. if the notion is he wants his software decomposed into testable functions... you could just encapsulate it as 3 functions.... load mangle send you don't need all the extra crap of microservices to get that benefit. if the notion is that it needs to be 'scaleable' ... premature optimization. you'll spend a lot more time and money doing it the way he wants for zero negative technical and business value. all that being said... maybe he wants to switch you to microservices. and this is his 'test function' ... the first piece of code he wants written in a specific style. or maybe he's tasked your system administrator to build out the network to support microservices i.e. he's invested a lot of money into the infrastructure to support a microservices conversion and is trying to justify it. hard to say.;0
kpyk49p;Reddit;2024-02-11 18:47:24;how many people maintaining each service and without the authorization to push code to any other without the codeowners' approval? 3? sure if each team is highly opinionated. 5? sure this is what service oriented architecture handles well allow independent technical decisions for tradeoffs each team is more comfortable to make as well as independent deployments that get messy when you have 2030 devs working on a single codebase that is applying trunkbased development and continuous deployment if you don't have that then it's less of a problem but you should have that if you're writing web services. less than three people dedicated for each service and maybe even people constantly committing to multiple repos without specific approval? your cto actually wants code organization and thinks he's going to achieve it with microservices. it always ends in tears. let me repeat that again it always ends in tears. if he wants things to stay in their line and prevent spaghetti references set up a monorepo and code review make him take a look at monorepo.tools and he should be able to quell any reasonable fears that drive people to microservices without making your debugging experience hell because he's obviously not going to make the massive time and money investment that is proper microservice observability. they do not have time for that. they'll also make it easy to spin out different entrypoints if one day you wake up and want some of your core logic to be handled by something that scales as they say.;0
kpyl68x;Reddit;2024-02-11 18:53:10;i don't know all of the circumstances around the rationale here but my impression is your cto is insane. there are generally three circumstances where you want to split things into microservices when one section of your system accounts for a disproportionate resource load and you want to be able to horizontally replicate just that functionality without needing to replicate the entire rest of your monolith. when you want to split development into small 2pizza teams and it makes more sense to isolate things into microservices than have hundreds of devs commit to a single monolith. there are different security requirements for different services and you want to isolate different levels of security to specific microservices to guarantee nothing is compromised. there are many downsides to microservices the most common one being issues of bounded context where different services wind up having dependencies on one another and you have nightmares of needing to do simultaneous version releases etc. it really sounds like the way your cto would design things pays no mind to bounded context and divides up service responsibilities arbitrarily. this is why i think he is insane. it sounds like he's one of those microservices are good people who uses a tool arbitrarily rather than for its specific appropriate purpose. you split things into microservices when there is a compelling need to do so you isolate the bounded context and you enforce the api interactions with contract tests ideally written by consumers. that's how i go about it anyway.;0
kpymch6;Reddit;2024-02-11 18:59:33;theres so many layers to this. ignore the phrase micro services and consider your actual requirements. first what industry is this? in industries where i worked there was a level of guarantees when processing data think security integrity privacy availability and reliability. absolutely no one will be happy to be poked two or three times because the information systems dealing with blood tests lost or failed to process an order. or a missing loan paymentor folks not getting paid on time i start with a monolith and then perform fmea failure mode and effect analysis incorporate compliance security and guarantees. that defines the boundaries of each. i once worked at a company where process took 3 days to run as a monolith. the process itself was fragile retry logic overly complicated. supporting systems like databases and storage was stressed to a maximum you couldnt throttle processing. that process was broken into a thousand little processes using queues to communicate between each other. the entire process not only completed faster around 8 hours but were much more reliable. testing was way simpler too. all those processes were still released as a monolith in terms of repo release process and cadence. instead of just invoking the process as a batch job the process was further improved to trigger them as part of the online processing. this streamlined the business processes and led to other improvements. this was before micro services was even a trend. another company i worked at had a monolith web process. operations of the monolith became a problem. pen testers had a field day it was internet facing and it created lots of toil when it came time to release. when we migrated to the cloud we broke the processes up improving release cadence reliability and whatnot. other operational tasks were simplified. yet another company approached the whole ordeal with microservices and didnt exactly understand the boundaries of each service it proved so ineffective that it was converted into a monolith. note that almost none of this is driven by development. developers often invent problems that dont exist and ignore ones that do. so much for devops;0
kpyov6s;Reddit;2024-02-11 19:13:16;i'll refrain from trashing your cto because there are lots of details missing here. the not a lot of data to scale for comment needs more fleshing out but let's say it's like 100mb of data to extract from db i'm guessing rdb?. you probably don't need any microservices to do this etl job. by microservice i'm assuming you want a process constantly running on an instance save for a few instance refreshes. you can do something where you have a scheduled job that creates jdbcodbc connection extracts data that you need does transform as part of job and matches request for downstream api. no reason to keep process running unless there's state involved. if you need to scale for larger data andor need mapreduction there are solutions sparkhadoop or if you're in cloud whatever your cloud's version of emrglue is you can leverage for doing that. you can do certain things yourself like paginatingchunking data to process but if it becomes complex better to put a system around it.;0
kpyqu62;Reddit;2024-02-11 19:23:52;seems like a use case for workflow orchestration not microservices.;0
kpywjj3;Reddit;2024-02-11 19:54:51;oh theres a whole class of shitty experts who see microservices as their holy grail theyre an abomination. but hey its a turf war and youre on his turf. good luck!;0
kpz4uku;Reddit;2024-02-11 20:40:41;write a design doc. heres something for reference. i havent read the whole thing but just refer to it. https with anything being worked on there will be tradeoffs. so writing out the different possible designs and their tradeoffs helps with making a decision. i might be missing some context or requirements on how 3 different microservices is a good idea. a design doc may be useful for the political side of work too. this is my corporate culture experience.;0
kpz69tq;Reddit;2024-02-11 20:48:36;oh no not again the software dev side of me likes the idea and has seen it be successful but the cynical side of me has mostly experienced incompetent organisations where microservices are purely an artefact of the structure and power dynamic and politics of an the organisation. those are just distributed monoliths.;0
kpzan15;Reddit;2024-02-11 21:12:54;for me even a single microservice is overkill for what you described let alone three separated ones that being said it obviously depends on the actual technical needs but if its a service that wont handle a lot of requests isnt a critical service and doesnt need to be actively extended and improved it seems just an endpoint exposed by an already existing service.;0
kq0iq9g;Reddit;2024-02-12 01:44:01;first rule of microservices don't use microservices. microservices should not be used by any company that can not explain the reason they want to use them. you will not end up with a microservice architecture. you will end up with a distributed monolith. microservices do not simplify architecture. they only increase complexity or at best they might keep it the similar. 4. scaling is not a concern very little load expected if you are not worried about scaling then why do it? if you want to be able to mix and match things that you deploy to different customers there could be some value in splitting up parts into different services. however whole microservice for simply parsing data that sounds like someone who never programmed in their life. they are describing functions or classes at best not microservices. microservices usually have their own database that they read from and do one entire action for the organization. processing payments is an example of a microservice. reading a database is not an example.;0
kq0m0sf;Reddit;2024-02-12 02:05:15;i'd do it in zero microservices if the load is super low. roll it into an existing service.;0
kq1dxke;Reddit;2024-02-12 05:10:58;none of these requires or needs microservices.;0
kq1nnyd;Reddit;2024-02-12 06:27:45;you may not even need a microservice at all. not sure how you plan to run this but it can just be a cron job or something that runs a script. depends on your load but you seem to be not concerned. if it will be used in certain times and not so frequently lambda might be a good option too. but 23 services really unnecessary especially there is no way you scale 1 of the services and not another unless there is significant difference in job loads. but my experience so far is i explain my point in detail on a document if possible. writing the trade offs well and if my boss wants to be a dumbass she pays for it who cares i would not push too hard.;0
kq1z1f3;Reddit;2024-02-12 08:25:57;i see some value in async arch in your example. async doesn't necessarily mean multiple microservices but people often confuse the two. sending being a different network activity while loadingparsing is either not a network activity or is a different network activity. the assumption has to be that one of the might fail while the other still works. as long as the two are seperate asynchronous activities in your design the failure can get handled much more elegantly.;0
kq2et2b;Reddit;2024-02-12 11:49:28;pack them all into one. if neither of them must fail or the pipeline breaks they are not microservices in that sense they are one service with three dependent stages.;0
kq408ex;Reddit;2024-02-12 18:53:07;i'm curious am i just being a bit naive with microservice architecture if you are asking questions and not having a clear response you are not the one being naive. he has 30 years of experience but may lack experience in this type of architectures. sometimes even experienced devs go with some techarch because it's being used by major companies so it must be the right thing to do. this is not only wrong but dangerous because these architectures also have issues mainly on the data integrity aspects. for me if you are not solving scalability problems you are only getting the issues and not the solutions.;0
kq4pcjy;Reddit;2024-02-12 21:16:00;our company has gone microservice crazy as well. i think the problem is leadershipprincipalsetc. get too enamored with the benefits of microservices over monoliths they overcompensate proposing tinier and tinier services. without the hands on practical experience for the downsides of making services too micro they never get any feedback that helps them calibrate how to properly size services. at my company anyway we have a problematic rift where the more junior devs doing the legwork don't have enough experience to see how crazy the tradeoffs have gotten increased overhead costs latency.... exacerbated by the confidence gap sr's and below aren't confident enough to speak up to overconfident principals and above.;0
kqh0a74;Reddit;2024-02-15 02:31:19;what is your thought process when designing microservices? what are the requirements?;0
kpwskyv;Reddit;2024-02-11 11:14:48;1 cto doesn't have a clue about what problems microservices solve.;0
kpwtcum;Reddit;2024-02-11 11:22:39;i tend to agree. microservices introduction ostensibly to solve a technical problem is often overstated and as a way to work with team organisational problems think conway their use is often understated. what is the structure of the team that will undertake this work? a single developer? sorry these questions are directed to op.;0
kpy2u9z;Reddit;2024-02-11 17:13:04;splitting things to multiple services does not make it easy but rather add maintenance costs and overhead. microservices has became a tool to increase developer workload and to justify the work of people whom otherwise would not be needed. i would say the main reason for doing microservices is managing the scale. when the application is really big and we have like 50 developers working on the same codebase it would be nice to start splitting things so that different teams could deliver their goals independently. but even then i would really try to keep it simple as little services as required trying to avoid distributed monolith trap as well. and of course microservices bring a lot of new issues and complexity. it is a trade off usually worth being made in big scale. as for the main topic i would ask the cto how are we supposed to deliver changes in the services? how about versioning in case of new incompatible changes backwards compatibility? how are the services going to be scaled do we expect different loads for these services and scale them independently of each other e.g. 3 instances of load service 5 instances of parse service 2 instances of send service? and most importantly what are the bounded contexts of these services? do these all services provide independent logic that should really be separated? do we expect other services to reuse these ones? do we expect a completely new different service in the future which would in any way depend on any of the load parse or send services? i would try negotiating and saying you could create a modular service so that you could fairly easily separate it into microservices if it turns out that it actually is required in production. side note i doubt the cto understands different application architectures and just tries to follow the shiny silver bullet thing which turned out good for companies like netflix. also i wouldn't expect someone who can't do a good modular monolith being able to deliver a good microservice architecture either. edit typos.;0
kpxbgy6;Reddit;2024-02-11 14:21:33;one advantage to microservices is decoupling your dependencies. a seemingly innocuous update to some shared dependency may work for the loader but fail on the parser. eventually you also want to get to the point where your boilerplate code to run and deploy an app is basically copy and pasteable or better. ultimately if most of your work is on application logic and not redefining how a python or go app is run and deployed you can get to a point where the work on every new micro service is just about app logic. there is also an advantage to keeping the flow consistent within the company if everything is a micro service and engineered in a certain way its easier to read and understand whats happening in the application if youre not familiar with this exact app but familiar with the company. like most things there are always trade offs. not saying everything should always be a microservice but if the environment is set up smoothly it shouldnt make that much of a difference to deploy 1 vs 2 apps.;0
kpy8hfm;Reddit;2024-02-11 17:44:23;spot on. every single new microservice adds complexity period. more network hops more apis whose schemasinterfaces need to be carefully thought through possible needs for distributed transactions etc. you would think experience would teach you better but micro service fetishism is unfortunately something that doesnt often go away. theres in fact more than one prolific commenter on this sub that describe having many thousands of microservices at a mid sized company.;0
kpyhm60;Reddit;2024-02-11 18:33:52;and then what if you decide to use regular expressions in those microservices?;0
kpwyqz0;Reddit;2024-02-11 12:20:50;usually it's just as good or even better to scale a monolith you can load balance and shard just fine to scale horizontally. and code size is unlikely to be a problem in some cases it might even be better than microservices. one use case for microservices i can come up with is when you have heterogeneous resources e.g. you need to offload certain computations to gpuoptimized nodes that are more expensive. then you likely do need to serialize stuff and send it off somewhere else which is also doable for monoliths wired as distributed services but it's also less of a hit to just make some sort of a microservice.;0
kpwwis8;Reddit;2024-02-11 11:55:54;thanks. i'm curious what do you mean by 'domains'? i've had this discussion with another engineer some time ago and it seems to me like designing architecture around domains ddd focusing logic around business needs etc is incredibly subjective. e.g. some years ago i was working with a guy to design a backend for a simple ecommerce web app we started off agreeing that we need to handle cart operations add to cart remove etc etc handle inventory orders... and a few other pieces of the busines domain. that was great but when we started talking about just the 'cart' domain he saw 'adding things to a cart' and 'removing things from a cart' as separate domains that require separate microservices and i did not... and i wasnt sure how to approach that conversation strictly within the 'domain' discussion part without moving on to the deploymentmaintenancescalability pieces etc.;0
kpwv986;Reddit;2024-02-11 11:41:43;even that's fairly unlikely to be valuable unless you find a way to meaningfully decouple the services and avoid adding meaningless work uncertainty. otherwise an internal call in code is going to be much easier to write manage and change. i find that in practice microservices are more of a tool to attempt to sandbox development.;0
kpy07yd;Reddit;2024-02-11 16:58:20;thanks for the response i really like your view. i do like that approach of 'youre going to know when you need something to be a microservice'! the company currently has a nasty nanoservice architecture think like an ecommerce website not really but very comparable in domain logic where instead of having a single service handling 'cart operations' handling the carts data in a db adding items to cart removing items removing carts themselves etc etc etc we have a service for each one of those operations basically. yep a microservice for adding items to the cart another for removing etc. the team that is responsible for 'cart and inventory operations' has about 20x5 services to handle. yep 100 repos x5 because cto wanted to do separate repos for each geo his argument to avoid breaking stuff in other geos when doing geospecific features.;0
kpx0oq5;Reddit;2024-02-11 12:41:59;mmm. i feel like this is a minority opinion but i feel like a big part of the value of micro services isn't the technical scalability but the ability to enforce boundariescontracts between teams. with multiple teams working in a monolith there's an amount of toestepping and unclear ownership. whereas microservices allows you to define clear contract boundaries between teams and allows them to otherwise operate independently.;0
kpwzy17;Reddit;2024-02-11 12:33:56;how often does this run? how critical is it? if it's a oneoff then hack up a cli app to do the thing run it then leave it. it's it's weekly or more and small it sounds simple enough to run in a scheduled function in your cloud provider k8s cluster. if it's frequent andor too big for a mere function then make a microservice. if you need great reliability and scalability then write a few functions e.g. ingest function runs on a timer reads the data from the db and spits it up each row is sent as a message on a input data queue. parse function listens to that input queue parses a row of the data puts the parsed data on an output data queue. send function listens to the output data queue sends an item to the api. you get great reliability from this. e.g. each function is really simple and focused. if the target api is slow or unreliable messages retry settings will save you. if the target api is down for an hour then messages will be deadlettered. replay them with it's back up. nothing was lost. if the parse function crashes on particular data then the offending messages will be deadlettered. the rest will go through. so you fix that function redeploy and replay those messages. nothing was lost. function can scale right up when they're processing separate pieces of data. 500k rows in a few hours is easily doable. is this maybe what the cto was getting at? however i don't usually view one function as the same as a microservice. a group of functions as described is more like the equivalent. and if they talk to each other synchronously over http without any durable storage of state not message queues then why bother with that separation at all you don't gain from splitting into separate services and then tightly coupling them back again. but do you need this and do you need this now? if not then apply yagnihttpsmartinfowler.comblikiyagni.html.;0
kq0uer1;Reddit;2024-02-12 02:59:43;cto is literally interchanging functions with microservices.;0
kpwwiee;Reddit;2024-02-11 11:55:47;yeah. when he will see that each and every service will have to have... configuration entities separated by environment db connection separate deployment pipeline separate repositories with common mode of versioning deployment configurations for all environments ... he will change his mind. those people support microservice implementations who have never done that in their life before.;0
kpxnlrc;Reddit;2024-02-11 15:44:41;they keep saying that simplicity would be having a service doing just the reading another doing just the parsing and finally separate one for a single post request often the cause of this viewpoint is that they are blind to the possibility of separating concerns any other way. theyve got a big hammer called microservices and they are hunting for nails. anything that looks like separation of concerns is a nail to them. think about it this way whether you do it as microservices or as a monolith its still the same code performing the same functions. but as a monolith the three components talk to one another via method calls and as microservices the three components are deployed and managed independently and talk to one another over the network and therefore introduce a tonne of failure cases that arent there with direct method calls. what these people are saying is that separating out the three functions into three components is simple. what they are missing is that you can separate out the three functions into three components without deploying them as separate services. the only way they are thinking of separation of concerns is to introduce a network boundary. they are comparing that to a big ball of mud not cleanly separated concerns within a single service. the trick here is youve got to get them to see that in either case the logic for the three components is separated out neatly and that turning the method calls between them into network calls doesnt solve any problems.;0
kpxc0b1;Reddit;2024-02-11 14:25:33;one solution that might make them feel better but save you a lot of headaches build a single service with 3 separate modules load parse send. build those modules with very little shared code and separate configurations so you could deploy them separately in the future. you get the productivity of working on one service and management has the option to deploy them separately in the future. my team did this when microservices were the new sexy thing and this process helped us see the limitations immediately and avoid some extremely expensive rewrites. we ended up with a classic soa with only 3 services that actually made sense. an unintended benefit was we got some very clean interfaces and well defined modules in our monolith.;0
kpy9czv;Reddit;2024-02-11 17:49:08;if an update to something breaks one micro service but not the other youre as equally likely to quickly catch the breakage with a shared service for both. and what about in a monorepo where dependencies are centrally resolved? microservices add additional apis between each service too. thats a set of api schemas you now need to be careful not to break. of course you can use grpc with centrally managed schemas eg in a monorepo but then that adds a lot of extra tooling requirements.;0
kpxzxfc;Reddit;2024-02-11 16:56:40;heterogeneous resources are fairly broad. op for example could put the logic into an existing monolith but he's deciding not to. it's not a question of monolithvsmicroservice but microservicevsthree microservices. a etl job has a one off spiky load in terms of db cpu and memory usage that doesn't scale with external traffic. this is different than an api service which has a smoother load curve that scales with traffic. likewise an event logging service has a very different load pattern 100 writes than an interactive saas backend service.;0
kpy15c4;Reddit;2024-02-11 17:03:33;we recently moved from a poorly coupled set of microservices to a monorepo and life has gotten so much better;0
kqccbfo;Reddit;2024-02-14 05:27:36;any articles on this? i need to convince someone else that scaling a monolith is viable and that we don't need a crap ton of microservices for every functionality.;0
kpxbani;Reddit;2024-02-11 14:20:14;domain boundary is about you guessed what domain. to explain more domain driven design is not like some backend folks going into whiteboard and think about what constitutes as a domain. that should be decided by working together with domain expert. normally business people. domain driven design is essentially design according to how business people think about the system. so in your example if domain expert say that cart is complicated and advance enough to be its own domain then you do it. maybe you do some fancy ai fancy data analytics complex workflow or something and that is your platform killing feature. you might find that all these complicated concern is required for any programmer to work on cart system. you find that you need explicit cart optimization team in your organization soon. that is when you do microservice on cart. it is subjective yes. ddd is essentially design according to how domain expert believe system should work so when we talk about requirement bug fix etc we are on the same page. ddd optimize alignment. and for microservice it is simply is this thing complicated enough andor valuable enough in the business sense to have dedicated team to work on? if that is the case having separate repository and deployment would enable that team to work without being blocked by other teams. and if what domain expert believe is true if that part is really valuable or really complicated your whole organization would be more productive with this design. as ddd optimize for alignment it is like once your business or domain expert believe this cart thing need to be update with new fancy promotion everyday you should not couple its deployment with whole system or couple its inner work with other services. if you do that the design is misaligned and that is bad because now you really can't update cart with new fancy feature everyday. it is not really objective because in a sense that it is depended to domain expert opinion but it is a good practice.;0
kpzepjp;Reddit;2024-02-11 21:35:40;he saw 'adding things to a cart' and 'removing things from a cart' as separate domains that require separate microservices and i did not... sounds like he's suffering from the same design malady as your cto. 'cart' would be the most obvious bounded context in ddd terms that you correctly identified. as such it is then obvious to bundle anything mutating the cart together. once the cart is ready to be actually ordered then handoff to another context might be appropriate e.g. you turn the cart into an actual separate order.;0
kpx3f0r;Reddit;2024-02-11 13:10:44;it is a valuable attribute of microservices but it's something that can be achieved within a modular monolith. what you describe is more of an organisational problem solving it with microservices is akin to using a nuclear bomb to mow your lawn.;0
kpynxzm;Reddit;2024-02-11 19:08:14;i think it also appears to play well with haphazard development and business practices. dividing work into teams seems like a boon and microservices let management sidestep thorny things like code review. they get to manage many little armies each headed by a general. some of it looks sound because it does get done successfully in other fields but what they're overlooking is that software is much more complex and improvised than other stuff that gets engineered. and they demand much more agility than that approach can deliver.;0
kpxm07j;Reddit;2024-02-11 15:34:47;no you just don't get it true simplicity lies in 14 different microservices each behind 12 load balancers hosted in different azs replicated in 12 different k8s clusters!;0
kqcvvyy;Reddit;2024-02-14 08:44:21;i can't find anything that reproduces my point of view accurately right now. there are a bunch of horror stories out there but i feel like they don't touch the essential points that well. part of it is that there's an entire landscape of possibilities and some things may seem sound or workable until you actually run into a poor architecturalbusiness decision that interacts badly with microservices. i'll get back if i find anything more comprehensive.;0
kpx0xhu;Reddit;2024-02-11 12:44:33;the services are already decoupled by nature of their responsibilities any dev worth their salt would be able to develop them without coupling. easier said than done. there can be huge coupling regardless of separation of concerns. imagine you build a service that does image processing. at first you need just to rescale images and you add just that. later you figure out you also need rotations for some feature so you add them too except now it's painfully obvious you have to make changes in two places caller and called service extend the api and version things. and that's a fairly happy case because theoretically you could apply a bit of forethought to avoid that kind of churn. people make microservices for all sorts of adhoc business logic and things get really icky and tightlycoupled when said logic is split across multiple repos and deployables. it's not uncommon to end up having every nontrivial change touch a few different ones.;0
kpxmimz;Reddit;2024-02-11 15:37:57;what you describe is more of an organisational problem one of the prime use cases of microservices is to solve organizational problems.;0
kpxso6z;Reddit;2024-02-11 16:15:02;to all the less experienced devs reading this. yea microservices are a dumb cargo cult for most teams. you are not netflix. until you have a headcount big enough where each microservice has its own team dont even bother thinking about it;0
kpx24ta;Reddit;2024-02-11 12:57:22;the example you described is not tight coupling adding a feature to expose rotation functionality does not require all callers to make use of it. x200b people make microservices for all sorts of adhoc business logic and things get really icky and tightlycoupled when said logic is split across multiple repos and deployables x200b agreed but that isn't a fault of microservices but rather one of design. anything poorly designed will result in tight coupling and other problems. the example given by op is three services one for loading data one for parsing data and one for sending parsed data to a 3rd party. these are all decoupled by nature of their responsibilities loading data does not require knowledge of how to parse it and sending data does not require knowledge of how to load it and parsing data does not require knowledge of how to send it. personally i would do this in a single service as it would be simpler easier to deploy manage and extend. however there are benefits to choosing to architect it as several microservices. the decision on whether those benefits out weigh the additional costs of microservices depend on longer term plans are there other parsing services that need to be written? do they need to be scaled separately? distributed computing is a complex subject and not something that should be entered into carelessly.;0
kpx8qb0;Reddit;2024-02-11 14:00:25;the example you described is not tight coupling adding a feature to expose rotation functionality does not require all callers to make use of it. i don't know what it is but if every change turns into a few thrown around different services it's still not good. all that interfacing can be completely avoidable in a monolith. you could just call into a solid image processing library that does everything and be done with it. these are all decoupled by nature of their responsibilities loading data does not require knowledge of how to parse it and sending data does not require knowledge of how to load it and parsing data does not require knowledge of how to send it. you need stable contracts between them. are you sure you can do that? or will every change require messing with the contracts? don't get me wrong the same issue happens even if you split stuff into a library and that's often a good litmus test for microservices would they work as libraries?. it's just that the more you move away from actual code that stays together the more wasteful things become. you can easily end up having to make changes to all three services just because you touched the loading part a bit. edit they probably do share a data model after all. do they need to be scaled separately? a lot of those bad microservices projects don't scale well at all even if that's a stated goal. it's quite common to run into issues like we have to redeploy many services on every release the inability to do gradual rollouts the stuff is even more resourcehungry than a monolith e.g. lots of pods which duplicate library dependencies at various different versions and you're not able to test anything locally. it doesn't have to be like that but it tends to happen if people aren't mindful of what makes sense to split hint most stuff doesn't. i'm very skeptical it makes sense for some adhoc etl thing. distributed computing is a complex subject and not something that should be entered into carelessly. oh i definitely agree. but the overlap between typical projects and typical distributed computing scenarios is rather small especially when we consider stuff like crud and basic etl. managers are more likely to care about sandboxing developers and microservices seem convenient for that.;0
kpym4c6;Reddit;2024-02-11 18:58:20;then again it's no wonder there's so much doom and gloom in tech recently and many projects getting shut down. i wouldn't be surprised if they sank more money overall even if they managed to attract capital for a few years. also notice how there's an entire market centered around managing trouble with microservices.;0
kpy9caf;Reddit;2024-02-11 17:49:01;i don't know what it is but if every change turns into a few thrown around different services it's still not good. all that interfacing can be completely avoidable in a monolith. you could just call into a solid image processing library that does everything and be done with it. you need interfaces in every app that receives communications even in a monolith. i'm not sure what you're getting at here but the whole point of distributed computing is for distinct services to communicate with each other. the point you make about changes is valid in the sense that it's simpler to keep things in the same repo but people don't choose microservices in order for simplicity or ease they do it for performance and scaling. a better and more common example then image processing is analytics. sure you can run all of your analytics code in your monolith sharing the same database and resources or you can split it into a discrete service so it can be scaled up or down according to load with a separate database and it's own resources. you need stable contracts between them. are you sure you can do that? or will every change require messing with the contracts? well yes. anything that's poorly designed is going to require a lot of changes. a lot of those bad microservices projects don't scale well at all even if that's a stated goal. it's quite common to run into issues like we have to redeploy many services on every release the inability to do gradual rollouts the stuff is even more resourcehungry than a monolith e.g. lots of pods which duplicate library dependencies at various different versions and you're not able to test anything locally. yes distributed systems are complicated and have more difficulties then nondistributed systems. doing it poorly will compound this. however that doesn't take away from the benefits of distributed systems.;0
kpz7qrt;Reddit;2024-02-11 20:56:47;then again it's no wonder there's so much doom and gloom in tech recently and many projects getting shut down. well yeah. a lot of this stuff is based on the because i can philosophy rather than because it serves any actual purpose. i've yet to see a use case for blockchain that couldn't be done better by something else. i wouldn't be surprised if they sank more money overall even if they managed to attract capital for a few years. whoever is funding the project possibly but the blockchain hype train isn't quite done yet so people with cheif blockchain bro on their resume or whatever are still getting well paid jobs for now. also notice how there's an entire market centered around managing trouble with microservices. same is true of a lot of grownup architecture stuff k8s for instance there's an entire market of tools utilities training courses and other things to break down the complexity than k8s introduces. i think k8s is pretty cool and there are definitely cases where it makes sense but i also think that not every wordpress blog needs a k8s pod hosted on a multiaz fault tolerant cluster. there is a temptation in this industry lord knows i'm as guilty of it as anyone to start playing with fancy tools and thinking you're a google architect when in reality your actual job is to deliver a small app to a business unit who doesn't want or need cloud architecture stuff.;0
