ID;Source;Creation Date;Content;Sentiment
1gfbwpe;Reddit;2024-10-30;Title:You Want Modules, Not Microservices, Content: https://blogs.newardassociates.com/blog/2023/you-want-modules-not-microservices.html;0

luhwynm;Reddit;2024-10-30 11:05:54;they enable realtime processing. at the core of a microservices architecture is a publishsubscribe framework enabling data processing in real time to deliver immediate output and insights. so my background is in embedded where realtime has a total different meaning anyways but even for a backend service i wouldnt exactly call message queues between services as realtime. more like the opposite.. what is the definition of realtime for web folks?;0
luh4gk7;Reddit;2024-10-30 05:54:15;every time i see one of these posts it fails to note one of the primary reasons that organizations adopt microservices. life cycle maintenance. release cycles are very hard in monoliths comparatively. particularly if changes in shared code are required. almost all methods of having a monolith dynamically link multiple versions of a shared object are more byzantine than microservices and more difficult to maintain.;0
luhh0oj;Reddit;2024-10-30 08:04:13;if there's a memory leak in one of the modules the whole monolith goes down. if there's a load pressure on one of the modules the whole monolith gets degraded. if i would like to upgrade .netjavapython version in one of the modules i have to upgrade the whole monolith at once. people remember that microservices are hard. but monolith with 200 engineers is harder. learn the tradeoff not buzzwords. modular monolith is not a silver bullet nor are microservices.;0
luhqirk;Reddit;2024-10-30 09:55:13;i just hate all these buzzwords. does this make any sense? they facilitate rapid growth. microservices enable code and data reuse the modular architecture making it easier to deploy more datadriven use cases and solutions for added business value. why can't it just be clear? this sounds like empty marketing speak;0
luhpvae;Reddit;2024-10-30 09:47:40;people keep blaming microservices as a bad solution but i don't see them posting any ways on how to find and extract modules correctly. because that shit is hidden pretty far in text books and few people read software architecture books for fun. so in the end the proposed solution is often to 'have a vision from god and rearchitect your whole project on a weekend when it comes' when you finally decide to split your code base. no thank you. in reality microservices are pretty good. a microservice is an app that belongs to a single team. a team is the less than 10 coworkers you have daily standups or similar things with. everyone else is another team for this purpose. you communicate with other teams via explicit api contracts or on timelimited special subprojects sometimes two people need to spend a week working together on a problem that relates two multiple teams. if all your coworkers speak with you daily and you run all code in the same kind of runtime you do not need microservices especially decoupled by http calls. but in any major project this is actually pretty rare. if you need to have processes or ask someone outside your daily team for permission on changing something you have no or bad microservices and should get more. sadly this gets rarely posted online. instead microservices are the devil because you are forced to refactor crossrepos in your dayjob. guess what's worse? being forced to refactor across management layers.;0
lui5vxy;Reddit;2024-10-30 12:26:16;i agree that most of the advantages of microservices can be also be achieved within a well designed monolith. that doesnt mean that microservices dont have merits. most of the problems that they cause can be mitigated if the right service granularity is chosen. sticking to a purist definition of micro is usually the biggest mistake i see.;0
luiitkv;Reddit;2024-10-30 13:57:27;99 of apps don't need microservices. problem is... idiotic managers hr and shit tech leads think that if netflix uses them they must be essential... and then you fail.;0
luhqbqs;Reddit;2024-10-30 09:52:58;microservices solve one problem in particular devops people needing to deal with irresponsible and crap devs. they can compartmentalize them to smaller groups of irresponsible crap devs and chastise them separately to enable quick identification of who fucks things up. btw the way ejb did it's thing was we'll magically break your app up into essentially microservices at arbitrary points magically load them up behind a magically setup load balancer so that you can still live under the impression of this is just a normal java monolythtm. notice that word that comes up multiple times. that's why this approach sucked balls and no one uses it any more.;0
lujgg6r;Reddit;2024-10-30 16:55:32;i don't care about modules vs microservices. for me the most tangible aspect of microservice benefits is an independent build and deployment which can of course also be done without microservices. in my opinion that's the most crucial point and possibly the only one that matters. you don't wait for merges from or into codebases from other teams you don't lock branches for deployments so that other teams don't interfere with yours and you can't break other team's deployments. no release freezes are needed either between teams. this is what you need to scale beyond a single engineering team. and if you do actual microservices with their own backend as they were meant to be than you're not deadlocking yourself with other teams around database changes either. this critical aspect is not automatically given when making modules. you don't need to go full microservice either but microservices will enforce that aspect automatically. this is what makes it a comfortable goto strategy for scaling development because no matter the lack of experience or technical issues within an engineering team they won't interfere with other teams.;0
lukikmc;Reddit;2024-10-30 20:02:59;in my experience microservices tend to be paired with a polyrepo environment which is a combination that provides one key advantage isolation of mediocrity. going with a monorepomonolith strategy requires a heavy investment in tooling and a rigorous quality bar in code review. if your organization can't meet those requirements you need a mechanism to keep teams from breaking each other's code. polyrepomicroservices provides that mechanism. monorepomicroservices is missing the isolationit's best used when a monolith hits fundamental scaling limits like binary size. polyrepomonolith is just cursed.;0
lui1rbi;Reddit;2024-10-30 11:51:07;microservices are great for dividing the workload among different teams and they do so by multiplying the workload significantly. what was a couple of days job is now a weeklong endeavour featuring changes on multiple layers code duplication galore continuous meetings to keep anyone aligned on changes and boilerplatebusiness code ratio skyrocketing to infinity. also now the releasedeployment process is so complex that you need a whole new team of people handling just that.;0
lui6yeh;Reddit;2024-10-30 12:34:54;frankly i don't think you want modules either at least not that kind of modules and on the extreme scales that plague microservices. this is a hot take but i'll claim that independent work and versioning just isn't generally achievable in those situations except for select cases. any way you go about it it's going to be a loss and a plain monolith is going to be more agile than both socalled modular monoliths and microservices. but everybody is so used to small isolated teamssilos poor code poor code management and huge amounts of boilerplate that they can't imagine anything else and any overhead from excessive isolation is considered unavoidable. and indeed those projects also do a poor job at monoliths. but the other approaches also have some of the same issues they just trade off some things horizontal dev scaling versus speed cost visibility and perhaps even static safety. whether or not that makes sense from a business perspective is debatable.;0
luiqzjp;Reddit;2024-10-30 14:45:00;the problem with this is modules make synchronous calls between each other whereas when microservice architecture is done correctly there are no synchronous calls between services. microservices each have their own database and data is kept insync via events. the promise of independent deployment and development can only be achieved when an eventbased architecture is used. when passing that data across network lines thoughas most microservices doadds five to seven orders of magnitude greater latency to the communication. that isn't a microservice architecture though. the author can't say modules are better than microservices when they don't even have the definition of microservice correct. what is described by this e is a distributed monolith.;0
luinr58;Reddit;2024-10-30 14:26:50;i've worked on both monoliths and microservices. give me microservices any day but don't make them too micro think domains.;0
lugn5dm;Reddit;2024-10-30 03:45:33;that reasoning at least has merit. i keep seeing teams migrate to microservices because they built a janky poorly maintained monolith.;0
lugvhzx;Reddit;2024-10-30 04:41:30;yep in a large org with many teams this is the reason i've seen them adopted and it can work well. letting each team dictate their own database schema and other design decisions can be good for productivity. plus there's no question of ownership when something needs to be fixed or changed and there is a clearly defined contract to let you interact with services maintained by other teams. in my experience op is right tho a microservice should just be a module. it can either be deployed separately or deployed together with other modules on the same host the only thing that would change would be if the interface you're using to call it is over a network or within a local process. i like the approach of building everything as a module within a monorepo and deploying it all together until it makes sense to start hosting certain modules separately.;0
lui9a93;Reddit;2024-10-30 12:52:50;yeah i banged my head against this wall so many times before i realised domain ownership changes so often in my company and it's much easier to shift around microservices than modules in a monolith...;0
luhgye8;Reddit;2024-10-30 08:03:28;this exact comment gets posted on any post with the word microservice anywhere in it. are you a bot?;0
luickjt;Reddit;2024-10-30 13:16:27;yeah that's one of the main benefits in my opinion. as long as you keep the most important principle of microservices independent deployability. if don't you get a big ball of distributed mud.;0
luiqqqx;Reddit;2024-10-30 14:43:39;also in worse companies it's to look modern and leading edge. like putting stuff in the cloud which at my company is actually just a server but the ceo is too stupid to know the difference. microservices makes no sense when we have like 3 per worker and we will never need to scale arg.;0
luiotuh;Reddit;2024-10-30 14:32:59;both depend on apis. a team can deliver a library or a microservice for the same api. i think the reason is people want to go to production too often. one seems faster but for both you pay for loss in quality if you rush it.;0
lunyb5p;Reddit;2024-10-31 09:19:30;exactly. microservices are an organizational pattern not a technical one. you use it to scale organizations not performance or any other technical thing.;0
luho9dl;Reddit;2024-10-30 09:28:40;this works well if you have microservices that are independant. in my experience more of often than not you just end up with a monolith split up into arbitrary services that all depend so much on each other that you can't ever deploy them except as one large deploy of the app anyway. granted this is an architectural issue and doesn't mean that microservices are bad but there are a lot of shitty developers in the world that just blindly follow the herd and don't think for themselves what the best decision for their case is.;0
luhwizn;Reddit;2024-10-30 11:01:30;it is just called having services soa has been a thing for decades prior to microservices.;0
luhpmsn;Reddit;2024-10-30 09:44:56;i can't wait for the next 5 or so years when we go back round once again with blog posts being maybe microservices aren't so bad? as people learn monoliths are not a magic bullet. for now we get weekly posts upvoted about how microservices are terrible etc.;0
luhr8mx;Reddit;2024-10-30 10:03:25;it really depends. you could organize a monolith pretty much the same way you could organize a system of microservices. the key point is the connection between the parts so interfaces and all kinds of coupling. you could for example have independent modules which are communicating in an async style within a monolith. or you could have a distributed system consisting of some microservices coupled with synchronous direct http calls a.k.a. distributed monotlith. in my opinion microservices make most sense to reflect an organizational division and to allow independend releases but then the architecture needs to reflect that.;0
lujx9eh;Reddit;2024-10-30 18:19:12;i don't think you need one monolith per company. one monolith per team and they can manage release cycles. release cycles are pretty painful with many microservices per team. just a ton of separate pipelines configs and build issues to fight.;0
luk5xq8;Reddit;2024-10-30 19:01:08;in a monolith if i change some shared code i see the compile errors immediately. in microservices i see the errors at runtime. how are release cycles for monoliths made hard exactly?;0
lui6yjk;Reddit;2024-10-30 12:34:56;we moved from monolith to microservices at 700 engineers. i cannot overstate how much it improved things not having to be so tightly coupled to the whimsproblems of 699 other people spread out over the world.;0
luhxuzz;Reddit;2024-10-30 11:14:42;if there's a memory leak in one of the microservices it goes down. as well as everything that depends on it. if there's a load pressure on one of the services it degrades. as well as everything that depends on it. this is a somewhat good point but you'd want all your services to be upgraded to the latest version asap anyway no?;0
luk1xi2;Reddit;2024-10-30 18:41:51;i wish we got to hear more about these besides this monolith microservices fake dichotomy;0
luhx32i;Reddit;2024-10-30 11:07:07;people keep blaming microservices as a bad solution but i don't see them posting any ways on how to find and extract modules correctly. i know it is being repeated ad nauseum but this adage really clicked with me if you can't figure out how to break your system into modules you won't be able to break it into microservices properly either. if i can't do thing a i def can't do the more complicated version of thing a. in reality microservices are pretty good. a microservice is an app that belongs to a single team. that's just a service. if you read what microservice gurus are peddling then you may end up having more microservices then developeres. this is not unheard of.;0
lui4am0;Reddit;2024-10-30 12:13:06;ehm you do the same as microservices except instead of the network call you do a function call. you don't really wanna to be sharing anything between modules.;0
luigc9z;Reddit;2024-10-30 13:41:48;most of the problems that they cause can be mitigated if the right service granularity is chosen. yes but this is a hard problem and there's no way to prove you've made the right decision ahead of time. one of the best comments i've heard on this is a team that can design a good modular monolith can probably design a good set of microservices. a team that can't design a good modular monolith won't be able to design a good set of microservices.;0
luih8oz;Reddit;2024-10-30 13:47:34;most of people dont know how to design code properly and sustainably. and microservices doesn't fix this problem! everyone has its own litter box so they cant blame anyone else. each team is scooping the nuggets out of their own litterbox into the teams next to theirs. it is easier for leadership to figure out how to handle too. if leadership can't understand coding issues how are microservice issues easier?;0
luism6a;Reddit;2024-10-30 14:53:46;continuous meetings to keep anyone aligned on changes microservices done correctly results in independent development. you seem to be describing the problems with a distributed monolith.;0
lugy482;Reddit;2024-10-30 05:01:09;pretty much why my company moved to microservices. guess what we now have a bunch of janky microservices instead because our director of engineering is trying to replicate building in a monolith mindset but with microservices. its painful to say the least.;0
luhuhf1;Reddit;2024-10-30 10:39:59;now they get a bunch of janky poorly maintained microservices which then depend on some janky poorly maintained modules for shared functionality and it's all spread across several different versions of everything involved all the way down to 4 versions of the isodd npm package being included somehow... and the project isn't even written in node! bonus points if it's spread across 100 git repos based on some incomprehensible branchtag naming scheme.;0
luhx5ej;Reddit;2024-10-30 11:07:45;and every microservices book shouts this from the rooftops that microservices aren't an easy fix for bad architecture...;0
lui7jr2;Reddit;2024-10-30 12:39:34;they migrate to microservices because monoliths make it painfully obvious you need some standards review a minimal skill set and vision. in my experience the migration is hoped to alleviate those concerns and let companies scale development almost purely horizontally effectively throwing more money at it and hoping to extract something from nothing.;0
luhg6b8;Reddit;2024-10-30 07:54:39;microservices introduce some constraints that more or less force devs away from certain bad practices that force ops to treat the app as a special pet. stuff that takes 15 minutes to start and requires the sysadmin to do a little dance to get it fully functioning stuff that can't run as ha but also must be taken down irregularly stuff where one subsystem hogs all the resources and starves other parts of the system or makes it crash etc etc. microservices offer a way for the ops to tell devs computer says no and your app must conform to these demands or it won't run. some of the devs who prefer monoliths could likely build a good one but i suspect a lot of their fans are devs who have had their toy taken away because they couldn't use it responsibly.;0
luirqhq;Reddit;2024-10-30 14:49:04;because they are contractual arrangements between the team managing the api and whoever is consuming it. how do you achieve independency deployment and development when teams are having to coordinate api changes? synchronous calls between services is not microservice architecture. your comment implies a distributed monolith is being used.;0
luhzi8d;Reddit;2024-10-30 11:30:31;its a false narrative. the reality is that you dont need to hire lots of experts in a wide variety of technologies if youre planning on having them all work on the same exact monolith. why even bother? just outsource your java monolith to bangalore and be done with it. but when you hire a variety of engineers and you want to keep them productive then you may want to let your ai team use python while your web developers use typescript or whatever. you also dont want to hire a brand new team of 20 java developers to build a brand new business critical app only to find out that they cant even get started until the 10 other legacy teams upgrade the monolith from java 6. its almost as if microservices are about freedom for experts to join your organization without having to put their career on hold to wrap their heads around some tech debt that the companys founding junior engineer put in place 10 years ago. it is dismissive to call these organizational problems while promoting an extremely simplified and idealistic view of software development where everything can always be done conveniently using the one language and technology that the monolith proponent happens to use exclusively for all of their work.;0
luk2mt2;Reddit;2024-10-30 18:45:16;when most people say microservices nowadays they just mean soa.;0
luis8mv;Reddit;2024-10-30 14:51:46;soa and microservices are not the same thing if someone has implemented an app using microservices that looks just like soa then they have done something very wrong most likely they have created a distributed monolith.;0
luhrmb9;Reddit;2024-10-30 10:07:49;the main issue is people looking to apply one approach to different sizes and natures of organizations. it's the same with project management too. management wants to unify what tools and architectures people use but that depends on the project. your tools and architectures should reflect whether your project involves 3 people and the budget is small vs. your project involves 1000 people and the budget is large. iow don't do microservices with a small team. but do consider them as your team grows.;0
luk6mxh;Reddit;2024-10-30 19:04:36;they don't really do the same thing so the question should i monolith or should i microservice is a false dichotomy. you should monolith. always. until forced out of it. two things force you out of it overall team size and the overhead of communication as outlined in the book mythical man month. and dramatically different hardware requirements across different functionality in your app. if the hardware requirements don't differ dramatically and you only have a dozen or so developers microservices solve zero problems for you so logically you'd never choose microservices over monolith there.;0
lujylta;Reddit;2024-10-30 18:25:47;yeah generally if you're adding a microservice inside a team the only reason to do so is some sort of scalability requirement or a security one in my opinion. there are a few others i've seen that make life cycle easy for example in our cloud products some of the ui connectors which can figure the underlying services are actually separate microservices maintained by the same team.;0
lukc93z;Reddit;2024-10-30 19:32:04;that's great for you. there's seven teams working on the project you need to update your language runtime version. the other teams don't have time to do it right now and meet their goals. see why this might be an issue? also if your interfaces to and from your microservices aren't type safe. that was a choice. every microservice we write declares a fully type safe api internally in the code as well as with downloadable code. anything that breaks that api in any way auto flags in both unit tests and in a compiler.;0
luhbmwa;Reddit;2024-10-30 07:04:54;dotnetcore does not solve this problem. i've tens of millions of lines of dotnet core in production in apps you probably use. for example you cannot have an application running two versions of dotnetcore itself at once. what happens when one team wants to upgrade the.net version and the other doesn't? deploy two versions of the app? great! you have a microservice.;0
luixjno;Reddit;2024-10-30 15:20:02;i've never seen a database schema so coupled to not be breakable with some api glue logic moved to the app servers i.e. services. also scaling dbs horizontally isn't exactly a np hard problem. not saying it's piss easy but there is more ink wasted on that problem than on microservice architectures or at least it used to be the case before the latter exploded as a buzzword.;0
luj5jw4;Reddit;2024-10-30 16:01:08;are the benefits really coming from the microservice architecture or from the fact you got to rewrite the application and modularize it? in other words wouldn't you get most of these benefits by building a modular monolith?;0
lui7fhv;Reddit;2024-10-30 12:38:39;you can rolling restart a microservice a lot easier than a monolith until you identify the memory leak. if there's load pressure on a service you could scale it up much easier than a monolith and more cheaply until you optimize fix the issue or adjust architecture whatever.;0
luit0u3;Reddit;2024-10-30 14:55:57;if there's a memory leak in one of the microservices it goes down. as well as everything that depends on it. no because services should not depend on each other the way people implement it. if the order fulfillment service is down for 5 minutes order will queue up in the brokermessage queue and wait. the service that creates the order works fine is not blocked. if there's a load pressure on one of the services it degrades. as well as everything that depends on it. no. because i can dynamically scale order fulfillment service to 10 instances that will clean the queue fast. i can't do the same with monolity. well i could but it would cost a lot of money to do so. how much ram can you use for a single monolith instance?. this is a somewhat good point but you'd want all your services to be upgraded to the latest version asap anyway no? right now we have services in .net core 3.1 .net 6 and .net 8. some old ones that are not that important aren't upgraded at all. they just work. but the one with active development are upgraded asap. we don't have enough capacitymoney tackle all the tech debt but that's fine with microservices.;0
luighpa;Reddit;2024-10-30 13:42:47;imho this is a very poor argument. so with microservices you went from a very bad experience to a one that's slightly better but since it's not perfect it's not worth it? what's the actual argument?;0
lum45po;Reddit;2024-10-31 01:00:06;if there's a memory leak in one of the microservices it goes down. as well as everything that depends on it. yes but everything that doesn't depend on it stays up. this is a somewhat good point but you'd want all your services to be upgraded to the latest version asap anyway no? in theory yes. in practice trying to coordinate this kind of upgrade over dozens of teams is going to be a nightmare. it's much easier to let each team upgrade piecemeal in their own time.;0
lui7iri;Reddit;2024-10-30 12:39:21;your microservices should have a direct dependency like that.;0
luiu6e7;Reddit;2024-10-30 15:02:03;that's just a service. if you read what microservice gurus are peddling then you may end up having more microservices then developeres. this is not unheard of. ignore gurus. 99 of the grief people have with esbdistributed architectures is hanging too hard on the micro part of it and going too granular. people that actually prophesize going that route are idiots which should simply be ignored.;0
luno9u0;Reddit;2024-10-31 07:22:31;if you read what microservice gurus are peddling then you may end up having more microservices then developeres. this is not unheard of. currently working on a project with 4 microservices per developer had worse ones before. you can deal with a ton of technical complexity if you use it to ignore business complexity. of course i would prefer to build a better solution but that is not for me to decide. you need to refactor a whole company to do it right and if i did that there would be no time for coding anymore. the cool thing about microservices being split nearly randomly is that it greatly enforces modularity. by random change you might have correct modules. there are people winning the lottery.;0
luj6jrb;Reddit;2024-10-30 16:06:10;it's also a problem that changing the service scope domain slice is difficult to change later meanwhile shuffling classes between packagesmodules within a monolith is usually much easier. a common antipattern i've seen is that microservices accrue responsibilites it shouldn't have and would ideally belong elsewhere but got implemented there for usually organization reasons asking xxx owners to do yyy would take so much time let's try to do it locally instead. a team that can't design a good modular monolith won't be able to design a good set of microservices. this 100. microservices just seem more difficult to implement well all else equal.;0
luhw8cu;Reddit;2024-10-30 10:58:30;you may be lucky and have had a bit of a sheltered life in your devops role if you think the constraints of microservices make them easier to deploy or means they must necessarily avoid setup dances. someone else has done the hard parts for you and other people have rules in place that they painstakingly spend time following to ensure microservice that reach your devops team run properly and it clearly isn't your job to fix them when they don't. if you'd done the dev and devops side and the initial piping work you'd know microservices can require all the same dances as monoliths except instead of writing 5 lines of instructions for server setup that needs doing once in a blue moon you now have 100 lines of code to maintain that attempts to do the dance for the app automatically and needs updating for each new deployment type... that's without even considering all the extra code and maintenance cost of the infrastructure required for using microservice architecture in the first place yaml helm docker kube etc.;0
luhwcus;Reddit;2024-10-30 10:59:48;microservices introduce some constraints that more or less force devs away from certain bad practices yeah and they also make it easy to implement some other bad practices. i'd rather have a shitty monolith than shitty microservices. a team that can't do monolith certainly won't be able to do microservices any better. an exception i've seen was a way to basically sell refactoring by moving to a microservice architecture.;0
luhgf8d;Reddit;2024-10-30 07:57:25;as a library making api calls internally but optionally externally when required. the new hotness is just having an omnibundle in go or something that has every service put together. then if you want to scale up you just run the binary with a flag that does that one task you want to scale. if you want to keep things simple just run that same binary with the do all the things flag. you also lose a lot of the latency and weird performance problems that crop up with microservices at scale because everything is talking over ram when not split out.;0
luj572r;Reddit;2024-10-30 15:59:18;it's so common that it's basically the only real world case of microservices. i'm still waiting to see this holy grail of a clean microservice architecture.;0
luj3t0z;Reddit;2024-10-30 15:52:18;by taking to your monolith with a knife instead of rearchitecting in a way that would actually benefit from a microservice arch;0
luitvg6;Reddit;2024-10-30 15:00:26;they are not the same thing because ms crowd want very hard to have their thing going. in the end of the day microservice architecture is is a form of a service oriented architecture with its own jargon and purity criteria. i heard this is microservices done wrong more times then i have seen microservices shine.;0
luo41uu;Reddit;2024-10-31 10:27:12;that's just bollox. if there's a big difference between what is a properly decoupled soa and microservicesdoneright then it's just granularity. and if that's really the case it's the us people doing it wrong and taking the shit way too far for no benefit and introducing loads of footguns and yagni overengineering. if your services can be written in different pls only talk over well defined apis can be deployed independently scaled independently and versioned independently and you only need to think about handling compatibility transitioning on major api changes you're doing it exactly right.;0
lui6364;Reddit;2024-10-30 12:27:54;this has to be the correct take. microservices were a godsend on our 1k engineer project. otoh i agree it would probably be silly to do something like that for 5 people.;0
lui8cf5;Reddit;2024-10-30 12:45:43;how a lot is a lot actually? sure restarting an instance of the monolith will take more time but it's usually still just kill the old server run the new server. for scaling yeah it's true this is one of the microservices' big thing. if you need it.;0
lujz4z7;Reddit;2024-10-30 18:28:22;there's costscons associated with switching to microservices. so it makes sense to be skeptical of the pros as well;0
lumpvus;Reddit;2024-10-31 03:02:12;this is where im at. our monolith is insanely large. i dont want microservices but a dozen monoliths would be fantastic.;0
luj4y01;Reddit;2024-10-30 15:58:02;you are describing a distributed monolith. the scenario you describe doesn't happen in an event based microservice architecture.;0
luj4oeg;Reddit;2024-10-30 15:56:42;i'd rather have a shitty monolith than shitty microservices. this 100. at least you have a smart ide static analysis typesafe language. building e2e tests is much easier with a monolith. with a network of fucked up microservices it's game over.;0
luoc0r0;Reddit;2024-10-31 11:49:20;broadly speaking i agree because modularity at the end of the day is just a buzzword and you can implement it in an infinite number of ways. but i am not sure i follow your points about separate machines. being able to run multiple apps on one machine is one of the most wellknown design concepts behind microservices. that is why they use techniques such as containerization to isolate processes and dependencies from one another. on the other hand perhaps to your point very few people who only ever worked on a singleprocess monolith are aware of microservice communication let alone the vast number of options beyond sending json over http between two machines on opposite ends of a datacenter. it's one of the cliches that this is how microservices work but it's just not true. if you can come up with a way for to processes on the same machine to talk to each other then you can do it exactly that way with microservices. if you're using kubernetes not a problem just learn how the configuration files work.;0
lujndd3;Reddit;2024-10-30 17:30:26;my org is pretty decent about it not great but decent. we use a mix of rest apis and kafka topics and we use feature flags for big efforts. we also have a governance board for application contracts with strict versioning and a focus on compatibility. for example if a new effort requires updating five existing microservices and creating five new microservices well release each one as they become ready and at the end well flip a feature flag thatll either get used by multiple microservices or by the entry point to the process. for an actual example starting in 2022 my team worked on a complex new microservice that took over a year to complete and was deployed to prod in january. the other teams were all running behind so they deployed their microservices throughout 2024. the final puzzle piece wasnt ready until last month. when it was turned on it all just worked. most testing was done against contracts and most of that testing was automated. very little endtoend testing was needed.;0
luotzpr;Reddit;2024-10-31 14:02:46;there is no value at all in taking a very fast inmemory function call and replacing it with a relatively slow and errorprone network hit. what you are describing is a distributed monolith. when microservices are done right i.e. an event based architecture there is simply no need for a microservice to call another one synchronously because each microservice has all the data it needs in its own database. it keeps its database insync by listening for events from other services.;0
lui99zb;Reddit;2024-10-30 12:52:47;a lot totally depends on the monolith but for most of our services a new instances can be started in 10 to 30 seconds. we're running close to 300 independently deployable apps. i wouldn't call them microservices necessarily but more like services with 10 to 20 front ends with shared auth. the older legacy stuff that runs on ibm websphere takes minutes to startup an instance.;0
luih203;Reddit;2024-10-30 13:46:22;that sounds like an actual microservice architecture not a distributed monolith.;0
lui3hcg;Reddit;2024-10-30 12:06:12;all of that just reinforces my point you personally don't do the hard parts that come with microservices. you basically just get to reap the benefits. of course it seems easy from your pov.;0
luonors;Reddit;2024-10-31 13:21:02;being able to run multiple apps on one machine is one of the most wellknown design concepts behind microservices. that is why they use techniques such as containerization to isolate processes and dependencies from one another. yeah i think both my comment and the article talks about microservices in the sense of only using json and http to communicate across machines and my work experience has been that people define it that way too unfortunately. but i can totally imagine that the original definition and design of microservices allowed for services to run on the same machine and with different protocols somewhere i think that got lost.;0
luo7iux;Reddit;2024-10-31 11:05:16;ms microservice in my post not microsoft;0
luogbq6;Reddit;2024-10-31 12:26:56;yes the system does become eventual consisten eventual consistency is not an inherent attribute of microservices. it is something that needs to be designed and built out and can be hard to get right if you aren't very wellversed in error handling across distributed systems. i mean it's mainly just outbox on sender idempotency on receiver. but most companies don't attempt this they just say throw a message queue like kafka in the middle and that's good enough right? no it's not good enough.;0
luiiqhv;Reddit;2024-10-30 13:56:55;distributed monolith is a pejorative used as a degenerate form of microservice. it is actually a fairly useful evolution of a monolith. some may see this as a waypoint to a modular monolith. it gets fuzzy. the key is what you're trying to accomplish. if you intend to build micro services and build a distributed monolith then you fucked up. if you need to scale components separately of a monolith then splitting on services but not the actual code and data stores provides a ton of utility for a long time. people got the idea that microservices scale an app. they for the most part enable scaling organizations.;0
lulp0re;Reddit;2024-10-30 23:35:41;once you account for development overhead difficulty enforcing standards and all that i'm afraid the picture isn't so clear anymore. there are monolithic open source projects with hundreds to thousands of devs per release cycle and they do much more meaningful work. because ime once you get into nastier microservice architectures it's very easy to waste time on glue code most of the time. and keeping those apis stable because atomic large scale refactoring is now nearly impossible. adding up the required headcount explosion and the evergrowing underreviewed swaths of code i'm honestly very concerned it might be a net negative even if you do manage to hire cheaper devs.;0
luivjte;Reddit;2024-10-30 15:09:25;microservices are great when used appropriately. but if you have most of the drawbacks of a monolith with few of the advantages of a microservice it's not a good thing. development is not simple because you have a lot of dependencies between different repositories. deployment is complex because you need to keep all the repos in sync. you basically get the easier scaling maybe. if you use it well for the right purpose then it's great i feel like you often get a distributed monolith when people go for microservices from the very start because that's apparently what you should do and everything that could have been a module in a monolith gets turned into a service without really evaluating whether or not it's even a good idea.;0
