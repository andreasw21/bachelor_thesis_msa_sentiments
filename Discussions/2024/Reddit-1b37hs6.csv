ID;Source;Creation Date;Content;Sentiment
1b37hs6;Reddit;2024-02-29;Title:How do you deal with an experienced architect who wants microservices everywhere , Content: Some months ago I joined a project as a senior dev that's basically a wrapper around a fancy 'processor' (which is owned by a different team) that outputs a result. There's some validation and business logic going and data is stored in a database for later use. It scales up and down based on demand. Team is pretty small with 2-3 devs working on it (including me). So far nothing too fancy.  What makes it special is the use of microservices. And with that I mean inside our small team, not on a organisation level. This is enforced by the (non coding) architect who is completely convinced microservices are the modern way of writing software. He actively pushes back on any code changes that conflict with his vision of microservices. I tried to figure out why this is needed but I couldn't get much more than 'scalability' out of him.   Problems that would have taken a few lines of code at best now need hundreds of lines. It's really slowing our team down and hurting motivation. Debugging is a hell because you now need to run half a dozen services. Iam convinced the domain boundaries are completely wrong as pretty much every story results in changes in multiple services.   He's also the only technical guy on our team who is for microservices, others would rather keep it simple.   Problem is the managers trust him which makes it hard to push back.   Starting to doubt if it's better if just leave this project. Have you ever dealt with such ppl? Did you have any success in actually changing the direction of a project away from microservices hell?;0

ksqht9l;Reddit;2024-02-29 20:00:35;microservices are a design pattern designed to meet the needs of large scale organizations deploying large scale systems. the benefits are that they allow individual components of a large system to be maintained by small dedicated teams and they allow finegrained control of resource scaling for those components. the disadvantages are that microservices architecture systems become increasingly difficult to test at the level of whole system integration and a lot of the application's complexity gets pushed to the integration layer where it is harder to observe and debug. as a final concern there are major system design problems with microservices because it's not always obvious which service should own a particular function. now you've got code factoring problems that are further exacerbated by everything becoming a network callrpc. if your organization is primarily having problems related to team and infrastructure scaling then microservices is a reasonable solution to those problems. if you don't have those problems then microservices is probably more trouble than it's worth. you're giving yourself extra steps and additional technical and organizational problems for no real upside. so does your organization have the types of problems that microservices are a good solution to? if not why does your architect want to use them? have you had this kind of a conversation with him? is he persuadable? are you persuadable?;0
ksqjwlx;Reddit;2024-02-29 20:12:08;this has nothing to do with microservices and everything to do with communication. you could replace the word microservices with document dbs graphql or whatever technology name you'd like and the nature of your issue would be the same someone with architectural authority is enforcing their vision on you and you're not having it. talk to him. repeatedly. keep talking until you come to an understanding. there is some kind of technical strategy there it might be bad quite likely it might be good but very poorly articulated or it might be good and you don't understand it yet. i recommend approaching it with the mindset that you just don't understand it and pressure the architect to help you do so. if you've already tried that and determined that you are right and he is wrong well then all you have left to do is to decide if you can live with the situation.;0
ksqm26o;Reddit;2024-02-29 20:23:55;modular monoliths may be a compromise. if done right later on itll be easier to migrate to microservices. each bounded context is its own project with mostly everything scoped to internal with an interface that is public.;0
ksqi35o;Reddit;2024-02-29 20:02:05;debugging is a hell because you now need to run half a dozen services. iam convinced the domain boundaries are completely wrong as pretty much every story results in changes in multiple services. how are you testing it? everyone i know who has had to deal with microservices says that this is the biggest hurdle. being able to trace and test a transaction hopping between microservices is a difficult thing. if you can't prove that it works then it's worthless.;0
ksrmkqa;Reddit;2024-02-29 23:44:23;the first indication that someone does not understand the benefits and costs of microservices is the generic scalability response. they simply don't understand that in many cases for a single team monoliths scale far better.;0
ksrr304;Reddit;2024-03-01 00:11:15;ah microservices. tell them about the story how to debug when critical services down if you have good observability great but even something happen like timeout and chained network event rollbacked..or when they depend on specific infra such as redis down which makes db load increases and suddenly multiple services load became higher. also say goodbye to transaction so now you need to guarantee multiple service successfully write all the data needed otherwise some recovery is needed. dont make the same mistake like us..no architect in our teamorg but we failed our domain model because we started our microservices journey 5 years ago migrating from monolith and this still never end due to higher priority project keep rising. nobody wants to maintain a load of services. when people leave who will own that pieces?nobody wants.. when you have latency issue enjoy tracing down that opentelemetry to multiple places..also enjoy running multiple local instances. org that implement microservices forgot that not everyone is faang. not all of us had decent machine and ability to replicate everything into our local so that goes to the dev emv but who wants to set it up properly?is it dev or is it the devops?.. more responsibility to handle;0
ksrq4li;Reddit;2024-03-01 00:05:25;send him some articles on distributed monoliths. any time one feature requires changes across multiple microservices that's a smell that you have a distributed monolith. and yes the answer is to combine services until you have high cohesion low coupling. things that change together should live together.;0
ksqhvyd;Reddit;2024-02-29 20:01:00;i was in your position 5 years back when i joined my current team. the tech lead back then was a fan of monolithic systems and every project and business initiative changes went into the same java app deployed on tomcat. worst part the non technical people and managers around trusted him and gave him the freedom to build how he likes. it was frustrating to loadcompile 1000 classes to change a small thing. fast forward to today we have moved away from that monolithic approach and have domain specific servicesnot microservices. it was challenging and there were a lot of arguments and discontent between us over the years but now he sees the benefits of smaller apps that contain and minimize risks. i make decisions now and he just develops now. anyways it's up to you.. want a challenge then try to change it and it may take several years and many arguments to get there. best to find a like minded team and move on. life is short .;0
ksqnl6i;Reddit;2024-02-29 20:32:17;how come the noncoding architect is doing the code review? he has no skin in the game if he doesn't commit code. microservice isn't bad if you need it. first he should explain why he wants to build your new project using microservices. the pattern is okay as long as you have concern of scalability seriously a lot of time you may end up with a queue that works better than scale up and down for the sake of reaching scalability goal...;0
ksqffzj;Reddit;2024-02-29 19:47:44;ask which company he's applying to. x200b source am quietly pushing for microservices knowing it's not the right solution just to add to my resume because my current employer pays like shit.;0
ksr1zw3;Reddit;2024-02-29 21:50:19;unless the lines of demarcation of very very strict microservices is a nightmare waiting to happen. eventually if the dogma is string the backend end uservicesd end up running multiple async queries waiting on threads to complete multiple accesses to other services and soon you end up with a totally buggered slow to respond system. i dared suggest that we have readonly access so that all uservices could get what they want without making extra service calls.... tumbleweed moment but 3 months later i won that argument with a small poc that made the current system look like it was running on a zx81 by comparison. beware.;0
ksxhknn;Reddit;2024-03-02 00:52:35;by large im an architect who would favour microservices where it makes sense or possibly where it might make sense but im seeing some pretty big gaps here. first is a small team doing microservices in isolation a microservicebydefault policy is great in an organisation with a mature ms culture and supported toolset with internal experience and culture to know the pitfalls and problems. it sounds like none of these are true for the op. secondly is team buyin an org thats going to go the microservices route needs to start somewhere and that should be in a team with technical management and business buyin and sufficient slack in the feature delivery to learn and operationalise and make mistakes and roll back and try new things. thirdly it sounds like the services are just cut wrong gut feel is that its not just domain boundaries but logic boundaries and the wrong types of communication between the microservices. if you have to dig across a bunch of services for debugging this suggests to me that business logic is split across too many services rather than encapsulated into the service that should own both the data and the service logic. do you have some microservices that are essentially a crud wrapper on some models? because if you have the architect has invented a database with a rest frontend which anyone can touch.;0
ksqke0t;Reddit;2024-02-29 20:14:47;microservices definitely are the modern way most software is made but it sounds like you're seeing all the worst parts without the benefits. you have to invest the time into improving the tooling around them for it to provide any real benefit. it also depends on how big any of these apps actually are though.;0
kssnfkb;Reddit;2024-03-01 03:39:14;microservices mostly solve a peoplerelated problem. specifically the problem of too many engineers treading on one another's toes in a shared codebase. there can be scaling upsides compared to monolithic applications but this isn't necessarily a given. there isn't much upside to microservices if your engineering team is just a handful and you'd be better served by a properly modularised monolithic application. the inability of this person to see that is concerning.;0
ksqiefz;Reddit;2024-02-29 20:03:51;microservices are probably better than a big monolithic server tbh. if you are already encountering domain issues then a monolith won't be easier to debug. it'll be just as annoying but in a different way. the solution there is to break down your domains into even smaller chunks so they can be managed more effectively. when you say you have to run a hundred services just to debug..... yeah??? exactly???? then when you make your bug fix you only have to restart one;0
ksqk5gv;Reddit;2024-02-29 20:13:29;have you proposed a solution of modular monolith? his argument if scalability wont work because modular monolith would allow to change for fullblown microservice ar architecture in the future while maintaining simplicity of monolithic architecture with clear defined boundaries and decoupling;0
ksqsvfg;Reddit;2024-02-29 21:00:49;document document document. the question of how to factor services is a hard one. usually microservices are more about how to deal with conway's law than anything else. there are other usecases but they are rarer than the conway's law issues. given that it is within your team asking good questions is a good approach here. there are other methods of abstraction than microservices. back in my days we used header files and underscore double underscore to deal with it. also it is amazing how much faster function calls are vs. https . you may not need to scale if you don't spend all your budget on rpc. in general i won't split things until i see a reason to. that said you may also be seeing a bit of trauma or almost second system syndrome where this architect got burned hard by not making the call right in the past so they are overreacting and chrome plating everything . but in the end you are a grunt. document your concerns to your manager and in other appropriate spots and as they say this too shall pass.;0
ksqvao4;Reddit;2024-02-29 21:14:06;gergerly from the pragmatic engineer newsletter just explained how microservices make less sense in a postzirp world. you need microservices to manage hypergrowth. with interest rates where they're at you won't see hypergrowth.;0
ksr2miq;Reddit;2024-02-29 21:53:41;remind the architect about the kiss principle if he thinks that his microservices design follows that. tbh i'm usually against microservices because most of the time they end up being too granular so it overcomplicates things and makes the scalability argument absurd. if 2 or more services depend on each other chances are that you would need to scale those dependent services at the same time which defeat the purpose of the microservices architecture making the actual application slower especially in the case of failure assuming that you have retries and api calls everywhere. if he replies with the single responsibility principle then tell him that you can implement that as well into a service by separating them in different modules or subservices.;0
ksr9nga;Reddit;2024-02-29 22:31:48;it only makes sense if you want horizontal or vertical scaling of certain components to be separated as a deployable unit. then you have an issue with communication with that service you need to add other components to handle them. otherwise one can also define domain boundaries or decoupling within a single deployable unit. for me the microservices should match the physical separation of deployable components which need different scaling demands. otherwise bounded contexts loose coupling can remain in logical space. it does not matter how you arrange them.;0
ksrhyci;Reddit;2024-02-29 23:18:01;out of curiosity will the microservices all share your existing database or will each microservice have a separate db?;0
kss1tr7;Reddit;2024-03-01 01:19:01;depends on how big your monolith is. if your scalable app is pretty big a pain in the ass to deploy and spaghettified plate of shit then yea microservices are the way to go....but if its a simple api then no. need more details about the project to really judge it.;0
kss9nxr;Reddit;2024-03-01 02:09:02;microservice is an architecture design pattern to solve large org scaling problems. too many companies ctos architects blindly promote it without understanding what problems they are looking to solve. speak to your manager and architect to understand what problems your team is looking to address with microservice architecture.;0
kssftmc;Reddit;2024-03-01 02:48:54;ask questions and use the socratic method! it forces them to think and makes you come across as less hostile how big should a microservice be and why? when is a microservice too and should be split? when is a microservice too small a needs to be merged? what is the cost of having independent versioning vs synchronized versioning? how do you handle migrations all the time? what should you do when multiple microservices depend on each other? do you divide services by team or a technical boundary? i.e. is db ui and business logic separate microservices or is accounting separate from sales? what do you do with sub dependencies that cut across multiple microservices? like ui style guides or user sessions;0
kssjat0;Reddit;2024-03-01 03:11:46;we have a bunch of these guys at my current employer. they managed to design us into a situation where we have to create a new ecs service to put up a new endpoint. the only way i've found to press back is by having actual urgency so that they have to make sacrifices to practicality. and it's still like pulling teeth. these guys are career guys at midtier companies who spent 10 years hearing about microservices but didn't get to run them. while being stuck managing painful monoliths. so they don't really seem to understand the trade offs being made.;0
kstb0g9;Reddit;2024-03-01 06:38:57;ask him to own a single service design and write it and then maintain it going forward. a big drawback of microservices imo is maintaining and rolling them out keep their versioning apis and config in tact.;0
ksuocm6;Reddit;2024-03-01 15:01:03;make an analysis with pros and cons and remember to include cost. get one your colleagues review it and then send it to you non coding architect and put your manager and other relevant people on cc. personally i have worked with with different architectures and imo microservices are some overhyped and often overengineered piece of shit in most cases. good luck.;0
ksvd31q;Reddit;2024-03-01 17:30:13;the argument shouldn't be about microservices vs monolith or any other architectural choice it should be based around what is achievable with the team you have in the time frame you set out to do it. of course there is always a google level solution to everything but that is almost never the right choice for a smaller company. my favourite move with people like this is to essentially accept their directional version provided they can give equally as many reasons why you shouldn't go with that approach. if they cannot argue both sides of the pros and cons its simply an opinion that hasn't be adequately assessed. there is almost nothing in software development that has only 1 solution.;0
kswy6nr;Reddit;2024-03-01 22:52:13;so if you cannot win join them. keep your estimates consistantly high due to the microservice overhead and let him defend the delivery dates. stop resisting and build processes around handling the problems. spend some time getting good at them. if your team is small and there is only one external endpoint it shouldnt be too bad just slow. put in extra effort for testing the architecture. these types are unlikely to backdown. the other tactic is to build it without microservices and put some 3 month estimate to convert in the future. in my experience they never get around to that step and so there will never be microservices. as others pointed out microservice architecture is to scale engineering teams more than scaling code.;0
ksxjd4k;Reddit;2024-03-02 01:04:22;microservices is a term that i think doesnt really mean anything. theres some implied distinction from large monolithic applications but really thats about it. its essentially for every software shop to figure out how to slice the operations in their domain down to the right level. thats pretty much the hard part of software development and frankly thats a problem that even predates the concept of web services. anybody who claims to have a onesizefitsall solution for partitioning your services is full of shit. huge companies with high throughout services often need a ton of layers for managing even small domain objects because they need a bunch of caching and geographic sharding and other considerations. thats typically just not the case for small shops.;0
ksqylrl;Reddit;2024-02-29 21:32:00;we are a team of 23 devs not a organisation. i tried to make this clear to the architect as well but he does not agree and just claims microservices are always better.;0
ksqoxfa;Reddit;2024-02-29 20:39:35;generally microservices are a great fit for scaleups who are doubling headcount every year and ownership is a huge problem. as goes facebook then goes amazon then go the tech consultants now that the zirp is over and headcount is realistic again their main use case is falling over;0
ksqy7oy;Reddit;2024-02-29 21:29:54;nah this is a symptom of resumeoriented architecture. grin and bear and put on your own resume that you operated an enterprise microservices architecture.;0
kssfw7y;Reddit;2024-03-01 02:49:22;having designed both megamonoliths and allmicroservice architectures in the past thats my current approach when something warrants being split off into its own service youll generally know it and if the system is modular its pretty easy to separate it;0
ksrxz2h;Reddit;2024-03-01 00:54:24;at my previous job we had a repo to setup all of our services locally user docker compose. we used kafka and trace ids with each transaction. it was pretty easy to debug once that repo was created. it was still a pain to have to update 15 repos for each feature and lots of services needed similar functionality so we'd end up with multiple implementations of the same functionality in different services which caused some headaches. during a meeting about improving our initial design i brought up combining a few of the services that were in constant communication meaning they needed to handle the same data structures and setting up the config to run the services in specific modes and most of the team seemed on board with that idea if we ever had time to make the change. cloud providers love to push microservices as the solution to every problem because they generate more revenue than monoliths and are more difficult for companies to move their infrastructure when the provider raises peices. i worked one job with onsite aws support that would do training on aws services they thought would be good for our company and it never seemed to offer a technical benefit to us to switch and were always more expensive. eventually our cost were so high that our cto told all the devs to spend a month doing everything we could to reduce the aws cost and we were able to cut them in half.;0
kst4jx1;Reddit;2024-03-01 05:43:18;but by then they'll be knee deep in microservice tech debt?;0
kstm334;Reddit;2024-03-01 08:33:08;oh the microservices or distributed monolith all live in the same repository. they even share some code as they are too tightly coupled to be truly separate. from a technical side it's too obvious this is simply wrong. the problem however is not technical. me and my team know how to fix this by combining the services into one reducing overhead many times. the architect however blocks us from doing so. this has let to many frustrations in the team and ppl are even thinking of leaving.;0
ksz88bl;Reddit;2024-03-02 09:41:25;first some context this project started 3 years before i joined. the microservices were actually setup by that architect because back then he was a software engineer who was still coding. iam basically his replacement as senior engineer because they needed someone with experience in the team. the project is planned which i know is going to be postponed to go live later this year. lots of services are indeed just a thin rest wrapper around a database. they do all have some form of validation going on which btw makes it alot of hassle to show detailed error messages to consumers of the api when some internal service returns a 400 as that either has to be passed through the chain or checked beforehand by extra validation http calls to that service. there are some queues as well though and in this corner there's a part were scalability actually starts to make sense and it might make sense to split out a part. still no reason to go microservices. my general assessment is that the project is a total mess on alot of different levels. the way microservices are done is only a part of it unfortunately the tests suite is a mess because the scope of the unit tests is way too fine grained like 10 mocks in every tests and there are 0 integration tests. refactors are near impossible due to all the coupling and quickly blow up. the type of fields in models is almost always a string. number? string url? string enum? string. not even build in types of our language are used let alone more ddd like richer types. dogmatic approach to clean architecture so even within the microservices there's alot of abstraction and layers going on. and i could go on. how this guy ever became architect is beyond me.;0
ksqyh8e;Reddit;2024-02-29 21:31:19;i don't even know if it's a people question. op hasn't really stated why the project shouldn't be a microservice except for debugging is hard. it's entirely possible it should be microservices.;0
ksqtrgo;Reddit;2024-02-29 21:05:43;what a truly silly take. microservices solve far more than ownership issues. but you need to use common sense when building microservices. you don't want an explosion of tiny microservices for no reason. each one adds a network hop increases deployment complexity etc.;0
ksr0idm;Reddit;2024-02-29 21:42:21;imagine you have a system with customers and bank accounts. you could maybe consider these two as part of a payments bounded context where payments generally need to know about both. in a microservices world you might have one microservice for customers and another for bank accounts with two different codebases. so youve split the code so that you can easily see the code boundaries nice. but the two concepts are so tightly coupled for certain processes bounded context that there is constant interaction between the two via an interface like api calls rather than just calling a method where they are in the same codebase. for example what if i need to show both the customers name and bank account details on the same screen? this can get even more complicated when each microservice has its own database and need to think about how to test different components. microservices arent inherently better or worse than monoliths and there are varying degrees of how granular a microservice system can be. there are trade offs to each and it depends on a case by case basis.;0
kstkxnh;Reddit;2024-03-01 08:20:10;by then you have experience in microservice development that you can add to your cv;0
kst5ps5;Reddit;2024-03-01 05:52:51;yup. and mr microserviceitect will be blamed. that's all that truly matters in the corporate world make sure there is a scapegoat other than yourself.;0
ksr4iy8;Reddit;2024-02-29 22:03:57;you're insane my guy. you think a 600k line server is easier to debug than 45 microservices??;0
kss3aum;Reddit;2024-03-01 01:28:19;basically microservices make separation easier to see even though you couldve separated them in a monolith to begin with. i think one of the reasons for microservices is that even if you nicely separate concerns in your monolith from the start each part of the system will inevitably become closely coupled to each other part as expedient changes are temporarily made to get stuff done for now. workarounds are selfsustaining the more workarounds you have the more often you'll need to employ a workaround until there's so many workarounds that your monolith turns into a legacy system. few organizations can sustain the discipline needed to actually maintain a proper loosely coupled monolith. eventually we'll come to a point where you say that we need to take two weeks to implement x correctly and i say that i can implement x with an expedient change by tomorrow and the business goes with my plan. i'm praised for being a businessfocused customeroriented problem solver you're chided for creating obstacles to delivering business outcomes with your architectural navelgazing. so microservices serve as a kind of forcing function. it takes a lot more effort to make the right changes to a microservicebased application but that's acceptable because in theory it takes even more effort to make the wrong changes to it. instead of trying to keep future incentives aligned with your desired outcome you make sure your desired outcome is the one that future incentives will choose. it's like cortez supposedly burning his ships after he landed in mexico it forced his team to go along with his plan by eliminating the easier alternative at the cost of needing to build new ships to get home afterward. at least i think it was cortez? i don't remember. i don't think microservices are a good forcing function or that it's a good choice to choose microservices. it's just an observation.;0
ksrbfsy;Reddit;2024-02-29 22:41:36;microservices arent inherently better or worse than monoliths as a highlevel approximation i agree in this regard. in practice though there will be huge complications for microservices such as the needwill to handroll representations and calls across services managing stuff in version control when changes are no longer atomic without extra coordination and a bunch of other stuff that piles up. it is much easier to let a compiler handle a function call much like you mentioned. i urge people to think of a microservice as if it were an external 3rd party library if they're serious about it. you don't go making changes back and forth between your code and consumed libraries all the time. you don't submit adhoc stuff to such a library. they will version and maintain some compatibility guarantees. and it pretty much has to be something relatively generic and generallyuseful to resist changing things all the time. it is the antithesis of the internal works of typical projects and even libraries have internals that change all the time. public api boundaries are expensive.;0
ksyn3zt;Reddit;2024-03-02 05:53:56;it has every implication on the architecture because the api surface of a service is a bounded context. api is not a bounded context. api can be part of the bounded context typically but not necessarily together with the implementing service. there can be multiple services within one bounded context or just one monolith. hell there can be multiple bounded contexts within one monolith. because bounded context is orthogonal to the technology it's a modelling concept. i agree that bounded contexts will inform the architect's decision on how to map the model into technical solution. my point was that namedropping like tell him about bounded context will achieve and does not communicate nothing. but one bounded context can contain multiple microservices or just one of them. ddd does not tell you the technical solution within it.;0
kstpch5;Reddit;2024-03-01 09:11:11;in addition keep a journal of issues you and your team have had because of this architectural mandate. deployment gone wrong having to wrangle data from different services that could have been a simple join issues with development and testing due to the dev env being distributed and so so on. show that you are not just complaining because you disagree with microservices but that they bring real pain points to your team.;0
ksu0pqy;Reddit;2024-03-01 11:32:27;thanks for the response. sounds like an outoftouch ivory tower architect indeed. i understand your frustration. i had kind of the same experience but from the opposite end where i was the architect and the engineers wanted microservices and it drove me crazy you can snoop in my reddit history for my rexperienceddevs post!. i held the ultimate hard power in my case though. i actually did end up just replacing their design for that service as part of other work took me about a day since the service was so trivial. in your case youre stuck. make sure youre professional but unambiguous about your reservations with the design to the managers. then grin and bear it and let it fail on its own. the architect will spend political capital pushing this and eventually he will run out of it when either the project fails or it succeeds in demoralizing the team enough that everyone leaves. apply to other jobs preferably ones where specialized ivory tower architects arent a thing. the good news is that the current fashion is increasingly to hate on microservices so i dont think you have to put up with this for too much longer in any case. hang in there!;0
ksutu5i;Reddit;2024-03-01 15:37:19;it's pretty rough when you don't agree on the premises. like if he thinks that microservices simplify organization for instance. i tend to think the tradeoff is more complicated organization but more isolated code. you can't have a sound discussion about how to simplify things bc you don't agree on the premise. at my company we had an argument about server less with the cto. for him it was to be our tech strategy moving forward. it would simplify a lot. he got a lot of pushback from infra. he kept forcing the issue until finally after a lot of difficulties one of the infra guys had the bright idea to schedule a meeting w aws and make sure our cto was there. 🍿 they asked how to do what the cto wanted with server less and aws said oh don't do that. somewhere it seems like infras opinion wasn't respected so they called to a higher power. for me in your situation i think i would start working on the solution with your architect. to do thing x we'll have to split out thing x. but i'm not sure that's the correct domain. since it's going to be a pain in the ass to redraw the boundaries if i'm wrong i'll give it an isolated place in the monolith before i commit. if that section grows and remains relatively isolated i'll make it a service. if i never touch it again then we won't. a microservices is an investment and i'm not going to make an unnecessary one.;0
ksttc0m;Reddit;2024-03-01 10:00:24;this is the most bat shit insane justification for adding complexity. the analogy which comes to mind is like saying sometimes my legs take me up the wrong stairs. so now i'm just going to shoot myself is both legs. now that i'm in a wheelchair i don't have to worry about taking the stairs anymore. all of this is because developers don't have the discipline or time to craft an application architecture within a single code base. if people can't get that right how are they supposed to be a distributed microservice architecture right?;0
kstiy4s;Reddit;2024-03-01 07:58:25;it takes a lot more effort to make the right changes to a microservicebased application but that's acceptable because in theory it takes even more effort to make the wrong changes to it. this is the part where you're wrong. this might be true if the right changes always existed squarely within 1 of the microservices you've set up. but that's not always how it goes. failure case 1 is when the right changes span multiple microservices. failure case 2 is when the right changes involve redrawing the boundaries between your microservices which when the whole philosophy of microservices depends on those lines being drawn correctly happens fairly often. in case 1 it can go like as you've admitted doing it the right way across multiple services takes say 8 weeks. but your team doesn't have 8 weeks they have 6 weeks. so the engineer gets pressured into building it a hackier way across multiple services in 6 weeks. now of course this exact same thing can happen with a monolith. but the difference is that in the microservices world it takes more time and effort to go back and fix this because of the service boundaries. with a monolith a refactor to fix this could be relatively simple but with microservices it gets way more complicated. in case 2 the right changes involve an inevitably lengthy design discussion with the team to justify redrawing the service boundaries because of the new requirements. then when that's finally agreed upon you have to actually go change the service boundariesresponsibilities and only then can you get started actually adding the new code for your new requirements. you'll spend so long bikeshedding about where the lines should be drawn it will dwarf any other developer efficiencies microservices could possibly bring. worst of all in a team like this everyone's favorite tool to throw at problems is hmm should we separate these things into even smaller services? because microservices are the solution to all your design problems amiright? so you'll end up with even more lines to draw properly which means even more lines to redraw in the future and you'll not so slowly asphyxiate. i believe microservices fail in industry for the same way functional programming fails in industry. they're both the best approach if you want to build your systems perfectly. but the problem is that taking your perfect system and receiving a change to requirements and trying to move to the perfect system for those reqs can be hugely costly. so you end up cutting some corners and microservicesfp are not beautiful once corners start to get cut. and inb4 well just don't cut corners! cutting corners is a regrettable reality of building software in a competitive free market where if you're too slow someone else will eat your lunch. it will never go away. nonfp languages and monoliths though give you the best shot at balancing speed and quality.;0
kssq6at;Reddit;2024-03-01 03:57:32;this is the most bizarre way to do software development let's take an activity that's already complex and burn the ships so complexity and solutions are forced upon everyone. sorry imho microservices are a bit of a bs solution that cloud providers pushed to sell.more product. amazing how how hi scaling apps ran before all this deconstruction of software existed.. the rule shoud be software development and infrastructure should be crafted as simple as possible to solve a given problem ultimately the users dont care how it's made just that is works for them..kiss is the key that's the real killer app..;0
ksrljgu;Reddit;2024-02-29 23:38:25;this. what this project is doing is not real microservices. way too much coupling between services. there's simply no way to move a service to a separate team well you could force it but then velocity will be near 0. basically it's your good old monolith but with an added layer of network calls and queues.;0
kss03qw;Reddit;2024-03-01 01:07:58;we split a system into microservice. it's all cool for the guy who makes the diagrams.. the code is 50 redundant everywhere data definitions too with rest calls traversing everything everywhere all at once.. i never thought i'd miss monolithic codebase but i did.;0
ksrtbl7;Reddit;2024-03-01 00:25:05;i asked him if the complicated solution is really the only way because it's going to be alot of work. any alternatives i proposed were rejected by him. it's really hard to have a meaningful discussion with him. if i ask why they are not good i get some generic answer like 'with microservices this is the way' but never why that is the case. in fact nobody in the team knows why we need to do it this way which is the main cause of frustration and low motivation of my team. i feel like he's just using his authority as an architect to force his decisions on us.;0
kst4hxp;Reddit;2024-03-01 05:42:49;you are right scaling is a good example. not everything needs to be at the same scale. also some resilience can be gained in that failure of one system doesn't cause the whole system to fail. but as the beginning of this thread mentioned. you need to figure out your bounded contexts and domain boudaries toi get the benefits. and be willing to be wrong in either direction. i.e. be willing to separate later or combine later. some pithy sayings with respect to microservices... the only thing worse than a monolith is a distributed monolith. i.e. tightly coupled microservices are worse than a trightly coupled monolith. microservice is a label not a description. i.e. size of the service isn't what makes something a microservice. microservice responsibly. make sure it really makes sense. be willing to have maybe 3 micro services. that may contain multiple related domainscontexts and once you can handle 3 services effectively then you can split them when it makes sense.;0
kstnl8q;Reddit;2024-03-01 08:50:30;that's true but only really starts to matter at scales this app it's a internal tool will never reach. monoliths can still be scaled but ofcourse you scale everything at the same time. is that bad? that depends. what i can guarantee you though is that monoliths out of the box perform way better due to no time being spend on network overhead between services. just arbitrarily splitting up a monolith into microservices will decrease your performance and give you zero scaling benefits.;0
kstcph2;Reddit;2024-03-01 06:54:41;you are mixing up two concepts though. properly decoupled code can yield multiple processes also without microservices. process is actually a local thing. having it as service although a bit overloaded term usually means that it is made available on socket or higher abstraction layer. no matter which codebase you have you should think about structuring it into subprojects and be aware of their dependencies to one another. if done properly the monolith can be exposed as multiple processes services or whatever without much trouble. its true though that this rarely happens in practice;0
ksx1emi;Reddit;2024-03-01 23:11:14;i disagree with lumping in functional programming with microservices. i think fp vs other approaches is mostly a social phenomenon people prefer what they're accustomed to and more developers are accustomed to oo style than fp. personally i'm in the minority that's more accustomed to working in functional style and when reading supposedly wellwritten java or c my reaction is usually how could anyone possibly prefer this overengineered pile of complexity over a clean and straightforward functional approach? i figure someone who's spent 10 years writing lineofbusiness .net applications probably has the same reaction to reading wellwritten code in functional style.;0
kstcbxr;Reddit;2024-03-01 06:51:08;kiss and missing abstraction layers always fight each other no principle is always the right choice. or rather it has zero actual impact on how to write code because what does it actually say? microservices can definitely have their place if you have parts of your software system that should scale independently. scale this service up to tens or hundreds of millions of requests? really easy to do with services micro or not is buzzwords to me though. but for many software systems they are definitely the wrong choice. jumping on the hype train without considering the project fit is junior architects failure;0
kss53g9;Reddit;2024-03-01 01:39:42;this is so typical you dont even know. i have seen 6 different companies trying to microsplit a monolith and only one of them ended up in a better spot. when you have a messy monolith what makes you think that the same team that implemented the monolith will do a good job in microservices? my personal rules for considering microservices httpsmartinfowler.comblikimicroserviceprerequisites.htmlhttpsmartinfowler.comblikimicroserviceprerequisites.html enthusiastic support of the c level management. above average team of developers no code monkeys strong devops skills. is there a dedicated team that will own the microservice from dev to ops? will there be enough work for them? context switching and team reorganizations are killing productivity.;0
kss87wj;Reddit;2024-03-01 01:59:31;i'm also highly suspicious of microservices between teams to be honest. i'd say it can still be a bad idea any time you're looking at a cohesive product especially one where requirements aren't crispy clear and you can't safely say you'll avoid crosscutting concerns. most products are highlycoupled internally except in rare cases when people spend time building highlyreusable components usually the kind that they also opensource or reuse internally across multiple distinct products. and agility is at odds with such splitting too. this is also complicated by the fact that many orgs split and isolate teams excessively to particular subprojects or mere features. they can easily avoid the intrateam red flag by splitting even further. the mistake here isn't splitting for management reasons which is fair but for devtechnical reasons and adding artificial boundaries beyond management needs. there was a time long ago when the linux kernel tried not microservices or splitting repos but merely keeping internal apis stable and evolving them separately in a dev branch see 2.4 vs 2.5. it was pretty bad and a huge waste of resources then they settled upon avoiding any longterm branching. and i think you can't meaningfully do microservices without some sort of stability because then you lose most of the purported benefits like meaningful gradual rollouts or run into other issues.;0
ksu9a0c;Reddit;2024-03-01 13:04:17;microservices can definitely have their place if you have parts of your software system that should scale independently. for the majority of systems which are doing crud on some database the scaling independently argument is a red herring a distraction. for example if i have an monolithic app that handles logins and manages shopping carts it doesn't matter if it scales horizontally to handle more cart traffic while the login parts of the app are relatively seldom used. having that extra login code in the app even if rarely used doesn't impact the scaling. i.e. you don't need separate login and cart services to get good scaling behaviour. the login code might need its own db connection but generally most server applications don't use many resources when the code is loaded and it is idle.;0
