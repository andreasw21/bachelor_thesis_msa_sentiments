ID;Source;Creation Date;Content;Sentiment
co6u7y;Reddit;2019-08-09;Title:Why our team cancelled our move to microservices, Content: https://medium.com/@steven.lemon182/why-our-team-cancelled-our-move-to-microservices-8fd87898d952;0

ewgjyzm;Reddit;2019-08-09 22:46:03;just want to repeat what udemius9 said... we went down the route of microservices due to a lot of separations of concern... it was a nightmare. but there is a middleground solution we found. we kept code in separate modules still have separation of concern but instead of building up 20 microservices they were consolidated in to one during the start up. best of both worlds imho.;0
ewhjy6k;Reddit;2019-08-10 06:15:10;we switched to microservices but it was at huge cost to our company. it took us 2 years to complete the switch over and we have gained easier deployments... awesome... but in that time we could have taken on other projects and probably earned millions of dollars. we might end up saving overall money if we develop for our application for another 15 years.;0
ewhltvc;Reddit;2019-08-10 06:46:13;microservice has become a bastardized word like agile. when they're done well they are superior to a monolith. when they're done poorly they are far worse. i like having an isolated service that can be worked on and tested in isolation. most teams don't have the discipline to keep stuff from bleeding between services and you end up with a monolith that now takes 5 services running to debug an issue.;0
ewhm8ps;Reddit;2019-08-10 06:53:17;our microservices include a postgres database a python api in lambdas data presentation layer ec2 with linux static file server s3 and there are third party services like cognito auth apigateway routing is this not a series of micro services? we are a small team. we use serverless framework and aws cli to deploy and its very powerful.;0
ewi4lhu;Reddit;2019-08-10 13:55:25;why microservices are chosen team a finally i get the freedom to do things the right way i just need to adhere to the interface. team b we just conform to the interface and internally we will apply best practices as we should have from the start. why microservices are unchosen team a are those guys at team b idiots or something ? this is not the expected behavior when i integrate with their service !!! team b why is is taking so long to integrate with team a's service ??? nothing's working as it should we're behind schedule and we're getting bugs from how they implemented things. what the user thinks user man after this update the loading spinners are like 5 times as long wtf ??? what the user never ever thinks user i am happy to accept a lot more latency and bugs if it means that some devs somewhere are freed from the pain of keeping things consistent and are able to to show that they are the true 10x rockstars developers they just needed to be given more independence.;0
ewhgtjx;Reddit;2019-08-10 05:27:08;honestly im starting to believe that microservices seem like a great idea when your team starts to get really big. we have about 30 devs working on 6 different projects. building small simple and reusable services is working well. maybe all you haters work on a small team that just dont need this.;0
ewhagiu;Reddit;2019-08-10 03:59:13;my team of 5 is up to 15 small apis with focused purposes and it's been very easy to maintain. the trick is to write clean and well tested modules for common functionality and build services like puzzles. when we get a request for new functionality we review our current stack and decide if it can be handled with what we have or if a new service is required. i would say it's also very easy to just add more functionality to an existing service because they are so small and modularized. another key to our success has been using a message queuing tool to transport data between the core of our services. i cannot imagine rolling all of our pieces into one giant application now that i've experienced the success of microservices. that being said i would not recommend splitting an already successful application into smaller pieces unless problems arose with scalability. different design patterns exist for different purposes!;0
ewh3cgt;Reddit;2019-08-10 02:27:00;im in the midst of building out a new backend for a new app. when i started i had fallen to the notion that microservices meant scalability. i started wasting massive amounts of time building microservices. got about 4 services in and realized i could simplify 100s if lines of code to 10s. and i realized it would be a lot easier to scale a monolith. rebuild. microservices are a technical solution for a non technical problem.;0
ewh5k82;Reddit;2019-08-10 02:54:07;anyone who complains about microservices has clearly not been on a project where it was implemented correctly. microservices are great;0
ewgl643;Reddit;2019-08-09 22:59:00;microservices are just soa in cloud. change my mind.;0
ewi7mot;Reddit;2019-08-10 14:51:23;my favorite part of microservices is where i get to rewrite all the debugging logging interoperability security and error handling that my core language and toolset has. i love writing a huge generic library to handle every type of 400 and 500 and parse error responses where catch would have sufficied in a simple library call;0
ewgpo6n;Reddit;2019-08-09 23:50:01;why do we need services so small that we call them microservice. can't we use services or nothing? seems like a lot of unnecessary work i'm being a little facetious;0
ewi3zls;Reddit;2019-08-10 13:43:07;i stopped reading at this line microservices had been sold to us as the ideal architectural for perhaps a year now. there is no magic bullet. different situations call for different architecture decisions. for a great deal of situations a monolith fits just fine. the pros and cons are prettty well discussed in the o'rielly book building microservices by sam bates;0
ewgjo86;Reddit;2019-08-09 22:42:51;as a general rule i think a microservice makes sense when the service is general enough to benefit many separate users. a databaseserver for example. the same database can help everybody in your organization so don't build your own rdbms. id nobody else but some parts of your application needs a given functionality it would seem to make sense to make it part of your application. the main benefit of a microservice is scalability which means you can run it on multiple servers if needed. but if only your application needs it then you can scale by running your application on multiple servers. in other words it would seem to often make sense to make the whole application into a single microservice not divide it into several of them.;0
ewhpo2a;Reddit;2019-08-10 07:56:59;i cofounded a startup that's making a monolith from modules and is ready for a number of microservices splits from the outset. the decision for whether we split or not is currently based around build times. the backend build cashed filled is under 3 mins. the build is compile exec unit an service integration tests. we do too many of the the latter so can shave time out of the build by moving some service tests to pure unit tests and educating on how to do that without dropping over all coverage. the build like most is depthfirst recursive. we could move to bazel and maybe shave 20 out of the build in the everything scenario but get better benefits in the reduction of elapsed times based on a more finegrained target. in the future would decide to go to microservices if we choose another language for a new backend service. right now all the wouldbe services we've made at the same language and add little individually to the size of the image we're horizontally deploying. x200b i think build times in various problem statements is common but often unstated for reasons for going to microservices.;0
ewgf1t6;Reddit;2019-08-09 21:53:07;wow 12. my team is 3 developers and someone thought it would be good idea to do microservices...;0
ewhq218;Reddit;2019-08-10 08:04:37;when do i need it is the clincher. you are right scaling a monolithtraditional app monolith is overloaded to the point of being meaningless today can go very far. scaling a web fronted is not rocket science a load balancer with sticky sessions and a bunch of servers behind cheapo! similarly any web services if there's a separate business layer can receive that treatment. databases also go much further if people tend them right and they do not experience tells me and so do queuing systems. and so on. one needs unbelievable scale to actually reap the benefits of microservices. typically an established application will have a smallish set of functionalities that are much more expensive than the rest. these are candidates to be taken out on the side developed and scaled there. going fullon now we will rewrite with microservices is typically a fool's errand not much different from a much more traditional let's rewrite.;0
ewgqbuw;Reddit;2019-08-09 23:57:40;or just partition the code into modules. you dont need microservices to break up a large code base. linux has 20m lines of code worked on by 1k developers across the globe and it has zero microservices.;0
ewh2a4v;Reddit;2019-08-10 02:14:23;what exactly is a microservice or monolith?;0
ewhz60u;Reddit;2019-08-10 11:46:06;this is exactly the thinking that my company needs to adopt. they don't understand that when you only have a dev team of 10 and only work on abandonware during a project once every 20 years microservices hurt more than they help.;0
ewiivx3;Reddit;2019-08-10 17:16:45;a lot of the stuff in this article is just lack of understanding for how to build a microservice architecture. but really the whole thing could be summed up with just the 12 dev line. at that scale your tooling is almost certainly not good enough to make microservices practical and the code churn not high enough for it to be all that beneficial;0
ewgpyrh;Reddit;2019-08-09 23:53:26;implementing microservices is just admitting you can't beat conway's law. this is to say if everyone on your team is already talking and communicating well you don't need microservices. if every human is already chatting tersely to keep randomization down you're already doing microservices at an organizational level so why not just do it in software too.;0
ewgm8ir;Reddit;2019-08-09 23:11:02;ultimately the problem that most people actually want to solve with microservices is about clear interface boundaries. you can clearly define interface boundaries through judicious use of functions modules classes libraries etc. it's about using the right abstraction level for separation. most teams will never really need a dozen different services but they may need several dozen moduleslibrarie.;0
ewh229z;Reddit;2019-08-10 02:11:47;don't do it because of separation of concerns do it because your eng org is growing so big that the only way to push updates quickly is to break apart the code into smaller units of deployment microservicesotherwise everyone will have a dependency on a single ops team which can't scale with the rest of the organization. individual teams own everything for their services from build tooling through deployment and operation.;0
ewh9t68;Reddit;2019-08-10 03:50:31;...we kept code in separate modules still have separation of concern but instead of building up 20 microservices they were consolidated in to one during the start up. isn't that how regular coding is done? where you have modules and subprojects that are jarred individually but distributed in a larger single jar?;0
ewhheaz;Reddit;2019-08-10 05:35:39;i mean wtf were they thinking? if you refer to your engineering department as a team you are way way to small for microservices.;0
ewle6td;Reddit;2019-08-11 12:36:58;when they're done well they are superior to a monolith. only in some cases. in other cases monolith is better. it depends on the size of the project the organization creating and maintaining the software and performance characteristics of the system. microservice architecture is not intrinsically better. it's a tool that applies in some cases. developers have the bad habit of wanting to do things like the big boys do it in high profile companies to play with more exotic or new approaches and technologies or to collect keywords to their resume. all those are selfish motives and often lead to project failure.;0
ewhx0u8;Reddit;2019-08-10 10:48:15;both microservice and monolith applications couldwould use all the rest of the pieces you described. in this context 'services' is usually specifically referring to discrete backend components of which in your example would only be the lambda functions. microservices are the opposite of a monolithic application aka having all your application in one program.;0
ewzwbwv;Reddit;2019-08-15 22:40:09;you are confusing services with microservices. microservices by definition are in the area of 1000 loc.;0
ewhldpd;Reddit;2019-08-10 06:38:36;the people who feel burned by microservices are people who actually bought into the fad without understanding the concept behind it. if you had a vague notion that microservices would magically cause your software to scale more gracefully especially if you didn't have a solid idea of what scaling means then you were sort of bound to be disappointed in your results.;0
ewi8ptm;Reddit;2019-08-10 15:08:58;my team of about 12 people own around 50 microservices. at any release we're only updating at max 5 of them. any business functionality that is not related to core domain but uses our data is made a separate microservice. most of them haven't seen any update in over a year. i'm not sure if this is a good solution since it takes massive space but we don't encounter a lot of problems due to architecture.;0
ewh2yr9;Reddit;2019-08-10 02:22:26;eh netflix and google are the two companies i'd point to as important in the pioneering of microservices.;0
ewpgfzf;Reddit;2019-08-12 22:10:46;you don't. service architecture was a thing for years. however certain big companies decided that having hundreds of developers per service doesn't work so they went into microservices.;0
ewgeqhf;Reddit;2019-08-09 21:49:51;more like our project and team were too small to do microservices.;0
ewgllaj;Reddit;2019-08-09 23:03:42;anytime there is a discussion about microservices my first question is to define microservice. for some people they can be as small as a service per function and others as large as all of authentication. how they are defined makes a huge difference in effort and outcomes. we are a small team and do services. most of which are closer to authentication size but some are lambda functions. but i do agree with the gp that there is no reason to split until you need to. a service boundary should emerge while building the software. i liken it to how an amoeba grows and then splits at some point.;0
ewhma70;Reddit;2019-08-10 06:53:57;microservices are simply tools of isolating units of code across the processmachine boundary. it can be brought up because of a large team but... not necessarily. specific platform deployment reliability and scalability goals are just as valid. i introduce services in projects i manage by myself at times and it is the right choice. a most trivial example of a service split we do almost all the time is web server vs. web browser. it is of course introducing a lot of complexity so one better know what they're doing before they jump into it.;0
ewi6j6x;Reddit;2019-08-10 14:32:30;i had a boss force me to do microservices as the sole developer of a project. it's good not to work there anymore.;0
ewlyxxi;Reddit;2019-08-11 18:01:27;what amazes me is more how many people try to jump from total monolith to a gazillion of services. this approach is an indication that they don't understand the point of microservices. if the goal is to have a separate team and iterate each service separately then it should be possible to create one microservice along the monolith.;0
ewshx1m;Reddit;2019-08-13 22:25:23;well without going into microservice you can still endup with a fat strack of tools. frontend stack vuerazeremberreact etc running on iis or docker talking to a web service or 2 or 3 runing on a container with a database a message queue handler a service that threath what have been queued in the queue manager from one of the web services a authentication gateway manager a reporting service or something that does that. so potentially if you have a need for somewhat ok speed and supporting legacy slow as hell application you endup with a 1215 application architecture. but as you say you should do that to tackle a particular problem.;0
ewh18fb;Reddit;2019-08-10 02:01:51;linux isn't a service of course there wouldn't be microservices. microservices aren't about modularity. note that this isn't microservice advocacymicroservices are wrong for small teams but not because of the linux kernel.;0
ewhfm00;Reddit;2019-08-10 05:09:33;well you are pretty close to being right imo. however microservices are just a kind of module. decouple things that dont require a dependency on each other. no need for them to cross polenate. the question is never how small to go or how big to go. it's what are the logical modules to my system. then design around that. you should just write libraries and expose some features of the library via a service front end as needed. if your service is one method so be it. if its 20 whatever. as long as the division of concerns makes sense.;0
ewgprcg;Reddit;2019-08-09 23:51:02;you can have microservices with a monorepo. you lose some of the loose coupling but it's not a blocker.;0
ewhqfvg;Reddit;2019-08-10 08:12:19;ibm doesn't understand a differences between a code repository software architecture and deployment considerations. one can have several repositories and build them into say one resulting executable. or vice versa. one can have a bunch of microservices inside one repository. and so on.;0
ewpcifh;Reddit;2019-08-12 21:30:25;communication doesn't solve everything. say we have two teams working on the same application and one team says we want to upgrade the database version so our code gains 10x speed improvement and the other team says but we have that legacy code that won't work with new database version and we're not going to rewrite it because it will be retired next year.. microservices solve problems like that each team moving at their own pace towards their own goal and just agreeing on interfaces. of course you need a good scale to be able to run something as a separate team with separate infrastructure.;0
ewi448u;Reddit;2019-08-10 13:45:48;i've seen this go so far where teams actually think this is microservices. i've actually seen people think a api oriented design to prepare for let's say a spa is microservices. lol.;0
ewglcn4;Reddit;2019-08-09 23:01:01;let me take a stab at explaining this. imagine you have a specific set of standalone functionality that can feasibly be reused by other teams. user management for example. you don't want to develop it as part of your application so you split it out and want other teams to be able to use it. at this point you could just build out a library and toss it in your company's package manager if you have one. at this point that is a solution. now suppose the other teams are located across the world and you've literally never talked to any of them ever. a library in a package manager is still possible but you can start to see the appeal of building your own website that other teams can call as needed. this way you don't have to answer any questions on implementation beyond here's the api spec you don't have to worry about your library causing strange and unusual things to happen in a garbagefire codebase that wants to use it and you're in charge of your own infrastructure and everything about it. now suppose that you're user management piece is written in c the mobile app team uses java and the website team uses php. and you've still never talked to any of them. now a library in a package manager isn't gonna cut it and the fact that an http call is languageandtoolingagnostic starts to really come in handy. that's why microservices are a thing. but in order to reasonably justify them you basically need to have multiple dev teams each working in a silo have at least one silo developing software another team depends on and have the infrastructure and devops to handle the microservices.;0
ewhia4q;Reddit;2019-08-10 05:49:02;lots of people will say microservices is a code architecture...its total dreck. you should already be organizing your code right? microservices is about breaking your service up such that pieces can be deployed and scaled separately. you can also start working on resource independence ie treating each separate service as its own app with its own data stores etc. there's a lot of benefits to this level of deep decoupling but it takes a lot of work. you're effectively writing several full services. if you're a desktop programmer a possible analog would be breaking up an app into several process and using ipc or maybe the impetus behind erlang and its message passing approach. a crash doesn't bring the whole system down and pieces can be upgraded separately.;0
ewh0q2p;Reddit;2019-08-10 01:55:52;microservices are a unique pattern in the server world. specifically if you are designing a system where server loads on specific submodules of the overall system can be very high it's useful to abstract throughput requirements and hardwaresoftware provisioning to meet demand behind an api contract and leave it to the implementer how the scaling is achieved. microservices are a more aggressive approach to this where you move smaller api's which might otherwise be modules into their own services. if you don't do web stuff this issue is much less likely to be relevant.;0
ewgg717;Reddit;2019-08-09 22:05:16;you're getting downvoted but having done some reading on microservices i have to say that they do feel like one of the better solution to large systems. not just from a dev perspective but also from a management one and an organizational one. creating small gelled teams to own their service and feature set feels like it could have some nice productivity advantages. the infrastructure part of that equation can be annoying in my opinion. but i do think microservices offer a unique perspective on the problem of creeping software complexity.;0
ewidkn0;Reddit;2019-08-10 16:16:51;honestly scaling is harder my opinion on a single large spp. my team is deployed on kubernetes i know the team in the article was unable to use kubernetes and utilize pod configuration for scaling. some services are used much more heavily than others and we have prepared accordingly by replicating them as needed. also fifteen modules in single application would be bigger adding to the overall complexity. our common code is placed into librariespackages and stored in a private repository for easy reuse meaning we can easily improve things across all services or add shared functionality. there is nothing wrong with having one large 15 module application. however i believe it takes more work to avoid stepping on team members toes as well as adds complexity when testing. the article mentions that they had technological constraints though which often prevent companies from using microservices properly. there is no single answer to doing what we all do but i am sold on using microservices.;0
ewhztee;Reddit;2019-08-10 12:03:30;a few years back we mocked mongodb after convincing ourselves it was a magical bullet to solve all the world's problems. meanwhile if you actually understood what to use it for it worked brilliantly. same shit with microservices. in anycase it's not like microservices is completely new. old ideas done in a different way.;0
ewijpxe;Reddit;2019-08-10 17:25:25;transactions are often a crutch people use to paper over weak understanding of failure modes. almost all of aws is built completely transaction free. i'd also say txn across microservices is an antipattern in general but i think that is too broad of a statement to be always true.;0
ewh0g42;Reddit;2019-08-10 01:52:35;except that's not true you need some code for validating tokens in each service or whatever. sd might be as simple as dns lookups but that's still code running in each service. it's all a spectrum the current fomulation of microservices is further down an extreme but it's not really different in kind.;0
ewh8vel;Reddit;2019-08-10 03:37:51;and best of luck having a rational engineering conversation about it. the notion of microservices is so institutionalized as good engineering people don't even consider alternative approaches;0
ewh7rax;Reddit;2019-08-10 03:23:06;one service per function kill me now i do not want this. we develop in microservices we put for instance everything to do with user communications in one microservice well that's actually a class library mostly now anything to do with our software distribution system is in another microservice. anything for our internal db is in another. it works well but debugging kind of stinks as we have two dozen launch configs in vscode depending on what you need to spin up for testing. we are working on a unified solution file where our big honking asp.net 4.6 app can live in the same solution as our microservices so you can hit debug and go. i do love that it clearly demarks the limit of the scope of changes for a pull request. if something changes things in more than one microservice beyond the most trivial of change fail. if it hits the mvc and a microservice too fail. it's at least beneficial for that;0
ewhu39n;Reddit;2019-08-10 09:34:21;if you want to scale features differently across different instance types i honestly haven't seen a realworld situation where this would help much. if you're cpu or io blocked it doesn't help at all. for memory say your monolith takes 50mb to run 1 thread. switching to a microservice that takes 10mb to run 1 thread would let you scale up to 5x harder in memorybottlenecked apps but 1. splitting a 10 endpoint service into a bunch of 1endpoint services doesn't actually scale linearly. your 10endpoint service will only use a bit more memory than the 1endpoint ones meaning you could actually waste more memory when you switch to microservices 2. i haven't seen rambottlenecked apps in threadsafe projects. generally just adding more threads is so ramcheap that the bottleneck always becomes iocpu if you want to redeploy part of your backend without a taking everything down it can make sense. sure although monoliths can do that too. bluegreen deploys feature flags meh and good devops practices should mean deploying a monolith is actually simpler. if your team is 3 you probably don't even have to think about scaling at all though agreed. and i don't mean to shit on microservices just the benefits are so overexaggerated that i like to challenge a discussion on it when possible. my company is moving to them now and it should have happened years ago 100 devs and the worst code base i've ever seen my summary of microservices marginal performance scaling improvements and easy to accidentally make things worse huge awesome organizational scaling improvements huge upfront cost to rewritemove away from an existing monolith;0
f7xqt1x;Reddit;2019-11-18 10:47:54;not necessary microservices are new toy and it's always fun to play with new toys.;0
ewhezsu;Reddit;2019-08-10 05:00:45;if you look at the programs they do one thing and how you can pipe aggregate them together this is how i would compare them to microservices.;0
ewgzeia;Reddit;2019-08-10 01:40:19;i don't think you lose anything. microservices is architecture how you store your code is irrelevant.;0
ewgllk7;Reddit;2019-08-09 23:03:47;you're hitting some of the benefits but that isnt why microservices started out as a useful thing. the main benefit at large companies was independently scaling services. why scale to ten replicas of my monolith if i just need to split out service foo that is taking out all the traffic?;0
ewh5ygl;Reddit;2019-08-10 02:59:19;this just sounds like an api to me? how does a microservice really differ? i feel like we do what you described where i work but we just call them apis.;0
ewgxacx;Reddit;2019-08-10 01:15:51;tbh i end up designing a lot of things like this because it just ends up following module lines anyway. i wasn't even aware of the term microservice. to me it all feels a lot like unix style small tools with a strict purpose. i mean i could have done a lot of my stuff as a giant nuget library but compliance and auditing is a huge consideration so establishing clear cut but narrow interfaces where the audit chain needs to happen and building smaller tools to tie into it works really well. that is for a team with 3 people in it.;0
ewgyj5a;Reddit;2019-08-10 01:30:16;multiple repos ! microservices. you can have microservices in monorepo.;0
ewgyxll;Reddit;2019-08-10 01:34:59;monorepo does not mean monolith. you can have microservices in monorepo.;0
ewk49j8;Reddit;2019-08-11 00:31:45;but microservices don't magically scale better than monoliths given the same number of computes. how specifically did you determine that breaking up your monolith would scale better with more computes relative to the monolith with more computes?;0
ewivruz;Reddit;2019-08-10 19:18:45;can you provide an example of how a monolith would take more work to avoid stepping on team member toes? regarding testing heres my unpopular but based on talking to actual quality engineers opinion testing is a red herring. people talk about how testing will magically be simpler with microservices because youll only need to test within the boundaries of the services. this is smoke and mirrors the really critical tests are the ones testing integration across service boundaries. are services passing the right headers cookies etc. to each other? are services a and b using compatible versions of a critical schema? does an entire transaction flow work endtoend? does a critical path time out because it hits network latency across service calls? qas would not want to signoff on releases without testing these kinds of things. developers like to pretend this isnt the case but were just fooling ourselves;0
ewu44qd;Reddit;2019-08-14 08:20:15;i keep hearing this idea that it's about the size of the team. it's not. it's about the architecture of your application. if you can't get your head around that you're not qualified to judge microservices as an idea. microservices increase the complexity along some axis and along a different axis they simplify it. some projects don't need a lot of architecture thought some do.;0
ewpa8xt;Reddit;2019-08-12 21:07:02;haven't seen that one yet but i did see microservice architecture that used several api requests and a lot of coding to do something that could've been a single sql query and didn't provide any benefits.;0
ewhe2yx;Reddit;2019-08-10 04:48:00;said someone who doesn't understand microservices and faas;0
ewiw6vm;Reddit;2019-08-10 19:21:42;erlang uses something called the actor model. you structure your program code so that each part that can be separated into its own kind of systemprocess is split into it's own actor primitive which i believe erlang calls processes. these actors then communicate exclusively via message passing no state is shared. this allows to run the actors concurrently and in parallel and means that the actor model can scale from threadlocal to multidatacenter networks. for me this is also the essence of microservices. but imho microservices is a concept of network engineering while the actor model or csp or similiar views the same problems from a software engineering perspective.;0
ewhw7dy;Reddit;2019-08-10 10:26:44;hi i might have a realworld scenario. we are team of 4 maintainig a monolith 1 microservices. our app does some heavyweight image processing some ai lot of prepost processing. although from the feature point of view the image processing is 5 of the features users pay for it uses 99 of cpu and memory we are paying for. the monolith runs in a standard iis and does everything except the image processing which is done in kubernetes some scaling. the image processing needs a lot of cpu and ram but the main bottleneck is memory throughput. we can add faster machine to have more cores or bigger memory but it does not help a lot.;0
ewhw5hz;Reddit;2019-08-10 10:25:24;a real world example is you have some cpu ram or even gpu intensive feature say a photo processing feature that you want to be responsive but less than 5 of your calls are to this feature. do you want to spend gpu instance hours for 95 of your calls that don't need it? an io based example would be iops. you want fast local disks for some reason. you might also be running out of file handles or ports but odds are you'll never run into these. your example is indeed nonsensical and i wouldn't suggest it. deploying a monolith is simpler but again you have to deploy it all. i guess in the case of the 3 man team you don't care about any organization friction this can cause. that said once you get a pattern in place deploying microservices is routine too.;0
ewhffdb;Reddit;2019-08-10 05:06:53;microservices aren't about communication between code modules it's about the division of responsibilities in an engineering organization. a microservice is a team writing building deploying and operating their own code. you move from a monolith to a microservice architecture because your engineering organization has grown so large that the effort to coordinate releases has become a major pain point. the point of microservices is that now each team manages its own releases. that's the theory anyway. you're free to disagree with it but it's important to at least understand what you're disagreeing with.;0
ewhsehf;Reddit;2019-08-10 08:54:34;say you send emails for different stuff reset password. instead of adding it to your main web application you create a separate project which basically provides a rest api. this runs on its own container its own web server etc. this is you email microservice.;0
ewhr8qx;Reddit;2019-08-10 08:29:07;the app is some application or information machine that has inputs and outputs. for example at the enterprise level we use microservices with kubernetes where different url paths map to different component services such as user authentication content management commenting multimedia specific digital products in nodevuejs etc...;0
ewh85hx;Reddit;2019-08-10 03:28:17;i'm not even sure this is the whole justificationthe reason i hear the most cited is that it allows teams in a large organization to deploy their own services instead of having to coordinate a single large deployment. that coordination doesn't scale well with the number of teams so microservices are about removing that coordination requirement. that they can scale independently is a nice benefit but i don't think it's the primary benefit. i'm happy to be corrected if i'm mistaken.;0
ewhqd64;Reddit;2019-08-10 08:10:50;microservices are apis too only difference is that the api boundary is a network layer like http instead of a function call.;0
ewgh1bm;Reddit;2019-08-09 22:14:13;i agree. i do think that claiming it's the most overrated pattern in web development history is a bit hyperbolic. i get that some people are skeptical but if the goal of good software is highly decoupled and cohesive code that microservices are essentially born from that idea which is a good idea.;0
ewh56u6;Reddit;2019-08-10 02:49:20;the key distinction with a microservice design is that you don't speak in the same binary. binary separation isn't happening or enforced at these companies.;0
ewhown7;Reddit;2019-08-10 07:41:59;i have a coworker that is incredibly proud of a levenshteinasaservice that they implemented. the coworker did not implement the distance algorithm though. they made a call to a lib function in the deployed python lambda and tried to get everyone to use it in our microservices architecture.;0
ewhf2kt;Reddit;2019-08-10 05:01:50;my comment wasn't a criticism of microservices. the idea of taking it to an extreme amused me. lighten up amigo.;0
ewhe089;Reddit;2019-08-10 04:46:54;well define complicated? controllers may call many methods in a row to do their work but each method is really simple. for instance a user pastes in a list of computer names. we will save them in a request which can be approved by a peer or their manager. but there is business logic too. first we need to make sure computers are in the right group so we call the ad microservice to limit the computers to those in that user's scope of ous they can touch. we get back the good devices and use that to except out the bad ones. then we have to check and see if the remaining devices aren't in a lock down group for change control so our change control microservice is called to check if the devices are valid for the users chosen date. there might be one or two more microservice calls after that but they're all abstracted into repository methods anyway so it's like calling a method. except the methods called can be used by others in the company outside our tech stack because anyone can do a rest post or get. it would be easier to work in one monolithic app but there are lots of known cons with that apporhc.;0
ewj5msx;Reddit;2019-08-10 20:27:51;thanks for the discussion! i concur that's a decent example where you can take advantage of special instance types and want to maximize it. i guess i was misleading with i haven't seen a real world example. i know they exist but in the 510 projects i've worked on i didn't see a use case. these have mostly been crud or ecommerce apps though like most web devs so ymmv if you're in a different specialty. i also should change my view on deployment as you suggest. i saw other comments about how microservices help when release management becomes a pain point and 100 agree. pros and cons definitely depends on the business domain org structure and code quality.;0
ewi7l8s;Reddit;2019-08-10 14:50:42;all application servers i have worked with the last ca 10 years have supported deploys without downtime. there are advantages of have microservices but this is not one of them. if anything it is harder to deploy microservices.;0
ewi2k5o;Reddit;2019-08-10 13:11:50;mostly because we're talking about microservices here and how to get there.;0
ewhg7yu;Reddit;2019-08-10 05:18:21;i get the point of scaling your organization to work independently means more products you can ultimately sellsupport within you domain or bounded context. i see the example more clearly as microservice like way of interacting where you can create building blocks of other programs without depending on that team.;0
ewhtv6o;Reddit;2019-08-10 09:28:49;monorepos make it really hard to figure out what to build and what to deploy and when. ??? you can have subfolders in a monorepo you know. you can have build definitions that only start in a specific folder. you deploy from packages dropped in specific places. whether the code was kissing cousins in the same repo or on different accounts in different datacenters on different planets it doesn't make a difference to where your microservices are deployed and when.;0
ewgzqg1;Reddit;2019-08-10 01:44:16;think about the companies that really utilized microservices early on they are at the scale that it's almost necessary if not significantly cleaner;0
ewhl1gc;Reddit;2019-08-10 06:32:56;not trying to be patronizing here but you just haven't seen projects large enough yet. you probably will soon enough. moore's law has been dead for some time now. incremental gains in performance on a single node over time are dramatically lower than they used to be. microservices' ability to scale horizontally is a pretty important part of how enterprises are compensating.;0
ewhunzh;Reddit;2019-08-10 09:48:15;code that is only executed once every 5 minutes can still add latency to a critical piece of some other service in the same process causing some poor schlob's video to stutter all because the rebuild index web service was in the same process as the video serving. now this doesn't matter to most little 3man teams out there. netflix is really the prime case for microservices. massive scale spread all over the world with lots of different areas video serving video encoding billing ui search suggestions etc. that all need to be able to be deployed independently and any downtime in a critical service is lost money every second.;0
ewgg1yr;Reddit;2019-08-09 22:03:47;i want to see what's your proposed solution to a project that requires 1000 developers on their backend services and that doesnt involve microservices;0
ewh6alp;Reddit;2019-08-10 03:03:46;citation needed. you first assumed that they aren't doing microservices just because they have monorepo lol. you really think that out of the thousands or tens of thousands of projects they have not a single one is made out of microservices?;0
ewius5m;Reddit;2019-08-10 19:11:27;im referring to horizontal scaling. theres no effective difference from the perspective of being able to handle high load between scaling out a single monolith vs scaling out one or more microservices.;0
ewkbk0t;Reddit;2019-08-11 01:35:59;sure but you can just as well scale a distributed monolith. the few extra mb or even gb of rately used code hardly cost you extra. afaik microservices are more to do with clear boundaries between different parts of the code so that multiple teams can cleanly work together. not an expert though so please do correct me if i'm wrong.;0
ewhvtsh;Reddit;2019-08-10 10:17:01;how would you add another check. let's say the user story is to process only computers that were not restarted in last 24 hours. i would assume you extend some computerstate service to poll timesincestart from the physical machine but you also need to call this new servicemethod from your controller to filter the list. that is a change in 2 microservices. do you wait till computerservice team releases the change and then you continue on the controller or you do both changes at the same time? i am seriously interested. i have no idea what your product does and this is just a feature that came to my.mind that could be spread across multiple microservices.;0
ewhwx09;Reddit;2019-08-10 10:45:24;well i haven't worked in an app server deploy in a long time and never where they hosted interdependent services. only when they were independent web page deployments so its true i don't have experience trying to cram a microservice arch into that. and frankly when i worked with them it certainly did not feel like nothing was taken down. i'm not sure if modern app servers have bluegreen deployment type features but i guess they could. but that's not really my point. nothing is taken down ideally. if your deploy ends up eating ram or cpu it could easily impact other features.;0
ewhh1z6;Reddit;2019-08-10 05:30:36;yeah thats encapsulation. publishing a stable interface and avoiding breaking changes. microservices are the next levelthe releases are separate as well. theres a reason linux doesnt do thousands of releases per day like google or amazon.;0
ewp2zlv;Reddit;2019-08-12 19:52:19;that sounds like a microservices then.;0
ewi5zp1;Reddit;2019-08-10 14:22:34;oh i see. what i meant earlier is for scope of pull requests to keep them simple and easy to understand . so this would be two prs first the microservice and then the implementation of it. to be frank it would really be three. 1. microservice pr 2. microservice as a repository method this would include the interface and implementation 3. actual change to the controller to use the method am i certain this is the best way to go? no but it's how we've done it.;0
ewny8n5;Reddit;2019-08-12 09:51:31;yeah that's definitely a good use case! i briefly mentioned that with you don't want the image processing to slow down the web requests so same box isn't an option i guess you could specify different instance types to get pseudomicroservices and help avoid that frontofqueue blocking without rewriting the monolith code base but at that point you'd probably be better off just doing microservices lol;0
ewijixr;Reddit;2019-08-10 17:23:29;depends on what you call a project. aws is easily 1000 people and a high level service effective touches large portions of that. you could maybe say they are all services not microservices but aws is still one business unit.;0
ewgjk4s;Reddit;2019-08-09 22:41:37;monorepo doesn't imply monolith nor does it imply microservices. famously google runs a monorepo and they do have microservices.;0
ewjhz2r;Reddit;2019-08-10 21:55:37;i'm referring to horizintal scaling of both the monolith and the microservices. assuming the same small or mediumsized computes in all scenarios spinning up more computes with the monolith is just as good as spinning up more of the microservices.;0
ewj3u78;Reddit;2019-08-10 20:15:38;that doesn't even describe a team though. even in a team of 510 most people don't know lots of things that are going on or how many things work. my current team is about 12 and probably only the tech leads know a majority of 'everything' aws definitely isn't a single deployable unit nor did i ever say they were. when i ran aws confiig it was itself 9 deployable units so about 100 deployment targets 11 regions including test setups amazon retail was a single deployable unit well past 100s of devs though. s3 is like 10 teams is it 10 projects or 1? point being any sufficiently large 'project' requires compartmentalization of varying sizes units. so at least to me saying microservices are a fad is silly because small specialized services is an inevitability for a sustainable large 'project';0
ewj6i06;Reddit;2019-08-10 20:33:56;so at least to me saying microservices are a fad is silly because small specialized services is an inevitability for a sustainable large 'project' oh i never argued that. i completely agree here. i'm just arguing against a single project having a 1000 devs working on it without being pedantic about what the definition of what a project is. in my opinion if you have a single microservice with a single team working on it that's a project. if you have one codebase with 100 developers working in it that's a project. ultimately what a project is defined by is the business and funding and it's likely aws is projects within projects within projects depending on what context you're looking at it in. if i ever see a business that has many 100s of devs working on something like a single ios app single web app or a single service i would have serious questions about how the business is run because devs aren't cheap and great things have been accomplished with much less people.;0
