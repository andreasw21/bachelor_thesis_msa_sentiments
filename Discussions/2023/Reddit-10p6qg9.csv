ID;Source;Creation Date;Content;Sentiment
10p6qg9;Reddit;2023-01-30;Title:When Do I Need Microservices?, Content: https://levelup.gitconnected.com/when-do-i-need-microservices-d76fac58ac7c;0

j6iz51y;Reddit;2023-01-30 18:52:05;honestly op i didn't like this piece and i think it's filled with a lot of wellintentioned bad advice similar to what i've seen and read from folks without much experience in the area. if your program has yet to be created you must consider whether the implementation of microservices is worth it. i've spent much of my career cleaning up after folks who have taken this advice and started with a microservice architecture. consider that using microservices requires you to have good solutions for observability discoverability shared packages cicd tooling not to mention most of the time you're not going to know what the end state of your system is going to be. i've seen teams struggle with poorly named and scoped services that came about because of project requirements and company shifts. the only reason why i'd recommend microservices at all nowadays is if you have multiple teams responsible for different parts of your application. then using microservices enables you to build independently which can make sense in some cases. for other readers i'd recommend this articlehttpblogs.newardassociates.comblog2023youwantmodulesnotmicroservices.html for a wellreasoned nuanced take on microservices and their alternatives.;0
j6ilvew;Reddit;2023-01-30 17:28:49;q when do i need microservices? a son if you have to ask you're not ready.;0
j6j98h8;Reddit;2023-01-30 19:54:30;99 of the time the need for microservices is an organizational solution and not a technical one. if you have multiple teams that need to work independently but also provide concrete interfacescontracts to other teams who are all working independently from eachother then having a microservice architecture can help you. microservices to solve horizontal scaling is using a sledgehammer to hang a picture frame.;0
j6ktfza;Reddit;2023-01-31 02:00:26;the microservices architecture is a solution to the physical limits of a computer that's just not true. we were successfully horizontally scaling web applications for decades before microservices came along. they are absolutely not necessary for scaling compute beyond a single machine. microservices are for scaling organizations. they solve the problem of having large numbers of teams who need to be able to build and deploy systems independently of each other while still having those systems fall to each other across an agreed upon protocol.;0
j6iruhw;Reddit;2023-01-30 18:06:59;i think the article is nice but it misses very important reasons why one should consider microservices regardless to scalability. i.e. decoupling being able to use different languages tools and frameworks for specific tasks tools that can be more efficient or simply better in every aspect reusability;0
j6j4djg;Reddit;2023-01-30 19:24:39;every single microservices article fails to mention the people aspect. do you have a number of separate development teams with specialized domain logic? if not microservices will be more trouble than it's worth.;0
j6kk89k;Reddit;2023-01-31 00:53:49;how is this any different than a old fashioned web service from the soa days? why bother calling it a microservice?;0
j6kv6ys;Reddit;2023-01-31 02:13:11;if your program has yet to be created you must consider whether the implementation of microservices is worth it. if you have the budget for 20 developers off the bat and enough money to keep the project alive then sure. otherwise there are more important things to consider like acquiring more users so you'd have enough money and traffic to justify the higher cost of maintaining microservices.;0
j6j23lc;Reddit;2023-01-30 19:10:29;q when do i need microservices? a until the next paradigm shift happens in 12 months and everyone realizes microservices were a bad idea.;0
j6jfsgi;Reddit;2023-01-30 20:35:23;because if you present any argument to the c levels that the requirements and realities of your industry and products are in direct opposition to the spirit and strengths of the micro services philosophy you will be met with but microservices!. i recommend using this as an opportunity to disentangle your code. if you can't do that just break up your application so that it runs on more different machines. we used to have n services. now we have mn services. therefore more micro. so what do we get from that? as i was trying to say before...;0
j6jqnm9;Reddit;2023-01-30 21:42:31;dunno. how's your resume look? could it use a sprucing? this has been the most defining factor from what i've seen. apparently did microservices poorly is a huge sellingpoint.;0
j6k7rij;Reddit;2023-01-30 23:29:22;i'm in the camp that believe that microservices is mainly not used to solved technical solution but an organization structure one. each microservice should be owned by their respect business department giving them control over their own data and consistency boundary. this also encourage each microservice to actually be independently autonomous from other department. x200b if you only have one development team and one product owner. microservices are unnecessary overhead. well you could have small worker and utility services for scaling but you have to make sure you are not doing distributed monolith.;0
j6n1rjq;Reddit;2023-01-31 15:28:00;the premise of this article is completely wrong. you don't need microservices to scale horizontally. you can scale horizontally by running just one kind of service on hundreds of machines. do you think the google of 2000 used microservices? i doubt it.;0
j6ijwui;Reddit;2023-01-30 17:16:10;i created this article for people who are confused about the purpose of microservices. it discusses the technical purpose of microservices and the developments that follow it. i hope this article is helpful! if it isn't let me know how it can be improved.;0
j6j7dru;Reddit;2023-01-30 19:43:10;according to this article httpslink.medium.comc3letaf2ywb you need microservices when you have 2b revenue;0
j6kdoyw;Reddit;2023-01-31 00:08:38;this article sounds vaguely correct but misses the forest for the trees. microservices are not for i or you or even a team. they're intended for huge organisations with many teams. not one team. teams. plural. many of them. when it gets unwieldy to coordinate releases across dozens of teams then and only then does it start making sense to do microservices! tools like kubernetes are popular with organisations with more than one thousand developers. switchupcb's blog is not the guidance that 1k dev org is going to turn to when deciding which architecture to choose. if you're reading switchupcb's blog in order to make this decision then it is the wrong decision for you by definition. just stop. please stop. stop deploying microservices for toy projects with a one or two developers on it. it is pure overhead with no tangible benefit at that scale. and if you start talking about scalability i will smack you because you just need to casually perouse the vm sku options on any public cloud to see that 120 cpu cores and 100 gbps networking are now commonplace. again you don't need it. if you do then you're not going to be reading some random blog for scalability guidance you already have tens of thousands of cpus cores deployed with traditional scaling and now need to go bigger.;0
j6kh5w8;Reddit;2023-01-31 00:32:23;how should i structure my code? it doesnt matter. microservices is not about the code. its about the architecture. i completely disagree. the way you go about coding for micro services is completely different than a monolith application. it's a completely different mental approach. this is such a cheap answer to the question.;0
j6jj0wp;Reddit;2023-01-30 20:55:17;your article doesn't answer the question in the title. scalability and what not aren't esclusive to microservices you can build a monolithic app in apache spark distributing it across n machines. what distinguishes microservices is a way of reasoning about the problem you break it down into individual and self contained units. you then should bind this units with minimal interdipendecy using decoupling systems like apache kafka. this way you have a conceptually simple architecture which is if done right easy to mantain and scale both in capacity and in functionality since you are dealing with a simple modular system which supports the attachment of further units of execution with minimal impact. so when do you need them? well it's almost always a good idea to go for a microservice architecture. the challenge is how to actually design it and how granular do you need it to be and what's the criteria that you chose to separate the core logicical pieces. but all this can only been answered case by case.;0
j6jr7d3;Reddit;2023-01-30 21:45:54;when do need microservices? i suspect that the article is likely to be poorly written if the heading has such a glaring mistake in it.;0
j6kpt8j;Reddit;2023-01-31 01:33:45;people act likes its hard to make microservices good these days not every experience is from a shit legacy company tryna convert their java crap we easily got 810 microservices w k8s service mesh automated cicd full error tracking with a team of 10 ftes and it just lets us work so insanely fast as a startup we have a lot of interfaces retail shipping working with labs etc... as much as people like to hate it the node ecosystem has a lot of amazing tools out there k8s has an amazing ecosystem on it's own for all this stuff;0
j6kpsfa;Reddit;2023-01-31 01:33:35;you use microservices when you want to make sure that you never need to update two different parts of the application at the same time.;0
j6m881n;Reddit;2023-01-31 10:09:40;consider an scenario where you are developing an enterprise application that must support the following characteristics support for different variety of clients that includes desktop browsers mobile browsers and native mobile applications. expose an api for third parties to consume. integration with other applications via web services or a message broker. run multiple instances of the application on multiple machines to fulfill scalability and availability nfr requirements. adopt emerging technology stack. planning to go for continuous deployment pipeline setup for the application. from the requirements above you can very well say the application is 100 fit for a microservices architecture. you have to define an architecture that structures the application as a set of loosely coupled collaborating services. services can communicate using either synchronous or asynchronous protocols. services can be developed and deployed independently of one another. each service has its own database in order to be decoupled from other services.;0
j6mq7zb;Reddit;2023-01-31 13:54:08;microservices doesn't make sense if you have a couple of folks on one team maintaining array of services for the sake of other people are doing it or a naive attempt at horizontal scaling. at that point you're just creating more overhead and more work for yourself.;0
j6nopqw;Reddit;2023-01-31 17:57:20;as a dev ive really struggled with understanding the why of microservices which this article definitely helped with so thx for that. nowkubernetes and terraformi still fundamentally do not understand why these tools are usedwhat they accomplish even after doing some research. i guess its not really in my development arena as i dont develop for cloud but would love to learn. from an outsider it seems like solutions to a problem i fundamentally dont understand soback youtube university i go!;0
j6j2lrk;Reddit;2023-01-30 19:13:40;the only reason why i'd recommend microservices at all nowadays is if you have multiple teams responsible for different parts of your application. then using microservices enables you to build independently which can make sense in some cases. i would add build and release independently. it's more to solve an org problem than anything else.;0
j6jjvwm;Reddit;2023-01-30 21:00:36;that's one reason. another is even if you're tiny team if your mature project has taken decades of rd chances are it's heavily dependent on a ten year old version of some core tool maybe a programming language for example that is holding you back and has become a liability. the obvious answer is to rewrite the entire thing but that is almost impossible. 99 of those are either abandoned early or they drag on until the company goes bankrupt. here's whyhttps one of the less obvious answers is to rewrite one component of your code as a microservice so it has no dependencies or tight integration with the rest of your code. maybe add a few nice features while you're at it. then do it again and a gain. in a year or three you haven't done a rewrite but all of the old code is gone. microservices are a lot of work for a small team but with a mature product you can probably afford to do that work.;0
j6jzuxz;Reddit;2023-01-30 22:39:23;spot on. microservices take a lot of neat ideas and turn them into a religion. yes there are times when a full microservice stack is necessary. but the overhead of having a microservice stack incurs its own technical debt that is consistently paid for when most apps will never benefit from the positives that you get or would benefit just as much for those positives by just designing your stack properly using more established principles.;0
j6j6bfn;Reddit;2023-01-30 19:36:38;the article is pretty good. i once saw a good guide on how to go from monoliths to microseconds and the idea is that you gradually build up everything you need with the new stuff not being critical to infra at first since until it's been battle tested. you start modularizing code but you need to ensure you don't add regressions so you have to set up a cicd pipeline. in the process you split services even though it's one binary doing everything still. you then add monitoringobservability to better understand which services are using a lot of resources and which aren't and scale accordingly to what all services need. then you grab the bigger services and split those out. they use the same binary but you only use certain services. you add discoverability to pick the instance from the right pool. you then start using flags to split off services flag turns services on or off until you can only use each pool for the service it's meant to when discoverability is good enough to tell you which pools to use. next time start splitting code into multiple binaries. one for the specialized services the other for the shared services that all versions use. you'll have two copies of your binary at first but your specialized what each process does even more. this may be only internal. you need to start distributing a lot more copies of your binary so you set up a package distribution system to speed things up. once that's reliable you start making two versions of the binary one where you delete all the shared code the other where you have the specialized code. next you start using different copies of the same binary for the specialized version and remove all the code for other specializations. congrats you have set up microservices. and this process takes a long time. not because it's a lot of work it is but because you only take a step when you have a need to. you don't jump to the end until you really need to. meanwhile you take steps that put you in a better position. eventually if and when your software needs it you'll be at microservices.;0
j6jijuc;Reddit;2023-01-30 20:52:21;while i generally agree microservices are an inevitability for many and discovering you need them too late can be very painful. though it shouldnt be. imo it comes down to separation of concerns. if you can cleanly isolate features build durable interfaces using concepts like dependency inversion etc then migrating is just a small refactor and new cicd pipeline away. i think youre right that microservices require more overhead but i would split hairs a bit. tools like monitoring and observability are always a requirement. if the need is not felt then the code is likely still fairly simple in nature or not in wide use like a proof of concept. i know what youre getting at though observability becomes more imperative as you move to a distributed approach though if youre taking a monolith far it will still use distributed prod primatives like queues so you will still want good observability. regardless observability really just means good production debugability and youll always want that usually via some sort of structured logs approach. the other core benefit of microservices besides helping to define an independent path for teams to ship is that it extends the isolation of concerns metaphor to production by limiting code complexity and strengthening the interfaces that will multiply against production needs. decoupling also gives you a smaller feedback loop in your deployed environment when needed and gives you independent production controls like deploy pattern scaling etc.;0
j6l1zrb;Reddit;2023-01-31 03:03:47;the microservices.io website probably the canonical source has different sections on when to apply the microservices pattern. im seeing more now that there are platforms that give you free or nearlyfree answers to the observability traceability and related questions. k8s openshift etc. its definitely a pattern that invites a lot of problems that less mature organizations will trip on. deployment is no joke. discoverability is no joke.;0
j6jh6a8;Reddit;2023-01-30 20:43:52;observability discoverability shared packages cicd tooling and when do you not need that? the extra effort really isn't that big compared to a well designed monolith after you have made the initial investment. the problem is that so many people are stuck in the last millennium and can barely keep their shitty monolith going. then they faceplant hard when trying to run with microservices before they can even walk.;0
j6ky3ac;Reddit;2023-01-31 02:34:49;i couldnt agree more. the problem microservices solve is having more developers in your organization than can work on a single codebase efficiently. you have a bunch of complex tradeoffs to make if you choose to use it and new problems and concerns to address.;0
j6llic5;Reddit;2023-01-31 05:39:09;sometimes a horizontally scaling monolith is the right solution. but theres a fountain of money to be harnessed in always building microservices.;0
j6pegze;Reddit;2023-02-01 00:21:31;the only reason why i'd recommend microservices at all nowadays is if you have multiple teams responsible for different parts of your application. then using microservices enables you to build independently which can make sense in some cases. i would second you heavily here. this is what has always been the biggest blocker in my experience. systems that are blocked by multiple teams interacting and systems that became too complex to change which happens when multiple teams are on the same code base. many of the slow projects i have worked on would have been sped up if the projects just did less stuff which can be solved by splitting into separate microservices.;0
j6iwvdr;Reddit;2023-01-30 18:38:11;correct. microservices might be the answer to a question about scaling. but if you're asking when do i need microservices? the answer is i don't.;0
j6jvtum;Reddit;2023-01-30 22:14:21;i'm a junior and the biggest lessons i've gotten so far is that you don't try to solve problems you don't have yet. when do you need microservices? you'll know.;0
j6joi11;Reddit;2023-01-30 21:29:13;i wish the architect of my current project would have taken this advice. we expect maybe a 1000 users or day at the absolute peak. but of course it has to be microservices. tightly coupled. independent testing impossible.;0
j6k7ran;Reddit;2023-01-30 23:29:20;sure but it doesn't answer the question. when do i need microservices? not now. okay but i would still like to know when i need microservices. the answer isn't a secret. you need it when you want to put entirely different teams of people on different bits of your service. when you should want to do that is a problem for management.;0
j6iue83;Reddit;2023-01-30 18:22:52;true though using microservices architecture doesn't guarantee that what you produce will be decoupled you can easily fall into a trap of creating a distributed heavily coupled services if you take shortcuts. also there is nothing stopping people from creating a decoupled monolith application ofcourse i'm talking about database and code coupling not deployment.;0
j6j17m2;Reddit;2023-01-30 19:04:55;being able to use the right tool for the job is overrated. too many companies have this one microservice written in rust or elixir by a developer that has since left and everyone dreads touching it. having one to three standard stacks may seem unnecessary and bureaucratic until you find yourself in this situation.;0
j6j1kop;Reddit;2023-01-30 19:07:12;microservices are an organizational solution to an organizational issue too many developers working on the same codebase. any technical approach to microservices is doomed to fail. ergo stop talking about microservices until you're the manager of the too many developers i wrote above. being able to use different languages tools and frameworks for specific tasks you're inventing problems to solve which you don't have. focus on real problems.;0
j6ixre7;Reddit;2023-01-30 18:43:37;i'd argue that not one of those are arguments specifically for micro services. and in fact it is well known that moving to micro services specifically for many of these reasons is actually a mistake. once you get to the point of needing microservices you have to decouple and you get 'servicetech' isolation out of the architecture so you do have the ability to swap out some tech on a specific service if it is deemed prudent. but that's not why you move to microservices. and reusability is never a thing unless it is the thing being developed. again micro services can support reusability but there is nothing about micro services that makes this inherent at all. and nothing about reusability requires micro services. edit because op thinks assumptions work one way. look if you make a top level comment in response to 'when do i need microservices?' and you provide a list of reasons is it surprising if people assume you indeed mean need? now to be clear i actually did not make that assumption i merely explained why these are not reasons to move to microservices and clarified for everyone's sake that there is no need of microservices at all with respect to these items. i did not say that as a rebuttal to op. even if it was a perfectly logical assumption to make in context. just so you don't have to waste your time as op devolves into name calling and hypocrisy. nobody cares man. sometimes we say things that are wrong and that's ok.;0
j6ivvp8;Reddit;2023-01-30 18:32:03;no really not. even lowly libraries allow for decoupling calling one language from another has been done in process or out of process decades before the word microservices existed same as point 1;0
j6ji2k4;Reddit;2023-01-30 20:49:24;being able to use different languages tools and frameworks for specific tasks tools that can be more efficient or simply better in every aspect this advantage of microservices is vastly overrated. adapting a new technology and integrating it into your processes is a huge cost let alone finding people capable of maintaining it.;0
j6jb1ti;Reddit;2023-01-30 20:05:42;re decoupling the term is ambiguous i've been trying to tie it down for many years. re being able to use different languages tools and frameworks for specific tasks tools that can be more efficient or simply better in every aspect you generally want to be careful about having too many flavors of tools in an organization it makes staffing changes and training hard. try to stick with one rdbms brand and two app languages one dynamic and one static. an exception may be systems that have to have a close relationship with specialized or industrial equipment factory chemical military medical etc. if your shop settles on a single rdbms brand i've found stored procedures can be an alternative to microservices if the algorithm is relatively simple. but if not it's not micro as in microservice anyhow. and it's usually better to use an rdbms to coordinate complex subsystems. rdbms's are powerful tools leverage them! ignore the antirdbms rhetoric that was common in the late 2000s'. re reusability please elaborate. we already have functions and oop classes for reuse.;0
j6kosmv;Reddit;2023-01-31 01:26:17;this is exactly what soa originally meant but then badlyimplemented soa became so prolific that the term soa became synonymous with bad soa. the term microservices was invented to signify soa done well using the best practices we learned while trying to figure out soa.;0
j6jfwjw;Reddit;2023-01-30 20:36:05;12 months microservices have been in the spotlight for longer than that already. that being said i do hope their reign is coming to an end.;0
j6j2lcf;Reddit;2023-01-30 19:13:36;i feel like the most common time that i see people asking should we be using microservices is if they have one monolithic deployment that handles everything and there is a consideration for splitting it up. i don't feel like your article really addresses this as it is mostly about choosing microservices for scalability but there's nothing stopping a person from containerizing and scaling the monolithic deployment in the same way.;0
j6j5sde;Reddit;2023-01-30 19:33:20;your article covers a lot of good info and considerations but uloompaoompa is correct. i believe you've put the wrong title on this article. it's not about when to use microservices but rather about when to use services full stop. as in service oriented architecture. monolith doesn't refer to a when all the code is on a single server. it means it's all in a single application regardless of how many servers there are. with just a few findandreplaces i would heartily recommend this article to junior devs starting at my company. thanks for sharing this well written and logically organized article.;0
j6jnmns;Reddit;2023-01-30 21:23:54;as others have mentioned microservices could also be useful to solve organization limitations. like specialized teams working on microservices that have a different release cycle and maybe a different language. that being said my advice is if you dont have a lot experience with microservices then dont start a project that way. learn by working on a team that already has a successful project implemented with microservices. it maybe a chicken and egg problem but you dont know if its right for you unless you already worked with a successful team that already used microservices.;0
j6j46wa;Reddit;2023-01-30 19:23:29;you are both correct. you've obviously actually worked with microservices. thank you for bringing good info to this thread.;0
j6jr3m0;Reddit;2023-01-30 21:45:16;my skip is solving the problem everyone's talking about microservices and i can't take part .;0
j6lsumd;Reddit;2023-01-31 06:51:52;the only reason why i'd recommend microservices at all nowadays is if you have multiple teams responsible for different parts of your application. then using microservices enables you to build independently which can make sense in some cases. i would add build and release independently. it's more to solve an org problem than anything else. while that is true how much it contributes to a solution is debatable it only takes a single restructure of the org to have microservices be an actual impediment i.e. the team for ms1 is the same as the team for ms2 but instead of simply performing ms1.foo in code all callers of ms1.foo make an endpointgrpc request to ms1.foo doing pointless marshalling.;0
j6jln37;Reddit;2023-01-30 21:11:35;that's not an argument against microservices that's just terrible code. the monolith was probably terrible too.;0
j6jar80;Reddit;2023-01-30 20:03:54;my last job had like a chain of 5 different services talking to each other. figuring out where something was getting updated was godawful teams along the microservice chain just pushed me off to others... it was bad;0
j6jhje4;Reddit;2023-01-30 20:46:08;microservices might be the answer to a question about scaling. and not only horizontal scaling but especially organizational scaling.;0
j6jwijh;Reddit;2023-01-30 22:18:37;not to be pedantic but what are microservices and when should i use microservices are two different questions. you should definitely learn what they are and the internet can help with that. figuring out when to use them is a lot harder and more specific to each case. if you're asking in theory when you might use one that should be answered when you learn about what they do and how they work.;0
j6nmbne;Reddit;2023-01-31 17:42:47;if youre an hourly paid consultant microservices are always appropriate.;0
j6jqspk;Reddit;2023-01-30 21:43:23;if your microservices are tightly coupled you don't have microservices you have a very expensive monolith.;0
j6kq24t;Reddit;2023-01-31 01:35:35;but of course it has to be microservices. tightly coupled. independent testing impossible. what you are describing is not microservices though.;0
j6k3crv;Reddit;2023-01-30 23:01:02;i'm seriously asking for an example or way more preferable a war story of an asymmetrical load. i've never ever witnessed a situation where that feature of microservices has been used.;0
j6junxb;Reddit;2023-01-30 22:07:10;this is the typical pattern with microservices. people create a tangled mess of hell and think hey! we'll use microservice to decouple that thing! the typical end result is that the tangled mess now involve ci deployement infrastructure networking and that refactoring got an order of magnitude harder. yeah! to job security i guess.;0
j6j6ppk;Reddit;2023-01-30 19:39:05;if you've got a distributed monolith then you're not using a microservice based architecture. it's also ok to not use the latest fad to build your software just know your use case.;0
j6iv4or;Reddit;2023-01-30 18:27:22;i agree but your comment could also be applied to anything as it basically states 'you won't get decoupling if you fail at creating truly microservicebased architecture'.;0
j6jlnc0;Reddit;2023-01-30 21:11:37;i've got a computationally inexpensive but longrunning task that's poorly implemented sometimes they're poorly implemented due to unavoidable industry standards. smtp for example has a five minute timeout for a task that meeds maybe 1 millisecond to complete. and major smtp servers you might contact such as microsoft and google commonly do take five minutes i actually wonder if it might be part of their spam filter... if you're sending a lot of emails you can't hold the connection open for minutes. my smtp connections are farmed out to a microservice. it works wonderfully and i have a 10 millisecond timeout for sending an email adding it to the queue on the microservice.;0
j6j0pry;Reddit;2023-01-30 19:01:48;i think you misunderstood my comment. i never said that either of these require microservices and are completely exclusive to that architecture this is something you assumed and then argued against. i'll take no part in you arguing against something you think i said d;0
j6j0zjx;Reddit;2023-01-30 19:03:32;i really don't get your response. did i claim that these characteristics are exclusive to microservices or not?;0
j6jpq6z;Reddit;2023-01-30 21:36:51;thanks for the feedback! you highlight a situation when people ask this question. in the article i state that a condition of implementing microservices must be that you are unable to be horizontally scale through activeactive load balancing i.e cloning the monolith. how can i reword this point in a manner that indicates that a monolithic architecture can be scaled through the containerization of the monolith?;0
j6jqn3j;Reddit;2023-01-30 21:42:26;thanks for the feedback! it's true that most developers should acquire experience by working on a successful project prior to using microservices. however these opportunities are not always available. articles such as these aim to reduce the mistakes of people who will inevitably consider microservices. it's why i include albeit at the end that microservices should not be applied to every project that exists. the reason that i don't cover the organizational aspect of microservices is because i don't believe that microservices should be used for the purpose of organization. while microservices may have organizational benefits these don't outweigh the cost of an implementation where it isn't required.;0
j6joa58;Reddit;2023-01-30 21:27:51;if you have an automated deployment system and practice cd for a small to medium sized team 1 to 20 you don't need microservices you can easily deploy a single app 50 times a day. and you'll be in a much better place to refactor and make larger sweeping changes when you inevitably get stuff wrong.;0
j6nbek9;Reddit;2023-01-31 16:33:55;multiple repos microservices. you can have microservices within a monorepo.;0
j6judx8;Reddit;2023-01-30 22:05:27;no thats the point. microservices can add so much complexity to simple problems that people start writing bad code as bandaids to get to the next step. its hard to write bad code when most of your service methods are only a few lines and performing a join only requires performing a join. lots and lots and lots of good web applications that make companies lots of money will never require a full microservices architecture. when you are making software used internally by a company of 10000 employees of whom only 1000 will use the application. why are you trying to support 100000 simultaneous users that will never exist?;0
j6kpcl7;Reddit;2023-01-31 01:30:19;5 different services talking to each other. if you are talking about synchronous communication between them then what you are describing is not microservice architecture. in true microservice architecture there is no synchronous communication between microservices.;0
j6kpyk9;Reddit;2023-01-31 01:34:50;maintaining backwards compatibility never understood why people find it hard to maintain backward compatibility in microservices. as long as you only add fields to the events and never remove or rename fields then backward compatibility is a nonissue.;0
j6k2s6w;Reddit;2023-01-30 22:57:30;understanding when is an important thing maybe even more important than what. you generally do not want to just jump into microservices unless ask the infra is there. instead you want to do halfway steps where you get what you want but don't work on the things you don't need yet or maybe even ever. and this includes the effort of learning what they are and how they work i would argue that understanding what they are before understanding when they need us google dangerous. it's learning a solution before you even know what it solves and risks seeing screws as nails because you already have a hammer. so i'd say it's backwards. it's when you understand when you should use microservices specifically why you use them what is the problem they're meant to solve that you can understand why microservices are the way they are. it may be that you don't need all of microservices but still value learning how they solve one problem you have. hence the advice before thinking about microservices ask if all you need is to modularize and decouple your code.;0
j6jxbok;Reddit;2023-01-30 22:23:36;i call that distributed monolith all the downsides of microservices and monolith;0
j6jur4d;Reddit;2023-01-30 22:07:41;no no the architecture said it's microservices. and why would he lie?;0
j6ka3j4;Reddit;2023-01-30 23:44:47;i work on a web product and we have asymmetrical load. the web application itself has fairly low load but the data pipeline and export mechanics have very high workload and can be shared as independent modules between the horizontally scaled web apps. so it's one of the rare cases where microservices make a lot of sense.;0
j6lplq5;Reddit;2023-01-31 06:18:08;as someone who worked at a large global cloud saas company built on microservices this is a strange thread to me. the product was made up of many different features across many different workloads. load differed vastly from service to service sometimes on an org by org basis. some systems were core systems and saw massive sustained load then there were tiers down from there at differing levels of load. sometimes varying from region to region. sometimes load would come out of nowhere. everything was built to auto scale with resiliency and tested to do so. this would seem like a normal experience across enterprise level cloud software.;0
j6iylle;Reddit;2023-01-30 18:48:47;this just shows that decoupling is good but neither microservices nor monolith architecture comes with it by default you can achieve it in any architecture.;0
j6jg36c;Reddit;2023-01-30 20:37:11;and comes right back at you when you have to ensure every 'microservice' is appropriately fault tolerant in the same way... microservices make everything more complicated no matter how you slice it. necessary complication is good but making the distinction is problematic.;0
j6j2cvo;Reddit;2023-01-30 19:12:07;i did not say you did. but it misses very important reasons why one should consider microservices regardless to scalability. my entire argument is that those things are not reasons you should consider microservices at all. noting there are no requirements involved was just further reinforcing all of this you can do all of these things with or without microservices. noting there being no requirement there is merely reinforcing the point. i'll take no part in you arguing against something you think i said d don't worry i wasn't.;0
j6khwd1;Reddit;2023-01-31 00:37:31;your words very important reasons my argument these are not important because the same effects can be achieved and were achieved way before microservices even existed. or rather these reasons are not important and it is visible exactly because these characteristics are not exclusive to microservices. these are imnsho arguments that look good to less technical people but do not hold appropriate weight. schmoozing reasons if you will.;0
j6kbpte;Reddit;2023-01-30 23:55:20;i don't dispute that an emailing service is one way to go about it but not the only. we use an inhouse mailing c api wrapper for our c apps that communicates with smtp. if you used a web service you'd still probably need an api app wrapper of some type anyhow such that we don't see a clear benefit microservices would give us. other shops out there have a different take? kiss dictates have as few parts as possible. thus we manage 1 part whereas using microservices would require managing at least 2 parts the app api and the web service.;0
j6kevam;Reddit;2023-01-31 00:16:36;the line you ed points out that a monolithic service is also a possibility but kind of treats it like the reader should be able to identify when load balancing a monolith isn't a favorable choice. i think that's the main question that an article called when do i need microservices should be answering and you don't really get into how someone should make that determination. i think additionally there might be other scenarios where it is a little more ambiguous. what if the monolith scales fine with load balancing? is there still a point where i should consider shifting to microservices? i can think of some scenarios where the answer is yes and i can think of some where the answer is no. these are the types of things i would've expected the article to tackle. i also agree with ucaptcrax that the conceptualization of microservices section really just applies to services in general. i don't really see anything in that section that applies specifically to microservices.;0
j6lrv5p;Reddit;2023-01-31 06:41:21;this is really a huge piece of it. there's a few big upsides and the rest is extra overhead. smaller program is much simpler to fully comprehend doesn't need to be massively structured to remain organized separate out requests with differing resource profiles to separate hosts. obviously you can horizontally scale a monolith but microservices give an extra layer of isolation. different pieces of your system deploying separately allows for incremental and isolated changes. if you have a large number of people trying to make changes at the same time the deployments can easily become backed up behind each other or rolling back one feature might require rolling back multiple other features. but then you also have to deal with organizing your list of microservices crossprocess observability tools request tracing complex deployments that have to go in the right order among other issues.;0
j6l0fhc;Reddit;2023-01-31 02:52:08;this works great if your app can be updated without downtime. not every flavor of application has that luxury especially ones that are extremely schema sensitive. i am not saying microservices are the answer but monolith isn't a panacea either.;0
j6s4hvz;Reddit;2023-02-01 15:44:24;i never suggested that. implicitly i was referring to microservices housed inside of a monorepo.;0
j6kdqy0;Reddit;2023-01-31 00:09:01;why are you trying to support 100000 simultaneous users that will never exist? that's not a microservices vs. monolith aspect anyway. in fact microservices are almost always a negative to scaling. monoliths achieve better density and are more handsoff when the resource consumption of various subsystems of your app vary on their own. and obviously they don't introduce the bunches of network traffic and latency that come with intercommunicating microservices. microservices can get you better resiliency in the face of dynamic resource needs scaling isn't instant and doesn't always go as planned so having parts of your service isolated can prevent them from affecting each other if that's a problem you have. otherwise services with odd and high resource requirements like something that needs oodles of ram but not so much compute or really high iops on storage can have scaling cost benefits from separating them from the rest of the monolith. but otherwise this notion that microservices help you scale is nonsense repeated by inexperienced bloggers.;0
j6m5vw3;Reddit;2023-01-31 09:36:04;that's probably not true. one of the reasons for microservices is to reduce cognitive load. monoliths can be too big for one person or one team to grep the whole thing. different bits tend to belong to different people or teams. have you read team topologies? it's a good read and discusses this and other signs that you might want different teams to own different micro services.;0
j6jxalh;Reddit;2023-01-30 22:23:25;i dont think its a lie but more of just ignorance. they think they have microservices but really its just a distributed monolith.;0
j6nbyww;Reddit;2023-01-31 16:37:34;even cloudflare doesnt try to independently scale each service. instead they just run all the services on all the systems in a typical microservices model you might deploy different microservices to containers running across a cluster of machines connected over a local network. you might manually choose how many containers to dedicate to each service or you might configure some form of autoscaling based on resource usage. workerd offers an alternative model every machine runs every service. workerd's nanoservices are much lighterweight than typical containers. as a result it's entirely reasonable to run a very large number of them hundreds maybe thousands on a single server. this in turn means that you can simply deploy every service to every machine in your fleet. homogeneous deployment means that you don't have to worry about scaling individual services. instead you can simply load balance requests across the entire cluster and scale the cluster as needed. overall this can greatly reduce the amount of administration work needed. cloudflare itself has used the homogeneous model on our network since the beginning. every one of cloudflare's edge servers runs our entire software stack so any server can answer any kind of request on its own. we've found it works incredibly well. this is why services on cloudflare including ones that use workers are able to go from no traffic at all to millions of requests per second instantly without trouble. httpsblog.cloudflare.comworkerdopensourceworkersruntime;0
j6j4ren;Reddit;2023-01-30 19:27:02;don't get me wrong i agree with what you said. microservices aren't a magical cure to all ills and in most cases monolith suffices. the specific case i mentioned shouldn't be a sole reason to always apply microservices.;0
j6j3prq;Reddit;2023-01-30 19:20:34;my entire argument is that those things are not reasons you should consider microservices at all. is english your first language? ... you can do all of these things with or without microservices ... where did i claim the opposite? noting there being no requirement there is merely reinforcing the point. why aren't you just reading what i wrote asis instead of going for extreme extrapolation? i understand if i wrote something like 'you must use microservices for decoupling etc.' and not 'you should consider' but i didn't so.. there's literally no reason to fight over this as i said i never remotely implied you have to use microservices to achieve any of these as they aren't perks exclusive to that architecture i'm just saying it's one solution but whichever fits best? as always it depends;0
j6m4e95;Reddit;2023-01-31 09:15:04;100 agree with this. also some things just make sense as services as they have natural and well known boundaries. a good example of this is an authentication service or perhaps a document scanner. but trying to do microservices in your business domain can go wrong very quickly and turn into a distributed monolith which is very hard to refactor as you inevitably learn more about your business domain.;0
j6jxc5u;Reddit;2023-01-30 22:23:41;i didnt say anything about building two unrelated projects in a single monolith. im just saying there are lots of projects that dont benefit from strict isolation of storage and logic services. if i need to render a bunch of pdfs and thats going to bog down the application then go ahead and make another application. but i dont need to separate users and every other data model onto their own servers and databases in most projects. thats just adding complexity for the sake of bad design. edit ive done work on projects that serve 200000 daily active users on a couple servers with no lag or downtime. those users are only using the application 23 times a day for a few seconds. it is entirely dependent on the project. microservices can be useful for very large and very actively used projects. but every app being designed that way is just using microservices as a solution seeking a problem kinda like crypto lol its real some companies have a use for it. most dont except for a couple isolated services.;0
j6khvh6;Reddit;2023-01-31 00:37:21;i agree with you but thats the reasoning of the people choosing to make these things. its not them attempting to support 40 8person teams or break out a heavy service so resources can be tailored to that problem. its them thinking they need infinite scalability because some aws rep sold their boss on the idea that microservices give them that. microservices are useful when you have a problem that would actually benefit from it. a lot of inexperienced people will just break every table from their db onto a different actual db and think they are somehow future proofing things. when the reality is that for lots of applications it didnt need to be future proofed to begin with. by the time they need to scale horizontal scaling would work and they are going to end up rewriting the system soon after anyway. the internet is full of web applications that were built for enterprise scale but never needed that kind of architecture. mobile app stores are absolutely filled with them. a lot of apps talk to a server for one or two requests when a user opens the app then they close it and dont look at it again for hours or days think like venmo august door locks 1password todo applications your bank app. if your app is wildly successful then sure you might need some kind of microservices architecture that will let you differentiate resources to different services or allow multiple teams work on different parts without stepping on each other. but only 1 out of 1000 mobile apps even see any traction. its a waste of effort to create an architecture that could support a huge workforce or user base when its most likely that moderate success wont even demand that.;0
j6moxw3;Reddit;2023-01-31 13:42:00;this is what puts me off microservices people often juniors or managers with little technical experience blindly claiming they're better for scalability tm but haven't stopped to think about why n monoliths that can perform m different functions at any time is supposed to be less responsive to changing demand than mn microservices which each only do 1 function requiring your system to predict demand and wait for new instances to start if it changes. people really seem to think that each of those monolith functions is taking up constant resources meaning it can only perform each at 1m capacity i do see the point if some function requires special hardware resources. then it does make sense to split that into special instance rather than having each instance need all that hw allocated just in case though even then simply overprovisioned vmscontainers may achieve the same result;0
j865jhr;Reddit;2023-02-11 23:47:13;one of the reasons for microservices is to reduce cognitive load. monoliths can be too big for one person or one team to grep the whole thing ... wut that's called code organization architecture. you can easily achieve microserviceslike organization encapsulation in a monolith with a fraction of the actual cognitive load the exact same microservices architecture would require. by it's nature microservices demand higher cognitive load to work with more code to write more monitoring to view and more infrastructure to support. different bits tend to belong to different people or teams. then argue that instead of making objectively false statements like those that preceded it? having many independent teams for a single project is exactly why one might want to use microservices. simplifying your code or architecture and reducing cognitive load are most definitely not. cripes.;0
j6j9xyj;Reddit;2023-01-30 19:58:48;microservices are an organizational solution to an organizational issue too many developers working on the same codebase any other reason for microservices will get you none of the benefits and all of the troubles;0
j6j5op5;Reddit;2023-01-30 19:32:41;wow really? look you just attacked me for no reason and then reinsisting i had no reason to state what i did even though i clarified again what i said and why i said it. there's literally no reason to fight over this as i said i never remotely implied you have to use microservices to achieve any of these as they aren't perks exclusive to that architecture i'm just saying it's one solution but whichever fits best? as always it depends ok but you literally wrote a top level comment with a list of 'reasons to use microservices'. i countered that by saying 'not reasons to use microservices'. then you decide i can't do that because you didn't say must use. which i never said you did. you assumed that is what i was arguing against. i'm not sure however what you intend people to assume about the intent of your top level comment in the first place. anyways you're the one getting all argumentative and defensive here not me. ps do not attack people based on assumptions you make about them in an argument it can only serve to make you look bad.;0
j6kj8kn;Reddit;2023-01-31 00:46:55;i think about this a lot and wonder whether there is some sort of framework or library that would allow you to write modules and have your application use them then in the future transparently pull that module out into a microservice with only a configuration change on the caller's end. in java at least this would require separate apiimplementation libraries like log4j2's log4japi and log4jcore. from memory this is how dcom in windows worked the caller had no idea whether the object it had instantiated was inprocess outofprocess or on another machine across the network. this would allow a stranglerincremental approach to turning a monolith into microservices so i would be surprised if something like it doesn't exist although i haven't looked hard.;0
j6mqckp;Reddit;2023-01-31 13:55:20;with micro services you put a network connection between modules that could have lived in the same process. that's a rather big con. worse you could end up serving your microservice as a nuget package that other teams consume which means the other team is now forced to use dotnet.;0
j6k0zbw;Reddit;2023-01-30 22:46:21;the joke is they suggest it's good architecturehttpsdocs.aws.amazon.comwellarchitectedlatestserverlessapplicationslenswebapplication.html to have lambda be your web request handler behind an api gateway or alb so that each get request from the client is a lambda request and lambda cannot do asyncthreaded processing of multiple requests at a time you need to respond before fetching the next request. naturally the solution to this is to add pay for more architecture e.g. have your get handler dump the work onto sqs i.e. have the web handler just respond that the work was accepted and then have more lambdas to pull work off sqs etc. etc. unless you're neck deep in some 2005 vintage php app it's insane. you can even see in the marketing copy on the page i linked workloads which need to scale to thousands or millions of users require provisioning infrastructure for peak loads or sophisticated autoscaling mechanisms when available. onpremises workloads require significant capital expenditures and long lead times for capacity provisioning. unless you're doing something very compute intensive like ml that's just not true. a single bottombucket server onprem can easily scale to millions of users for most applications. there's no capacity planning needed just buy 2 servers for redundancy or 4 for multidatacenter and you'll already have far more capacity than you need. oh and getting back to the original thread topic don't use a microservices architecture since it creates massive overhead. the only place where you need capacity planning is in aws where they charge you through the nose for 1 usage of a server.;0
j6k452l;Reddit;2023-01-30 23:06:04;i get it im just saying it isnt one or the other. thats like arguing language x is the best and you shouldnt use anything else. its entirely dependent on the project. if your public facing frontend and private backends need to talk to each other they can use each others apis. they can be separate applications. you can build microservices but only for the 14 services out of 50 that need to be able to scale and build the rest in a single application. i have watched partner companies make some real year long messes out of rest apis that should have been built in a couple months by one or two talented developers. microservices arent bad they are just complicated and very few companies design them well or use them correctly the first few times they do it. its dangerous to just decide to try isolating a bunch of data services that really didnt need isolation.;0
j6kbq3a;Reddit;2023-01-30 23:55:24;the joke is they suggest it's good architecturehttpsdocs.aws.amazon.comwellarchitectedlatestserverlessapplicationslenswebapplication.html to have lambda be your web request handler behind an api gateway or alb so that each get request from the client is a lambda request and lambda cannot do asyncthreaded processing of multiple requests at a time you need to respond before fetching the next request. this is ok for shortrunning requests because you will never exceed that many concurrent requests. naturally the solution to this is to add pay for more architecture e.g. have your get handler dump the work onto sqs i.e. have the web handler just respond that the work was accepted and then have more lambdas to pull work off sqs etc. etc. unless you're neck deep in some 2005 vintage php app it's insane. the actual benefit of this approach is that you are decoupling the responde time from your computational workload. you know what sucks? a web service that keeps getting slower and slower as more features are added... doing the asynchronous thing just means your client isn't stuck waiting. honestly even a monolith would benefit from this approach because again separating response time vs compute time is better unless you're doing something very compute intensive like ml that's just not true. a single bottombucket server onprem can easily scale to millions of users for most applications. you are paying for compute you aren't using by provisioning peaklevel capacity then. there's no capacity planning needed just buy 2 servers for redundancy or 4 for multidatacenter and you'll already have far more capacity than you need. just build a redundant network using colos rrestofthefuckingowl this isn't by any means trivial. also you are lying about capacity planning because you need to account for 5yr projections. oh and getting back to the original thread topic don't use a microservices architecture since it creates massive overhead. this the only thing we can agree on they create massive overhead. they solve the problem of scaling up development so if you don't need to scale up development you probably don't need microservices. the only place where you need capacity planning is in aws where they charge you through the nose for 1 usage of a server. i was a sysadmin at a company that went from running our dc in the middle of the office and walked them through moving some systems to the cloud. capacity planning was a big deal at every step. so i can safely say this last bit is just false.;0
j6l4p33;Reddit;2023-01-31 03:23:48;i'm not going to tell you that aws is a magic bullet to solve every problem. but there is a lot of misinformation or perhaps just some uninformed stuff being thrown around. for example if you are doing it right restoring an rds backup is not error prone and shouldn't require that you change connection strings in your app. using lambdas does not mean you are stuck opening up a zillion connections to a database. just like everything there are many easy and wrong ways to use aws. i keep seeing people here describing microservices as being some sort of cicd hell and i don't understand that. yes you need people with some specialized skills and if you don't have them... just because i can't fix my transmission myself doesn't mean that transmissions are bad.;0
j6jh8e5;Reddit;2023-01-30 20:44:13;let's say you've 1 failure rate in any software component. in a monolith it means you'll have 1 failure rate for a single business request. in a microservices architecture you'll have x failure for the same request where x is the number of microservices you need to fulfill it. resiliency? i think not.;0
j6lclos;Reddit;2023-01-31 04:24:02;that's kind of precisely what i mean except being done at a higher level by classloading rather than changing code as mentioned by the way log4j2 does things. for a concrete example there would be a java library called myauthenticatorapi providing interface authenticator. the application uses a factory to receive an implementation of authenticator it doesn't know or care what the concrete type is. there would be two libraries myauthenticatorlocal and myauthenticatorremote that both implement authenticator interface so which one is called is determined by which library is loaded on the classpath. this way no code change is needed and the exact same application can make local or remote calls based on what is on the classpath. the thing i'm missing is that now you have to maintain two authenticator libraries sure they would be 99 the same code just with a microservice wrapper in the remote one but scale that up to 100 microservices and it's immediately a maintenance risk. and as far as management is concerned it's wasted time as you're coding up two solutions for future flexibility that may not be required. what i'm after is a framework that would make this seamless and automatic. it may require a java compiler plugin or a maven plugin or similar as i doubt it could be implemented as a library.;0
j6nsa3o;Reddit;2023-01-31 18:19:05;for example if you are doing it right restoring an rds backup is not error prone and shouldn't require that you change connection strings in your app. i'm sure there's a way to automate everything but from what i understand it gets restored as a new instance and then you need to do the work to point things at that instance no? either with the app string or a cname or whatever. the point is aws doesn't actually solve the backuprestore problem for you. using lambdas does not mean you are stuck opening up a zillion connections to a database. if i have some modest level of peak concurrency say 1000 does that not mean i will have 1000 lambdas which each need a connection? i keep seeing people here describing microservices as being some sort of cicd hell and i don't understand that. yes you need people with some specialized skills because the alternative doesn't require specialized skills and works better.;0
