ID;Source;Creation Date;Content;Sentiment
17b8idj;Reddit;2023-10-19;Title:How the microservice vs. monolith debate became meaningless, Content: https://medium.com/p/7e90678c5a29;0

k5ilalp;Reddit;2023-10-19 09:19:42;bad article. comes down to to put it differently we solved consistent cacheinvalidation and thereby made the debate moot. and that they made a product and this is an advertisement. i know nothing about the problems of microservices but i did not expect cache invalidation to be the major point. if only they'd explained why. perhaps they did in the other articles but perhaps one those should have been posted instead.;0
k5i3i9u;Reddit;2023-10-19 06:02:28;maybe its just late in the evening but this screams clickbait bullshit to me. everyone with a couple yrs of experience knows microservices are artifacts of domain driven design to provide isolation across many engineering problems. if your org is confused by that please provide some solid evidence with reproducible tests to proof out the entire community. otherwise we'll step over the remnants of your shit software while we continue to engineer real world solutions. thank you;0
k5hxmbu;Reddit;2023-10-19 05:11:00;first of all there is no such thing as a microservice. it's just a service. we've had them all along we break apart larger programs into separate services all the time for pragmatic reasons minus the dogma. second there is zero evidence microservices offer any benefit whatsoever. they come with a dramatic increase in complexity bugs deployment issues scale problems and debugging woes. they require a very disciplined and refined engineering team to implement and scale correctly. they are a massivehttpskenkantzer.com5softwareengineeringfootguns footgunhttpskenkantzer.comlearningsfrom5yearsoftechstartupcodeaudits for most engineering teams. go ahead try and find any study or experiment or evidence that conclusively shows microservices afford any of the benefits claimed by proponents. you will see a bunch of people making statements with zero evidence. i have actively searched for any good evidence and all i get are unsupported claims. it is an embarrassment. we are engineers first and foremost we are supposed to be guided by evidence.;0
k5jmmw3;Reddit;2023-10-19 15:47:18;microservices are just object oriented programming over a network. change my mind.;0
k5kh8es;Reddit;2023-10-19 18:57:55;i generally view most the microservice push to be an antirdbms viewpoint. the antirdbms movement started when startups realized existing dba's didn't understand startup needs and thus coded around dba's doing in code or in xmljson what rdbms would normally handle in a traditional setting. it is true such dba's didn't understand startup needs but that's a management communication and training problem not a tool problem. in the longer term it's best to have centralized schema management or inspection to keep data clean consistent. a mature company shouldn't want to move fast and break data. rdbms are a pretty good tool for sharing small services stored proceduresviews and coordinating communication between bigger apps or subapps queue event and log tables. it should be made clear that an rdbms does not force nor encourage overly large apps. in fact rdbms do moduleapp coordination better than jsonoriented approaches if a shop uses mostly the same database because you get a.c.i.d. easy logging and other features built into most rdbms. most apps have to connect to an rdbms anyhow such that they don't require extra driversconnectors to communicate unlike adding json web services. thus you can nicely and easily partition apps and miniservices using an rdbms properly. the argument promicroservice people often give to counter is that such doesn't work well in a shop with many different rdbms brands. while this is true most small and medium shops settle on a primary brand and don't change very often which is usually good policy. a giant org that's the result of big mergers may indeed need a way to work with a variety of db brands and that's perhaps where microservices are superior to rdbms for typical module coordination needs. but most of us don't work for the big fanglike co's. use the right tool for the job and job size.;0
k5iurwv;Reddit;2023-10-19 11:27:05;the moment you share data instead of handing off data it is no longer a microservice just a splitdistributed monolith. a microservice operates on its own domain and doesn't care what sends the requests.;0
k5huioj;Reddit;2023-10-19 04:46:21;i understand the weight of the claims we have years of research behind this project. we can provide all the benefits of a monolith with all the benefits of microservices. paradigms do change from time to time.;0
k5iabrr;Reddit;2023-10-19 07:10:20;i always thought the debate about micro services as literally just a cost debate. it costs lot to run a lot of micro services in the cloud. you gain in scalability and componentized deployment. you lose some perf assuming you can scale up your pc high enough if not then microservices arent so much an option but necessary. your deployments become a pain in the ass as well as managing backwards compatibility. it complicates the simple. if microservices were cheap and deployment simpler i assume they would be the go to choice everytime. honestly they are the go to choice everytime its only later when your deployments get out of hand and your cloud spend ends up on someones radar because it crossed a threshold that its a problem.;0
k5jj8hw;Reddit;2023-10-19 15:23:24;it's easier to make teams work together when the api is set in stone they know that they have no rights to change it. if the codebase is shared people are very easily driven to introduce multiple breaking changes and their solution in the same pr. however breakingfixpr more often than not introduces bugs that are not addressed because the solution built is only built to address the newly introduced breaking changes and multiple issues with previous versions are often neglected. introducing the same breaking change in a manner where you can't introduce the solution in the same pr as it's done by another team in another repo forces backward compatibility which forces you to handle first of all how your new changes interacts with the previous version of the appdbapi. i'd say monoliths are good for very small teams where iterations are key and things can significantly change. so breakingfix in the same pr is the way to go. microservices or at least services are good when there are stable parts that sustained the test of time you'd rather build around it given that you 100 trust that part to work without failures and in a predictable way. you don't want stable things to be modified by a overzealous developer that goes to change the how customers are billed billing fsm because he wanted change how the customer downloads the pdf frontend page. this cowboy guy won't be able to easily change the billing part fsm and the frontend in the same pr. he'll be forced to introduce it by only changing the fe. microservices protects companies against overzealous developers by making their rogue behaviours significantly harder to do. forcing them to break less things on their destructive endeavours.;0
k5ilwqy;Reddit;2023-10-19 09:27:47;happy to help. a cache is by definition a secondary source where the primary emits new values but since the only reliable one is the primary we can't know whether what we're serving is current or not. when looked at from a writeperspective this reasoning applies to any distributed state where there are original emitters of information like microservices or middlewares. this is what i'm talking about when i discuss shared state between services. i don't think we're being unfair because we're selling something that we worked on for many years without pay and that can provide a lot more value to clients than what it would cost them to have it. microservices are not usually built by the destitute it's not like we're taking advantage of anyone here.;0
k5iqvo5;Reddit;2023-10-19 10:34:53;because of conway's law your architecture will always end up reflecting your organisation. as the business and teams grow the friction in working crossteam causes a pain point and becomes a frequent blocker. by decoupling it into microservices you allow the teams to develop and deploy at their own pace. the system ends up more complicated and difficult to work with than it otherwise needs to be but now the teams are mostly selfreliant and able to work at their own pace.;0
k5j98k3;Reddit;2023-10-19 14:04:43;in their defense a bit... you can't really guarantee the underlying team doing said development is producing high enough code quality to not shoot themselves in the foot. the biggest thing about microservices is the logical separation of codebases conway's law loves em and regardless from a technical perspective whether that's a good or bad thing from a code organization perspective it's a bit hard to fuck that up. service x does x things service y does y things. the shitty part with microservices is when you need bulk data that needs to be expanded across a set of them monoliths excel at this as it just becomes a db operation and some serialization. microservices it turns into several db operations and several serializations with some perhaps required to wait for a child service to do theirs. so what should take maybe 300400ms takes about 34 seconds. middlewares can be created to speed that up but it'll still be quite a bit more expensive of a call and if caching can't be utilized at best it's just helping to stitch everything together asynchronously.;0
k5jxr9t;Reddit;2023-10-19 17:00:03;what i don't get is are these people actually engineers? there are antipatterns for sure but everything is a tradeoff and that's a more engineeringoriented way of thinking about problems. instead of microservices bad a healthier discussion is what are the tradeoffs or what systems benefit from this architecture and what don't? but i guess that doesn't get clicks.;0
k5i8hvo;Reddit;2023-10-19 06:51:04;httpsieeexplore.ieee.orgabstractdocument9717259 view the related studies in section 2b. also for example from the related works section test results have shown that clientoperated microservices indeed reduce infrastructure costs by 13 in comparison to standard monolithic architectures and in the case of services specifically designed for optimal scaling in the provideroperated cloud environment infrastructure costs were reduced by 77. and in the results section figures 5 and on show that microservices are capable of handling a higher throughput. microservices aren't the end all be all choice. they have their pros and cons.;0
k5i9p05;Reddit;2023-10-19 07:03:43;microservices are a solution to an organizational problem not a technical one. theyre a necessity when your organization grows horizontally to a scale that breaking apart your monolith will let your engineers continue to build new features and new products independently without conflict. but if youre content with vertical growth and dont want to expand your feature offerings and business footprint its just not necessary. the issue is that companies blindly copy the paradigm far before they ever reach that scale. but to say there is zero evidence for them being useful is just as dogmatic and ignorant. youre not going to build a website that does as many things as say amazon with a monolith.;0
k5i0q1y;Reddit;2023-10-19 05:37:31;i am not dogmatic for or against. about 5 years into my career having worked exclusively with what are considered microservices i have been curious to build different products in my space with a more monolithic approach to reduce network hop latency. playing devils advocate off the top of my head breaking a monolith into smaller microservices would allow simpler means of resource isolation and scaling. this being most useful for components with very different resource utilization. seems heavy handed to say there is zero evidence of benefits. curious to hear your thoughts.;0
k5i6qor;Reddit;2023-10-19 06:33:30;as a note i am 100 team monolith. i think they're simpler and easier to work with for the average team. but i do think there are still a few real benefits to them. the biggest one would be package versioning smaller services means each service takes on fewer dependencies and even common dependencies may use them differently making one safesimple to update while a different service may want to defer the update. of course this is doubleedged sword because if a critical must update situation happens like some critical rce security bug it means more opportunities to miss the update on one service and cause massive errors. there are also more minor issues like how smaller services make it easier to manage build times or how in larger companies it's easier to have smaller teams with clear ownership over specific codebases. and while complete knowledge silo's are a bad thing they still exist just as often in monoliths and what usually ends up happening is some small group ends up in control over something everyone has to touch and it's constant hell. so microservices help avoid that situation theoretically. the biggest problem with microservices is people like to fantasize about nebulous concepts like scaling but don't have the faintest idea of what that actually means. they imagine that spinning up a microservice instance is like lifting a pebble while spinning up a monolith instance is like picking up a cinderblock but like compiled code is small monolithic instances horizontally scale equally as well for like 99 of use cases. the only real aspect regarding scaling that ends up being a relevant bottleneck most of the time is data storage. but distributed data stores are hard and very few people can properly design one that works in the first place while approximately zero people can design one that's resilient to future changes in requirements. you only want to do this when it's absolutely necessary. and i find most companies doing this are operating more along the lines of wow my application that reads the entire database into memory isn't scaling well i should split it into microservices! you're much better off fixing your garbage sql lol;0
k5j0u58;Reddit;2023-10-19 12:41:50;services typically come with team growth and you can't always have everyone working on the same monolith in the same repo. it is not only a logic scaling but a people scaling measure. services are also a horizontal scale rather than vertical you can isolate high memory high processing services from dragging the entire system down. services really showed their power when aws was created and the infamous bezos requirementhttpskonghq.comblogenterpriseapimandate to integrate teams not down to every line but to touchintegration points only. what you do inside that service shouldn't matter as long as the signaturesintegration points are simple and abstracted. this could be an inproc service or networked it doesn't matter but each project will tell you what it needs to be. watch how naming changes people's perceptions. when a service is an api people are fine with it when a service is called a microservice it is suddenly tabs vs spaces braces on same lines or next line or which ide to use. a service or api doesn't have to be networked it can be local. every project is different and if you architect things simple generically and have clean integration points the guts don't matter only the abstractions do. a microservice could even be a monolith inside of that no one cares. just as long as you have clean architecture with some abstractions to keep integration points simple. lots of companiesproducts have serious problems with the guts of an app not being abstractedencapsulated and you end up with a mess either way. looking at you unityhttpsgarry.netpostsunity2020. when you are doing services just call them apis it will be an easier battle. the bigger problem is software today is way too culty and religious. mckinsey consultcult agile that killed agility is definitely a cult on every level.;0
k5iactz;Reddit;2023-10-19 07:10:38;microservice monorepo is just decoupling tight coupling for webdevs. the answer is somewhere in the middle. you can have a decoupled monorepo in theory but you won't;0
k5jkudx;Reddit;2023-10-19 15:34:51;first of all there is no such thing as a microservice. it's just a service. we've had them all along we break apart larger programs into separate services all the time for pragmatic reasons minus the dogma. this is completely incorrect. µservice architecture is a specific type of architecture and isn't just splitting an app into separate services. what µservice architecture actually consists of are services that have their own database and all queries are done to their own database. another key component are events. when some operation happens a µservice will publish an event. other services that care about that event will consume that event and update their database accordingly. data redundancy is both accepted and expected. so there is no need for a µservice to make a synchronous call to another µservice because it already has the information in its own database. independent deployment and development is very easy to achieve with this architecture because only the contents of the events matter. and those are very easy to keep backward compatible you simply never remove information from them only add. the problem is people misunderstood µservice architecture and so what they call µservices is just whatever they ended up with after breaking up their monolith. so the term µservice has become super generic and has really lost all meaning. when someone says they use µservices you have to ask them what they mean.;0
k5jpozt;Reddit;2023-10-19 16:07:54;if hosting all your services on the same hardware was an assumption for your microservice architecture why did you even use microservices?;0
k5ipcm4;Reddit;2023-10-19 10:14:07;hi we have some stuff here around commitperformance. httpsitnext.iomicroservicescanbesimpleifweletthema481d617a0a1c448httpsitnext.iomicroservicescanbesimpleifweletthema481d617a0a1c448 generally you would be bottlenecked by your follower's ability to merge the changes being communicated. we can't give you specifics as that depends on too many factors to be meaningful.;0
k5in5ii;Reddit;2023-10-19 09:44:20;i don't think we're being unfair because we're selling something that we worked on i'm not saying you should be providing your code. i am saying that the article is bad. i didn't really learn anything from it and i don't know much about monolith vs microservices apart from the very major difference that is pretty apparent from the names. so from that and you saying we have a product it just turns into a bad ad and reddit allows those if you pay them for it. either you are too deep in the thing so that it is hard to write a good clear article andor you don't want to spare details. vagueness doesn't help.;0
k5l5aho;Reddit;2023-10-19 21:22:59;out of curiosity how often does breaking out a microservice from a monolith run into the redblue problem? as in suddenly a whole host of stuff which was regular calls needs to become async?;0
k5io2yk;Reddit;2023-10-19 09:56:50;ever see a layoff that results in more microservices than developers? it's a hoot.;0
k5jpqjy;Reddit;2023-10-19 16:08:12;you know and understand conways law but in my world the communication structure of an existing mature organisation never changes. for this reason i advise not to use microservices but in very specific contexts. i wonder why your conclusion is exactly the opposite.;0
k5jj7zg;Reddit;2023-10-19 15:23:18;the shitty part with microservices is when you need bulk data that needs to be expanded across a set of them monoliths excel at this as it just becomes a db operation and some serialization. microservices it turns into several db operations and several serializations with some perhaps required to wait for a child service to do theirs. what you are describing is not µservices you are describing a distributed monolith.;0
k674ho5;Reddit;2023-10-24 04:33:04;µservice dude just say microservices. most people have no idea what µ stands for.;0
k5i5ylv;Reddit;2023-10-19 06:25:41;as someone who only has basic knowledge of it like i know what programming is cloud server less etc what they do but not the how... if i wanted to build an app planning for future growth should i build it using microservices right now?;0
k5id0u2;Reddit;2023-10-19 07:40:08;how would you tell clickbait bullshit from the genuine? by demonstrating how your ideas work on real projects that affect real products. while this may be a great idea it just reads like a bunch of buzz word soup with terms i vaguely remember from college sprinkled in. there's no concrete problem this tech has solved and to couch it all in we've solved microservices is a bit of a farfetched claim to make.;0
k5ii2wd;Reddit;2023-10-19 08:39:29;infrastructure costs down staffing costs up. microservice everything and trigger layoffs.;0
k5no8ej;Reddit;2023-10-20 08:39:52;httpsieeexplore.ieee.orgabstractdocument9717259httpsieeexplore.ieee.orgabstractdocument9717259 nothing in that paperhttps makes any sense. for the monolithic architecture they correctly load balance two servers behind an elb although they screw it up by putting both in the same az. in the microservices based architecture? they have a gateway that isn't load balanced and the second service somehow lacks redundancy entirely. and i see no possible way this service is cheaper than the monoliththat's simply false. look at figure 1 verses figure 2 how on earth do they spend less on more larger servers than the monolithic environment? simply put it cannot be correct. and that's setting aside the fact that to achieve similar redundancy to the monolith the microservicesbased architecture needs at least two more boxes to achieve similar redundancy. on top of this? there's now three separate services to scale ipc to manage between all three and huge issues to address when any of those three services go down. absolutely nothing about this paper makes any sense at all. props to you for bringing evidence but it's questionable evidence at best.;0
k5iqot5;Reddit;2023-10-19 10:32:16;they can absolutely be for technical reasons! a high memory low usage function in a monolith means that your instance size needs to be scaled to that size for the entire load of the system where as in a microservice you can have a small number of machines scaled up in memory size and the rest can ve cheaper;0
k5ips7t;Reddit;2023-10-19 10:20:00;microservices are a solution to an organizational problem not a technical one. theyre a necessity when your organization grows horizontally to a scale that breaking apart your monolith will let your engineers continue to build new features and new products independently without conflict. theres another trick to achieve the same goal modules. the problem with regular modules is properly enforcing boundaries. with a disciplined enough team the various components of the monoliths are nicely separated with a small interface and few to no crosscutting hacks. on the other hand its all too easy to just throw a global variable possibly disguised as a singleton here a couple mutexes and locks there and next thing you know you have a big ball of mud. with microservices those hacks are not quite possible any more so we have to do it the proper way. but even then were not out of the woods if the microservice framework is easy enough to use there wont be much incentive to keep services interfaces small so were somewhat back to needing discipline. if the microservice framework is a hassle maybe well keep interfaces small because making them any bigger than they need to be is such a pain but i being a hassle is such an obvious waste of time and ii now were tempted to make services bigger just to avoid the service part and youd end up with either duplicated functionality or using common libraries. common libraries can be kind of awesome by the way if theyre developed in the spirit of being third party even though theyre not theyll need to provide a proper api and any ugly hack like sharing state between this library and that application is i more difficult and ii much more visible.;0
k5i34wi;Reddit;2023-10-19 05:59:05;off the top of my head breaking a monolith into smaller microservices would allow simpler means of resource isolation and scaling. not simpler. potentially more options when you want to scale portions of the app independently. in other words more knobs you can turn. and also more options at deploy time. this comes at an obvious cost in terms of complexity odd failures network hop latency as you say odd queuingdistributed computing systems etc. and it can easily come with massive deploy time complexity that most teams seriously underestimate in my experience. the reality is you get some additional options to scalereleasedevelop at an enormous cost to complexity. this being most useful for components with very different resource utilization. well yes but we've been breaking apart programs like this for nearly three decades now. we didn't need microservices to make it clear that if two things require very different resources andor scale then it may make sense to break it apart. this is pragmatism and i'm all for it. what i'm not for is mindlessly decomposing a monolith without any clear reason to do so. seems heavy handed to say there is zero evidence of benefits find me any study of the efficacy of these architectures or some experiment that clearly shows their benefits. any decent data even. like i said i have actively looked and i would welcome evidence contrary to my opinion here. hell i'd welcome any evidence at all.;0
k5iep3r;Reddit;2023-10-19 07:59:05;and i find most companies doing this are operating more along the lines of wow my application that reads the entire database into memory isn't scaling well i should split it into microservices! you're much better off fixing your garbage sql lol you just described one of my clients. they will not listen to reason.;0
k5koqlb;Reddit;2023-10-19 19:43:17;and i find most companies doing this are operating more along the lines of wow my application that reads the entire database into memory isn't scaling well i should split it into microservices! you're much better off fixing your garbage sql lol i am in physical pain;0
k5nlp3r;Reddit;2023-10-20 08:09:39;services typically come with team growth and you can't always have everyone working on the same monolith in the same repo. it is not only a logic scaling but a people scaling measure. this i actually agree with but i think this size is when your department is in the hundreds and you have enough spare engineering to properly invest in a foundation to do a microservices based architecture correctly. and that includes not only correct in a technical sense but also in terms of how to divide the monolith in a sensible way.;0
k5hzinh;Reddit;2023-10-19 05:27:03;the entire discussion presupposes that ideologically ripping apart what once was a coherent program into microservices is a sane course of action.;0
k5nljy9;Reddit;2023-10-20 08:08:00;this is completely incorrect. yes i've heard the points you make repeatedly and i categorically disagree. i think you're completely incorrect about all of these points. plenty of separate services have their own databases eventing systems etc. there is literally nothing special about microservices and it is nothing new.;0
k5r47uk;Reddit;2023-10-21 00:25:19;you're arguing against something i never said. of course you can have microservices without network calls.;0
k5ke7rr;Reddit;2023-10-19 18:40:24;its about deployment. things aren't everything or nothing. i haven't done micro services yet but the idea isn't to turn all method calls to network calls. my monolith is referencing inhouse nuget packages. if these dlls change then i have to redeploy the web app. i work in a super big enterprise company. we have a team in the company that requires logs sent to them. they just changed how they did it and now we have to adapt. i am looking to move all this to a microservice web api . so when it changes again i dont have to redeploy my entire app which because i work is super big and heavily regulated enterprise means the entire huge app has to go through testing and sign offs and forms filled out why. the small service would not. it would be easy. so its decoupled in the sense that i can deploy that without any other interference.;0
k5i6cmw;Reddit;2023-10-19 06:29:34;a year ago i would have told you not to do it. now i would ask you if you have large enough teams that warrant microservices or not. if you do they can help with managing the nontechnical aspects of them. if you don't they bring in extra complexity even if you use our software.;0
k5iivbp;Reddit;2023-10-19 08:49:20;no unless your situation was somehow specifically very favorable to microservices. new products need to be built quickly by a small team. microservices add overhead in all kinds of ways. for example if youre in a big company you may need to do securityops paperwork to get the things you need to launch. you may need to do this for each microservice. as you build out the app you need to do more and more of these but if you had a monolith you could just do it once. in a monolith more stuff just works and overhead is limited to one service. its worth nothing that say your new application has 10 concerns a..j. if concern j scales massively differently than ai you can do your initial prototyping as a monolith and then break j out into its own microservice as you get closer to launch date but keep a..i in the monolith. this is how i see things generally work in real life. if a new k feature is requested then if its small it can be added to the monolith to keep dates aggressive. if scaling costs become an issue maybe you break out concerns d and e to a microservice a couple years down the line.;0
k5ikk79;Reddit;2023-10-19 09:10:18;im interested in the empirical evidence monoliths are better? im not sure how you would even conduct studies on such a broad question. what is better ? is it cheaperfastermore redundantless complex to buildrun. making a statement like microservices have no benefit and there is no evidence they do is completely asinine and not even worth debating. i dont actually believe in them but do think breaking up your software into smaller components alongside domain boundaries increase the resilience and reduces the complexity which is a good enough reason. whether other more seasoned engineers decide to break things down even further at much larger companies is for them to decide.;0
k5id3yj;Reddit;2023-10-19 07:41:06;it's moot anyway as i can show a monolith that is cheaper to run than these scale optimized microservices. it's all about the underlying decisions...;0
k5ir63z;Reddit;2023-10-19 10:38:53;if whatever you're creating will be able to be hosted on a single machine to cover all the needs you absolutely should not even think about microservices. even theoretical benefits only start to outweigh the costs at much larger scale.;0
k5ol4y5;Reddit;2023-10-20 14:46:52;from my personal experience the thing with microservices is they can be cheaper or they can be higher throughput but potentially not both. in one of the teams i've worked in my career we had several services that received validated and stored several different event types. these services needed to be extremely light weight handling hundreds of millions of requests per day with response times to the clients in the hundreds of milliseconds. to accomplish this we horizontally scaled hundred of very small instances. the workload for those services were bound by the number of threads we could use. we had another service that was extremely compute heavy running all sorts of analytics on the data we'd received as well as other data that our team owned. how often these hosts ran was determined by a scheduler. that meant that in order to process all the analytics in a reasonable time frame we had to scale up vertically using expensive ec2 hosts that were designed for compute. if we had a monolith the first few services might not satisfy the sla of only a few hundred milliseconds as they could potentially be waiting for resources taken up by other services we had 20 in total. our ec2 bill was cheaper as well because we didn't have to scale up all the hosts to be able to handle the compute heavy workload. we were able to use a small number of expensive instances with hundreds of small instances to handle the other parts of our workload. without the time to read too deep into the link you posted that's what it looks like is happening in the paper you linked. to scale up everything had to be c4 large instances vs the microservices approach you could scale up t2 and m3 instances and need less of the c4xl. it doesn't seem like they give exact numbers of how many of each instance from a quick glance through. also from personal experience microservices benefit isn't redundancy but rather fault tolerance. we had several services designed for creating reports based off the analytics computed by the previous service. we had different services due to the different types of consumers we had. at one point we began to get so much load on one of the services that it started falling over due to an out of memory bug. instead of our whole reporting dashboard going down only one kind of report was unavailable. imo that issue was easier to debug because we instantly knew where to look in the code instead of trying to dig through an entire monolith trying to figure out where the out of memory issue could have been occurring. scaling multiple kinds of services is a pain in the ass i won't deny that. i always hated that part of that job. in that paper they do call out that the microservice is load balanced in the case of microservice variants additional components were added to enable horizontal scaling namely the application was extended to use sprint cloud framework which includes zuul load balancer spring cloud config and eureka5 a registry providing service discovery.;0
k5j3fzs;Reddit;2023-10-19 13:09:52;the hallmark of microservices is state persistence isolation. from my experience the problem i saw the most with proper enforcement of module boundaries is the shared database without schemas per module. if you couple at the data level to the extent of sharing database schema i kinda get why people go all out and spin off the module into a dedicated service the investment and risk to untangle the data under the existing conditions is higher than developing a new service. all in all i attribute a lot of discussion about microservices to the simple fact that developers simply forgot that dbo isn't the only available schema in a relational database. the organizational complexity is a necessary but not sufficient requirement for microservices i expect to see an additional reason such as publicprivate facing services think of public eshop site and private erp backend or large discrepancy between used resources e.g. aforementioned erp backend running on a database and couple of worker nodes with load balancer and a cpubound service wanting to run for a short period of time possibly on hundreds of nodes in parallel. it really boils down to choosing the simplest option not necessarily the easiest. if you need to purely solve organizational scaling try modules first. if you have a dramatically discrepant resource needs that would possibly impinge on shared resources or want to limit the surfacescope due to security reasons or similar nonfunctional requirements only then isolate it out to a dedicated microservice.;0
k5i7960;Reddit;2023-10-19 06:38:31;certainly its a tradeoff as it always is. that doesnt mean the tradeoff is not a good one. i would argue there are cases when it outright is simpler. if i have a memorybound subcomponent and cpubound subcomponent it can be pretty trivial to load test these applications and find suitable hardware configurations for them. this pays when it comes to cost among other things like dynamic scaling or service predictability. i do see what you are saying and i think i understand where youre coming from which is the intent behind sharing my interest of building something where the usecase fits. i did search for some examples on google scholar but also suddenly realized i should just suggest marc brooker from amazon. youve probably heard of him but if you brought this up with him i think you get a fun or maybe not so much debate. all in all i appreciate you taking the time to send a thoughtful response. i think theres merit to the microservices paradigm and monolithic paradigm. i put it in es because i understand its not exactly new just because weve now named it;0
k5p4cwo;Reddit;2023-10-20 16:56:18;in some cases yes. in other cases it is easier to implement prior to hypergrowth because by then you have feature pump and the micromanagement zealots in and actually getting time to do this is not granted. in fact anyone trying to work on this will be seen as someone trying to slow things down or a suppressive person to the hypergrowth cult. the decision to move to horizontal apisservices has to have buyin from the top before the zealots and culty feature pump get in. by then it is too late and you it will be death by a thousand cuts. only companies that care about research development techproduct teams separate from live teams andor small enough teams that have some agility can pull this off. it is why they have such a bad perception in favor of the big ball monolith. also people have differing opinions on what a monolith is and what microservices are so it ends up people not even on the same page. if you just start with apis and clean simple integration points it is much easier to sheath off parts into a service setup. if you have bad abstractions and no integration points and really no clear architecture from the start it is near impossible without stopping all time and the universe. i have seen groups have monoliths and microservices for instance all go back to the same single point of failure datastore so really just a front of both and a mishmash of coupling at the data level. they are usually stuck there forever ad infinitum. the goal would be everything as simple as possible but even the amount of tests one company have can cause these efforts to fail due to too much weight later in the game. early architecture predicts how later architecture will be and if it doesn't start off right it will end badly.;0
k5i00aw;Reddit;2023-10-19 05:31:16;i don't think having more independent software teams is a bad idea except for the consistent datasharing aspects. i think it's a good idea to build software with smallish teams but i have spent much of my career advocating against it as it overwhelmingly leads to stability issues. i even have a series of articles on the consistency problems distributed systems face aimed at the average engineer. it starts here httpsmedium.comandrasgerlitswhydoesdevelopingmicroserviceslooksoeasyifitssohardd72a28ce7be1 there's a clear demand for dividing a large monolith into separate modules but it leaves a technical problem. this is the technical problem we're solving.;0
k5icnvd;Reddit;2023-10-19 07:36:00;there are some simpler introductions this is a very hard paper to read. i link two if them in the article above. the point is that clocks emerge from groups passing around an idempotent tokenmessage. this yields a loop within which each node can assign timestamps locally without having to block its state. this is explained here httpsitnext.iomicroservicescanbesimpleifweletthema481d617a0a1 the last problem we have besides the clock is resolving clashing writeconflicts. to accomplish this we show that you only need a shared algorithm to be available that deterministically decides which one the winner use between any two transactionobjects. this is where we use crdts. once you put these two together you have a fully non blocking platform that can stream data consistently and resolve clashes without blocking. it also allows deterministic state replication so we can create replicas trivially does this help? happy to give more specific details to specific questions;0
k5m94m0;Reddit;2023-10-20 01:38:24;my current company has a massive mono repo and my last company had hundreds of individual repos. both have a massive mesh of microservices. from my pov as a dev theres effectively no difference. in both roles i could pull in any code i wanted and define projects and services anywhere i wanted. i think when people hear monorepo they assume single monolithic app but in reality as long as your builddeploy tools allow for it you should be able to define and compose individual apps within your monorepo anywhere in the codebase.;0
k5i58pb;Reddit;2023-10-19 06:18:46;sounds like strong but still eventual consistency which is the best you can achieve with multi masterwrite sql setups that don't involve locking. are you leveraging crdts or anything like that to deterministically arrive at the same state in all replicas? if multiple servicesprocesses are allowed to write to the same tables you're in distributed monolith territory and naive eventual consistency isn't sufficient for all use cases. if they can't it's just microservices with sql as the protocol. i will check out the paper but appreciate the responses in the meantime;0
k5i73dy;Reddit;2023-10-19 06:36:56;so at the beginning if it's a simple app don't use microservices. when it's large enough to need microservices then switch? i want to ask more questions but i think i need to provide a lot more context before asking or even for the last question? thanks!;0
k5it4xc;Reddit;2023-10-19 11:05:20;i mean aws has been pushing really hard for microservices and they published this blog post earlier this year https;0
k5rm8pk;Reddit;2023-10-21 02:35:19;in that paper they do call out that the microservice is load balanced in the case of microservice variants additional components were added to enable horizontal scaling namely the application was extended to use sprint cloud framework which includes zuul load balancer spring cloud config and eureka5 a registry providing service discovery. the problem isn't load balancing per say but redundancy. for each of the three services ideally they have minimum two boxes in separate azs for redundancy. two of their microservices lack this redundancy entirely. also even setting aside this glaring issue the math still doesn't add up. again explain how the paper reconciles figure 1 somehow having a higher aws bill than figure 2. simply put i do not buy their cost claims even in the slightest. x200b if we had a monolith the first few services might not satisfy the sla of only a few hundred milliseconds as they could potentially be waiting for resources taken up by other services we had 20 in total. what you're describing is just pragmatic services which i have zero qualms with. this is simply smart if you have very different workloads inside your application potentially with different scale requirements? it makes all the sense in the world to have separate services. i do this in my own application which processes terabytes of video per day. it would be absolutely insane to push that video through the monolith there is a separate service entirely that is dedicated to processing video. could you call this a microservice? yeah i suppose so. but it's based in pragmatismnot ideology. what i am opposed to is this fad of mindlessly decomposing a monolith or god forbid writing an application from scratch across microservices before anyone even knows if it's necessary.;0
k5ijc5y;Reddit;2023-10-19 08:55:07;ushootyoureyeout 's key point is what i'm not for is mindlessly decomposing a monolith without any clear reason to do so. if you are making a conscious tradeoff that's fine. but that has not been the message from the microservices camp over the years. they've been running on a message of monolithbad microgood with little no discussion of tradeoffs for years. even calling microservices a paradigm betrays how it has become a dogma. it turns it into this overarching framework which everything has to fit into. it is like a tradesman saying they are going to build a house using the hammer and nail paradigm where every problem is going to be treated as a nail. if we stop thinking in terms of microservices or monoliths and just realise that building or splitting off separate services is just another tool in our toolbox then the paradigm of microservices goes away and we can think about solving the real problems i.e. doing engineering.;0
k5lm6id;Reddit;2023-10-19 23:05:07;your monolith application should probably be asynceventdriven anyways. even a local database call can take a long time. better to throw it on a separate thread and handle it when the response comes in. if you're throwing it on another thread you're already doing async development. you're not totally wrong though. there is going to be some refactoring. no one just copypastes their library into a microservice and has it work overnight in the original application. but ideally the refactoring doesn't require a huge refactoring.;0
k5ixpf6;Reddit;2023-10-19 12:05:06;not op but there's a someone'slaw don't remember who coined it that says all software systems eventually converge to reflect the organizational structure of the companies developing them. i fully agree with the answer op gave above but the nuance is what is the beginning and what is simple. as a rule by far the most cost efficient thing you could do if you're a company that doesn't have massive vc budget and isn't busy inventing problems just to justify spending it is to design your system in a way that starts as a trunk which can later be split into smaller microservices and can be added to dynamically. however there are many factors to consider here. if you're not planning to to expand beyond a few hundred thousand users within a few years there is usually 0 need to add the massive costs mainly dev time but at some point also financial overhead that microservices bring with them. if your system is going to be readheavy but not writeheavy you can probably expand that limit to couple of millions as long as you properly utilize horizontal scaling and readonly db replication again those are easily achievable without microservices. if most of your heavy operations can be offloaded to backgroundrunning jobs via some queue then you can usually separate those jobs from your regular application servers which again alleviates that workload from them but if they're write heavy remember that the db still bears that cost. there are many more scaling strategies that don't require microservices that can be mentioned here but in short be aware that you can scale a lot and i mean a lot more than 95 of the technology companies in the world would ever need before microservices are something the easiest next step to scaling your system. here's how pintrest scaled to 11 usershttpsengineercodex.substack.comphowpinterestscaledto11million almost a decade ago with a tiny engineering team less efficient hardware and less convenient technologies than we have today and no micro service in sight.;0
k5ientq;Reddit;2023-10-19 07:58:41;imo the barriers to microservices stated differently managing more than one service are fixedupfront infra cost ops skills and versioning hell. with a sufficiently largedifferentiated team those should be mitigated. at sufficiently large scale the fixed infra cost should be dwarfed by variablescalebased costs but the others don't automatically get mitigated. therefore if you're more sensitive to cloud bill than engineering cost and risk i could see how scale seems like the more important variable but if you're more sensitive to engineering cost and risk or imo have a more balanced understanding of cost team size and composition is a better indicator of whether or not to use microservices or to what extent. once you are set up to sanely manage more than one service cattle not pets the costrisk of managing 10 isn't much greater than managing 3. if your scale is so low that the fixed overhead of a service dictates your architecture i hope you're a founding engineer at a bootstrapped startup or something otherwise there might be a problem with the business or premature cost optimization going on.;0
k6312uu;Reddit;2023-10-23 11:35:58;if that's what i think it is it's more a case against using the wrong technology rather than a concerted study of why monoliths are better than separated scaled services. their initial version was microservices as is it scaled their problemset saw huge returns in av processing by switching to scaled monoliths so they went for it. each worked well in their own situations and for their own reasons.;0
k5kl2ui;Reddit;2023-10-19 19:21:14;you said you host all your services on all your machines. how is that even microservices? you coupled your services in your deployment. its a monolith.;0
k5j9mxz;Reddit;2023-10-19 14:08:10;microservices can be a hugely computationally inefficient way to do things so they'll increase your variable costs too. if a single user action causes multiple services to have to do work then serdes and messaging overhead will dominate your application's cpu usage and it will be more difficult to write efficient database queries with a split out schema. also if you did find yourself in a situation where they'd make sense computationally you can just run a copy of your monolith configured to only serve specific requests so it makes sense to still code it as a monolith. there are also development costs to consider as people will waste more time debating which functionality should live in which service what apis should be etc. which will matter more since refactoring becomes near impossible. debugging is also a lot more difficult and expensive and you need things like distributed tracing and log aggregation which can cause massive costs on its own etc.;0
k5j9vqe;Reddit;2023-10-19 14:10:15;i doubt you can bc the real axes are something closer to wellbuilt and fresh not microservice vs monolith. amazon's famous monolith fix worked bc their microservice architecture was visibly silly. and most enterprises that successfully move to microservices do it as part of a modernization effort to replace old monoliths. and that's not even getting into what objectively demarcates a microservice vs monolith...;0
k5rjjpj;Reddit;2023-10-21 02:15:57;if whatever you're creating will be able to be hosted on a single machine to cover all the needs what about that said full product vs services to you? they said if you can do it on 1 machine then do it i can install sql server memcached haproxy stud and varnish on a server along with iis and it will run just fine. as soon as we went to production though those all got dedicated machines instead of cramming them all into a single machine like we did in our dev boxes. we weren't microservice by a longshot but we did serve australia's largest sporting sites with that infrastructure including the platform that handled the race that stops a nation which deals with an incredible spike of traffic for a 15 minute period once a year. i know we had qualified things by saying until you outgrow x but if you're using sql lite as your enterprise database i'd suggest you're doing it wrong. i was envisioning larger than hobbylevel projects for this discussion p;0
k5kdwka;Reddit;2023-10-19 18:38:33;i feel like you should be refuting this by steelmanning microservices rather than assuming the org that's doing them has no idea how to manage them or decide where service boundaries ought to be especially if you're steelmanning monoliths by assuming the org knows how to write it modularly enough that debugging change management scaling etc all the valid things that drove orgs to adopt microservices aren't extremely hard. you're describing a degree of segmentation that works really well with large multi team orgs but as though it's being done by a small team that's in over their heads and how has to debug across 10 service boundaries rather than a small team in a large org with many teams being able to trust x service they delegate to as if they're an external managed service with well documented apis and a dedicated team owning it. a small team in a small org can still use microservices architecture effectively and sanely the difference is the domain is broken up into far fewer services some like to call it macroservices;0
k5jer2z;Reddit;2023-10-19 14:49:39;yeah i agree so the comment i replied to which was asking for evidencestudies microservices work is ridiculous and i cant understand why it has so many upvotes. there are many factors into whether something had goodbad design. literally millions of decisions go into large projects and all have trade offs. you cant say something like x is bad there is no study that proves it works i would venture to say many many systems have been well designed and implemented with microservices.;0
k5oevi0;Reddit;2023-10-20 13:55:34;ah yes this would never happen with microservices;0
k5ksewu;Reddit;2023-10-19 20:05:16;how to write it modularly enough that debugging change management scaling etc all the valid things that drove orgs to adopt microservices aren't extremely hard. microservices don't help with modularity debugability or scalability though. they require those things be done well to not totally go up in flames. if you have a good microservice architecture defined you can just replace service with package and now you have a good monolith architecture. creating network boundaries adds strictly more work more computational overhead demanding more infrastructure more deployment complexity more code for communication more failure modes. it also makes the architecture much more rigid so you need to get the design correct up front. it's definitely not just a matter of some upfront costs and upskilling.;0
k5oh58z;Reddit;2023-10-20 14:14:55;my point is the decision is a lot more nuanced then monolith good and microservices bad;0
k7s1z6t;Reddit;2023-11-04 13:17:05;this is exactly the hell i've been experiencing on my current team. extreme adherence to microservices and other practices not entirely because it makes sense for the project but because that's the direction we've been given. deployment complexity is handled by a cloud build solution so that's nice.. if you get things typed up correctly the first time. otherwise it's 1015 minutes per attempt to deploy which burns valuable time. debugging is a fine art in itself but i'm the only one who does it everyone else just uses logs which hurts me at my core junior devs think i'm the crazy one because other senior devs are literally banging rocks together and saying running code locally isn't worth it. no automated tests at all so people break stuff and it's not found for weeks until it's moved up to a critical environment. no peer reviewing so junior code is moved up and pulled down without any eyes on it unless they happen to ask a question or show it i've asked for prs for years now. no performance testing at all. no documentation except what i create. not sure what to do. i will say that modularity and scalability seem fine because services have been siloed relatively well enough.. but this spaghetti monster of a project has so many winding parts that i have serious doubts about our ability to maintain it if we get a sudden huge change from our core business users don't get me started on onboarding a new dev. minor tweaks or shifts here or there will probably be fine but if they ask for a large change in how things work it feels like it could easily be hundreds of hours of work due to the complexity of the system... if we estimated tasks.;0
k5olj16;Reddit;2023-10-20 14:49:51;pretty sure every major tech company had services and microservices so that didn't save the from the outages. you are contradicting yourself here. im just pointing out areas where breaking software into services can be beneficial. i mean yeah sure services. but doing it for reliability is a completely different story. more often then not there is such interconnectedness of services that hardly a system can survive partitioning. imagine your account service is down well nothing that involves dealing with users can work which can be 100 of all other functionality.;0
k5obm5u;Reddit;2023-10-20 13:25:40;both micro services and monoliths can be garbage to work with or easy to work on. it all depends on how they are designed and structured. personally i feel like well designed microservices are easier. there' just so much extraneous nonsense that comes with a monolith that you just don't have to care about in a microservice architecture. i don't have to care that another team has a weird dependency that forces everyone into a specific version of java. i don't have to care that a third team needs a very specific file structure for their code to work or they need specific libraries or tools installed in specific places that i have to know in order to be able to test my code. conway's law is real. an architecture will reflect the communication structures of an organization. monoliths force a top heavy management structure where you rely on a ton of governance to ensure things continue to work together. microservices allow a more decentralized structure at the cost of higher overall operational complexity.;0
k5qd1ge;Reddit;2023-10-20 21:29:54;no but then there was no code in the monolith i worked on or at least none worth mention. it aggregated the various components from the different teams only. build time of it was irrelevant nobody was waiting for it. i realise what we did is a bit ... different from the average java app but let's not pretend that microservices are the only game in town that allows teams to work together independently. an api is an api just make sure the dependencies are static and not shared you get that for free if you're willing to spin up an entire vm and don't mind incurring several orders of magnitude more call overhead but there are others way to achieve the same. in fact osgi is another alternative that can provide similar benefits with classloader separation instead of shading and i am sure there are more.;0
k5sqi2y;Reddit;2023-10-21 08:47:17;my point is that monoliths are great but there are real practical limitations to them where it really starts making sense to introduce network separation. one example is that you might want to introduce specialised hardware for certain use casese.g. gpus for machine learning introducing it for one team introduces for everyone which is really expensive. maybe another team needs a specialised library in c and introducing a jni dependency means that now everyone has to account for crashes due to memory errors in their design. you can't have dedicated ops people per team because they have to operate the entire thing with no exceptions. microservices are even used in extreme low latency architectures like hftalbeit they look nothing like traditional ones. in terms of debugging assuming you have distributed tracing in place microservices are honestly easier to debug.;0
k5opuag;Reddit;2023-10-20 15:21:27;what did they do to get such nonsense? i have seen such things happen with reflection... my point is that without strict governance things can get out of hand pretty quickly. whatever you do in microservices is limited to your team. you can fuck up anything that doesn't mean that there aren't benefits for a good implementation.;0
