ID;Source;Creation Date;Content;Sentiment
37477095;HackerNews;2023-09-12;Title:Death by a Thousand Microservices, Content: https://renegadeotter.com/2023/09/10/death-by-a-thousand-microservices.html;0

37500735;HackerNews;2023-09-13;if you use a language on the beam virtual machine like the article hints at whatsapp erlang you get the best of both worlds. every process is ostensibly a microservice. so not quite the same a a rails or javaspring monolith.;0
37493557;HackerNews;2023-09-13;i think you misunderstood what i said which is you still have databases and ergo need to manage migrations and such only that this now typically falls to the specific teams.that said loads of folks do microservices with a shared db.;0
37489799;HackerNews;2023-09-13;that seems like a great approach for netflix and investing in a resilient redundant tier 0 service like that was likely worth it theremost orgs don't operate on that scale though and resources would likely be better spent elsewhere microservices is very intertwined with how your engineering teams are built.i wish more people understood this. microservices are much more about scaling your organization than about scaling technology. at a certain size teams can't collaborate effectively enough and splitting out different services for each team makes a lot of sense;0
37489691;HackerNews;2023-09-13;architecture and software design are seen as antiquated but discussing microservices and monorepos are somehow seen as relevant and important.;0
37488778;HackerNews;2023-09-12;picturing a realworld situation here in my recent past...we start with the pinnacle of engineering a spa could be built in react vue whichever.it loads which on slower smartphones takes a long time as they suck in running js. when it's booted there's nothing there. it has to reach out for data.and so it does to the microservice. which might start doing something in 20ms or 200ms it's all very intermittent due to excessive virtualization. it can't just go and return the data no...it has to take the authentication token that was passed in and authenticate it with yet another service which is vendor managed and even slower. then there's rate limiting logging all types of overhead. eventually it returns 3 product rows.sadly though for each of the product items we have to make an individual call to get related data part of it coming from yet another microservice. all of these calls having their own startup time authentication and overhead.so for what one might call a classic join we're into multisecond territory. which is fatal territory. not to mention the shit state of data as it's all nosql garbage. mind you this is about 110th of what users are supposed to see on the initial dashboard.we're talking one tiny part of a small to midsized app. it all costs a fortune and it produces garbage that users hate.old dinosaur me used to code up a crud app like this by the dozens. using lamp .net whichever. performance would be nearinstant i wouldn't allow any query response time to go over 10ms.every part of our stack is bestpractise and enterprisegrade. and it just doesn't fucking work. it's 10 times more expensive and 100 times slower whilst the very idea of such an app is that it's supposed to be more interactiveresponsive compared to the traditional stacks.luckily though these services are multiclient. except they're not because then the mobile app team needs different data and it's all just bolted on to the generic service. services teams independence is a problem not a solution. plan a ui feature and good luck getting it orchestrated across teams each having their own roadmap.and let's end with comedy gold where lamda developers now need to calculate the running costs of their logic line by line. whoops slightly inefficient loop that'll be 30 extra per month on the bill. now scale that problem to dozens of such developers building hundreds of services.what a joke we've become. distributed computing is an error not an architecture. the point of computing is to put compute and data as closely together as possible. as the brightest minds on the planet deliver in stunning hardware advances which us software developers piss away.but hey the god of complexity pays well and those footing the bill have no idea what we're doing but it does sound impressive.;0
37488212;HackerNews;2023-09-12;splitting a system into subsystems allows each team to focus on their piece of the puzzle while minimizing the amount of peertopeer coordination.the coordination is still there because a microservice team does not live in a vacuum. they build services based on demand from other teams that typically build web apps mobile apps sometimes servertoserver.hence the independent team now becomes a roadblock for higher order features.;0
37486198;HackerNews;2023-09-12;sure teams in large organizations allow other teams to randomly create folders? also i've rarely seen an internal code base that is easy to grasp. you can create your own microservice and set up an api in 15th of the time it takes to understand a foreign code base and make a small adjustment.;0
37486147;HackerNews;2023-09-12;exactly i missed this completely in the article. in my experience microservices attempt to solve organizational problems and not technical problems. there are technical downsides to microservices that may be outweighed by organizational benefits. with monoliths you might have a large amount of hidden opportunity cost that technically never surface.i do agree that this is less of a problem for startups so it doesn't make sense to start with a complex microservice architecture. but in large organizations especially corporates it absolutely makes sense.;0
37486028;HackerNews;2023-09-12;right. but you likely split the db for performance not just for decoupling data and code. microservices is an option for scaling. my argument is more against it as a way to decouple and organize logic.;0
37485111;HackerNews;2023-09-12;thank you. i sometimes feel microservices are an evolution of conways law. how a company sees its internal organisation is how it will want to arrange its microservices and vice versa.i remember trying to build out a barium bullet through very complex intertwined systems following known customer data and looking for their footprints in all linked systems. it gave some insights on how to redesign systems like someone else said here removing complexity is ridiculously hard.;0
37484017;HackerNews;2023-09-12;i do not like appeal to authority either. but based on my experience most of these issues were resolved in one to two meetings i said maybe one after all.the team that needs data goes to the team that has that data and says can you make an api that vends the data that i need?. then they make it. and then maybe there is another meeting with a follow up or perhaps an email asking for the data to be presented slightly differently.but if you come to a team with a good use case and some examples it shouldn't be too hard for them to create an api that vends the data appropriately.this of course is all predicated on a good microservices architecture where you already have systems in place to handle api discovery and communication between services and proper data separation.;0
37483721;HackerNews;2023-09-12;yes. but that idea got lost in the fray.i don't think so. one of the very first things that people learn when onboarding into microservices is the microservices tax whose corollary is don't onboard onto microservices if there isn't a clear significant win that justifies all the tradeoffs.moreover the main selling point of microservices is organizational. that's also right in the first lesson on microservices. if you're not working in a large team who owns a large project and wants to lower managerial overhead by splitting up the team you need to try very hard to find a justification to peel off specific responsibilities from a service into an independent microservice. that's microservices 101.those who jump onto the microservicss bandwagon without having a concrete justification have only themselves to blame and not any particular architectural style. they are making the piss poor decisions and blaming abstract concepts for their own mistakes.;0
37483385;HackerNews;2023-09-12;our large org has been familiar with the 1 db approach for over a decade. at some point the need for microservices became clear and years after that they actually switched. even our subteam is feeling the need to divide up our service because its scope has kept expanding.startups shouldn't start with microservices. i've worked for or led a few different ones and i've always created a monolith while avoiding other kinds of premature scaling sometimes even folder bro is overkill. doesn't mean i'd run things that way with 200 people owning systems with evolving requirements for 10 years or even three separate dev teams of 5 people.;0
37483317;HackerNews;2023-09-12;at netflix we had both noun and verb services. we had the play movie service which was very much verb as well as the listing service for example. but we also had the subscriber service which was the source of truth for any account data and the catalog service which held all the info about the movies.yes subscriber was a tier 0 service and required a strong reliability and scaling story. they had more rigorous deployment setup and were usually overscaled for traffic. but they also vended a library that services used to connect to them. that library had intelligent caching and fallbacks so that even if the service was down in a lot of cases the system could keep running. and the catalog was the same.microservices is very intertwined with how your engineering teams are built. we had a team that worked on subscriber data one that worked on catalog data one that worked on making movies play one that built listings. so we had services to match.;0
37483236;HackerNews;2023-09-12;that's the services model that facebook uses and parts of amazon use. a single data store surrounded by a bunch of small services with a prescribed data access layer.that's really more of a monolith though. one of the key tenants of microservices is data separation each service has its own data store.;0
37483227;HackerNews;2023-09-12;microservices job security for years to comeso please stop making these posts lol;0
37483186;HackerNews;2023-09-12;hm your ad hominem isn't really called for.obviously not ialli in government are stupid i was not implying this. i was rather suggesting that some are and that something might be done to avoid problems with that.also microservices can be great but when used in the wrong context obviously are not. we are not discussing that either.edit perhaps you may have misunderstood my comment and that may be due to my clumsy way of stating it. i was actually suggesting that companies ilearni from governments.;0
37483133;HackerNews;2023-09-12;yes. but that idea got lost in the fray. even i tried to build a system from scratch with microservices at one point.;0
37482978;HackerNews;2023-09-12;no worries. you didn't call the thread painful. that kind of comment causes heat. it doesn't belong here.of course it works. but you can do better.splitting data into several dbs when one db suffices is called extra work. good results can arise from extra work. but the extra work wasn't necessary.you have to think like this sure multiple dbs work. but would 1 db in it's place work just as well?the top commenter here from netflix one of the people who promoted the whole microservices thing is telling startups to go monolith for a reason.;0
37482755;HackerNews;2023-09-12;imho blaming the unexperienced javascript developers is unfair because in my experience mostly the senior java developers were the ones jumping on the hypercomplexity infrastructure bandwagon and embracing microservices as the logical next step after wrapping design patterns with design patterns in their code bases.;0
37482687;HackerNews;2023-09-12;the best microservice based system i've ever worked on was full ten years before the term had been invented. it had multiple services that read and wrote to the same database but each used a common dynamically linked library that was the common interface to access that database no naked sql was allowed you had to include ltfoo and then do foo foo foofindbyidxxx etc. worked remarkably well. the above common library was very carefully maintained and any addition had to be reviewed and approved. the approach seemed to work well.;0
37482467;HackerNews;2023-09-12;until you need to market to people who didn't get a shipping last month delay shipping until at least one recharge attempt or ship before charging for customers you're reasonably sure will pay anyway.these are all very simple things to handle when services encode processes instead of entities business changesyes and then you throw away the code for that outdated process and encode the new one. one global database buys you a lotabsolutely this is the correct choice for probably 95 of companies. i will always argue in favour of a monolith and single database.if someone is dead set on microservices though they'll avoid a world of pain by actually designing them properly;0
37481768;HackerNews;2023-09-12;the cited article from ken kantzer is also very good you dont need hundreds of engineers to build a great product. i wrote a longer piece about this but essentially despite the general stage of startup we audited being pretty similar the engineering team sizes varied a lot. surprisingly sometimes the most impressive products with the broadest scope of features were built by the smaller teams. and it was these same small but mighty teams that years later are crushing their markets.simple outperformed smart. as a selfadmitted elitist it pains me to say this but its true the startups we audited that are now doing the best usually had an almost brazenly keep it simple approach to engineering. cleverness for cleverness sake was abhorred. on the flip side the companies where we were like woah these folks are smart as hell for the most part kind of faded. generally the major footgun which i talk about more in a previous post on footguns that got a lot of places in trouble was the premature move to microservices architectures that relied on distributed computing and messagingheavy designs.;0
37481379;HackerNews;2023-09-12;the issue isn't blindly adopting microservices or a monolith as a religion or bikeshedding thereabouts.architectural and ops concerns lead to dividing an overall service into sufficient and necessary units of abstraction. to efficiently run more than 1 service leads to standardization of automation of the concerns of application platform infrastructure stateful data backup protection recovery configuration management os security authentication authorization audit encryption and identity management monitoring analytics rate limiting ab etc. feature tests sharded deploymentchopping up 1 service into many more services doesn't make the above concerns go away. neither does collapsing many into 1.the internal pieces and often interfaces between business units need to be broken down into decoupled units of abstraction. if people want to call that microservices or a monolith it's kind of irrelevant. containers of abstraction should serve a purpose rather than hinder it.;0
37481208;HackerNews;2023-09-12;i get the point about creating boundaries to document the dependencies however if your language supports packages and private keywords you can do that without having microservices.and once you've split up your app into lots of independent microservices who owns the arrows between the microservice boxes? the actual app .;0
37480991;HackerNews;2023-09-12;microservices are oversold. cios jump on the bandwagon because they read a couple of articles on line and think magic happens. the last company a spin off from a larger company in the financial sector i worked for before retiremnent decided to port their existing monolith to a cloudbased microservice platform. did they need it? no. the total customer count was projected to be 25 million or fewer with an average active user count in the low 1000s about 1800 when i left. but cloudmicroservices were sexier to the ownership group whose plan was to sell it in a couple of years. thus far they haven't succeeded and the microservice guru that succeeded me has been fired for failing to delivery a working product after three years. if a company isn't going to be operating at internet scale e.g. netflix facebook amazon there are usually better options than going all in on microservices. then again i've worked for companies that had no idea how many simultaneous users they had.;0
37480770;HackerNews;2023-09-12;i agree microservices are a itechnicali solution to a ipeoplei problem. stevey's seminal platforms rant touches on this the reason why dread pirate bezos mandated services was not because kubernetes was cool1 but because their teams were too interconnected moving too slowly and conway's law was getting in the way.splitting into services siloed each team and allowed them to move independently and by side effect faster. not due to inherent properties of micro services but because one goes faster by removing the things that slow you down.as a startup you do inoti have this problem. you likely will never have this problem as your default future state is 'dead'.do the simplest thing that can possibly work build a monolith using tools you know that give you the ability to predictably rapidly iterate on the product.after you hit some semblance of productmarket fit and need to scale you can do that. scaling is a solved problem. premature scaling is not.1. this is a joke. kubernetes wasn't even a thought in google's eye at this point in history;0
37480721;HackerNews;2023-09-12;goodness we're still arguing about microservices?microservices are simply another approach to solving a problem. another tool in the toolbelt.use it wisely as you would any other tool in your toolbelt.;0
37480536;HackerNews;2023-09-12;i think systems like this are prone to buckling under product pressure. if it takes a few minutes to override a lint rule it's bound to happen sooner or later. with a microservice system the amount of effort is genuinely higher to add crossdependencies.;0
37480518;HackerNews;2023-09-12;splitting a system into subsystems allows each team to focus on their piece of the puzzle while minimizing the amount of peertopeer coordination.assuming coupling is reasonable. if you have a distributed monolith you still end up with all the meetings because every microservice change risks breaking interfaces other people are using.in the context of coupling i'd argue the same applies to monoliths. multiple teams can successfully work on a monolith given architecture where they're not constantly stepping in each other's toes each team works mostly in their own modulesclassespackages;0
37480449;HackerNews;2023-09-12;i'd say javascript and node are responsible for a lot of evil in the world and they definitely had a role to play in microservices popularity.nobody was really doing microservices until there was kubernetes. i mean maybe some big shots who had a system similar to kubernetes but kubernetes enabled newcomers with small teams to be like the big guys. so kubernetes was the driver not node. but... kubernetes was built by web developers unlike docker for example. coming from systems background it's painfully obvious that people who built kubernetes didn't know how to system. and there are a lot of indicators that they essentially were building a system to support unwieldy web site deployments.kubernetes was the system built by devops who unsurprisingly are the result of web development. the whole idea of devops was called into existence by growing popularity of services. instead of selling software the market started selling service subscription from financial perspective subscription is hugely preferable to onetime sale.this drove a lot of products that didn't need to be services into the service space think google docs followed by office 360 adobe creative suit and so on. frequent internal releases fuel the competition between similar services but also necessitated devops. and this is how we also got shiftleft continuous deployment xasaservice etc.web by itself is not the reason these things appeared. it facilitated their appearance. the driver was the financial bonuses of subscription. web was the convenient mechanism. but this also means that web developers were those who made it happen. they were the first and the largest group of programmers who moved into devops. they were the people who created kubernetes and a lot of programs in its immediate environment. not surprisingly they also used the tools common in web for their work.had kubernetes being started by system people go would've been an unlikely choice for the language c would be the most likely candidate followed by c or maybe even python. yaml wouldn't have been the choice of configuration language it's very common in system world to roll your own if ini doesn't work. it's because web developers built kubernetes it's networking storage user permission model... are all super naive and wrong they were designed by people who used to consume them not by people who used to develop them and they simply didn't know how they work on a more fundamental level.a lot of complexity of kubernetes and by extension of the microservice world can be explained by the lack of experience of people who built it with how system software is usually built. and yes web programmers are the one responsible for it. although perhaps node specifically had little to do with it.;0
37480443;HackerNews;2023-09-12;microservices takes at least 25 of your engineering time just maintaining the platform. it's not worth it unless you can recoup that 25 in efficiency.my take is microservices multiply your operational problems so you need a really solid platforminfrastructuredeveloper experience team otherwise you'll introduce a bunch of new headaches. these include things like cicd building storing artifacts testing artifacts promoting artifacts between environments observability metrics logs distributed tracing error monitoring distributed systems quirks like cascading failures releasechange management and communication service discoveryrouting automated infra provisioning for things like datastores. unless you have a really good handle on all these pieces which i think most startups don't you end up in an operational nightmare spending tons of time trying to keep the system going.of course the next step is throwing on 3rd party products to try to solve this which adds even more complexity. throw in datadog for observability istio service mesh for networkingtraffic argocdkustomizehelmkubernetes to manage all this infra etc etc;0
37480439;HackerNews;2023-09-12;break out an independently scalable part of the system into a microservice the one that may need to scale independently or that you want to be able to deploy separately.how often would you estimate that security concerns are a valid reason to isolate functionality into a microservice? separation of concerns reduced attack surface and blast radius etc;0
37480076;HackerNews;2023-09-12;please don't blame microservices insanity on javascript and node.;0
37480075;HackerNews;2023-09-12;microservices are not a solution to the problem you describe. nothing in your problem description requires the imicroi part.microservices are about splitting the application into very finegrained subapplications. it's not about modularity in general it's about making things as modular as possible up to one function per service. that's why they are imicroi. otherwise we'd just call them services and nobody would have any problem with that.;0
37480013;HackerNews;2023-09-12;and then when you start growing that's when you break out an independently scalable part of the system into a microservice with it's own data store!.wasn't this the rule of thumb for microservices from the very start? that the main driving force is to ensure separate teams work independently on standalone projects they own exclusively? scaling tends to only become an issue when the project grows considerably.;0
37479849;HackerNews;2023-09-12;at aws on my service we have lots of microservices and i think we need them at our scale but they also share a bunch of the same code. so one problem is reasoning about when your random java library gets merged into some component and it takes a while to wind its way through pipelines and then subtely breaks something unexpected. take a lot of engineers to deal with this architecture and i certainly wouldn't recommend it for most folks. in fact one of the slightly hilarious things is that we started out with microservices and end up combining them together because guess what when you are building systems level software you really need to make inline calls instead of network calls without timeouts retries circuit breakers and all the bs.as a manager i really miss monorepos postgres and all the other simple stack stuff that makes developers super productive and imo the work much more fun.;0
37479616;HackerNews;2023-09-12;you correctly assumed that it's a monorepo by the way. but yeah you're being reductive overall. it's not a microservices vs monolith debate. i was using this example to show that people can fuck up any model.;0
37479455;HackerNews;2023-09-12;it's so much easier to start out with one codebase and one database and that will scale for a while.lots of businesses don't even need to scale anyway netflix is a high customer low revenue per customer type of business but there's lots of low customer high revenue per customer businesses too perhaps even more than the first one. these are often the type of products where you could quite literally run production on your laptop if you wanted to.at the last place i worked they built all this microservice bonanza for ... 300 customers... if they ever got a few thousand customers it would be quite successful and tens of thousands would be hugely successful. what usually happens is that they don't spend that 25 of your engineering time just maintaining the platform so the platform was impossible to run locally and production was hanging together with duct tape.aside in a recent interview i was asked to design a system for 500 million concurrent users this is for a business that's mostly in the lowcustomerhighrevenue type. i still don't know if the test was to point out that 500m is an utterly bonkers number about a 10 of the internet connected people on the planet or that they really thought this was somehow a vaguely realistic number for a startup. i answered with build the simplest thing possible a monolith and focus on features and making sure you're building something people want. i didn't get hired so i guess they were somehow under the misapprehension that you need to design things for 500m users right from the start?;0
37479439;HackerNews;2023-09-12;in my experience a mediocre engineer can build a decent monolith especially if they're using an opinionated framework like ruby on rails. on the other hand building microservices is much more complex as there are more moving parts and more failure modes so the mediocre engineer and even many non mediocre ones is much more likely to create problems.;0
37479224;HackerNews;2023-09-12;the trouble is you're often left unwinding a halfdozen layers of abstraction and in many cases experiencing what looks like some sort of quantum code interaction where changes in one part of the codebase seem to impact completely unrelated bits of code which now fail tests.this perfectly sums up all of the microservice apps that ive had the pleasure of working on with the exception of issues being caught by tests. typically you get either silent production data corruption or a seemingly unrelated error in the ui x weeks down the line.;0
37479006;HackerNews;2023-09-12;totally agree. i don't see how microservices would solve this. also monorepository doesn't mean that service is monolith.;0
37479005;HackerNews;2023-09-12;if you want a sobering look at the damage you've helped do go look at job listings on a generic job site.at least here in the uk almost all of them have microservices listed as a requirement.given that at best like 5 of companies would benefit from microservices that's a terrible spot our industry is in.;0
37478885;HackerNews;2023-09-12;you can see the mess and fix it.the trouble is you're often left unwinding a halfdozen layers of abstraction and in many cases experiencing what looks like some sort of quantum code interaction where changes in one part of the codebase seem to impact completely unrelated bits of code which now fail tests.the polyrepo microservices approach helps enforce boundaries. it also makes rapid iteration easier with more limited tooling because my code can no longer blow up someone else's code a problem which can be solved with dev toolchains but those toolchains take a nontrivial amount of resources to support.i do agree when you need to move boundaries or need to refactor across multiple packages at once a monorepo monolith is great. a monorepo microservices can introduce many of the same problems as a polyrepo microservices though.;0
37478873;HackerNews;2023-09-12;most people don't understand the point of microservices. they look at the idea and are attracted by the power of modular interfaces customizable scalability and independent deployment without really thinking of the additional engineering overhead that are required to unleash these capabilities.i've seen exnetflix software engineers taking jobs elsewhere and proposing microservices for systems that would receive little to no benefit from them. in practice the implementation of microservices in these contexts become a costly solution looking for a problem.;0
37478837;HackerNews;2023-09-12;this is gatekeepingwe're all ultimately selfidentifying as software engineers. but more importantly it's not correct. many of the original engineers working with node had nonui backgrounds. node.js made asynchronous programming easy and promised that you could use the same language on the backend and frontend which seemed like good bangforbuck for people that wanted to focus on products.also not to point the blame somewhere else but wasn't it golang engineers that went really hard on the microservices koolaid?;0
37478732;HackerNews;2023-09-12;i get that. i was trying to describe a small path from monolith to microservice without inventing yet another student and teacher database. but the even the step you mention matters. going to a third party service is very similar to reaching out to your own internal service. make it a customer service.is the pain in microservices or apis and mtls or is the pain in managing a team that now has to do customer stuff only ? or email stuff only?;0
37478694;HackerNews;2023-09-12;the problem is not with the devs but with the investors i believe. they're looking for unicorns unicorns attract million of customers so they need to work at scale hence microservices.;0
37478657;HackerNews;2023-09-12;i don't think i agree with your thoughts. microservice setups are generally less flexible than monolithic setups. particularly if you get the boundaries wrong it's notoriously difficult to refactor multiple microservices particularly if you need full uptime.for monoliths you can refactor the whole thing with editor support and then deploy a new version.so microservices will cost more give you less flexibility and maneuverability at more upfront cost. it seems like the worst of both worlds.;0
37478419;HackerNews;2023-09-12;upvoted but honestly the other side of that coin isthe author posits that if you make pile of crap monolith then all you had to do instead was make microservices and magically itll all be fine.;0
37478411;HackerNews;2023-09-12;i think this is a great point and shouldn't be just handwaved away like you hit some bizarre edge case of monoliths.monoliths can have crippling downsides just different flavours of downsides from microservices. what you gain in network latency and dryness you can lose in autonomy and breadth of codebase.microservices vs monoliths just like everything else is a question of tradeoffs and making informed choices about when to apply them and how to mitigate their downsides.the slightly more nuanced point in the op's article is that adopting any engineering practice and blindly following as though your identity is linked to it is a bad move.;0
37478407;HackerNews;2023-09-12;why this is getting blamed on javascript node.js is beyond me. microservices wereare all the rage in javascala land and seemed to initially be pushed by devops engineers' desire to roll their own kubernetes cluster or whatever came before. i've been on multiple such project and i always loathed the additional complexity especially combined with actorsevent sourcing and cassandra. node.js was limited to some frontend tooling that only ran locally or in ci.;0
37478387;HackerNews;2023-09-12;well the idea of microservices would be to build some degree of flexibility into the setup so that you can handle problems you don't have now but you might have later.i understand that the monolith if done right is a viable option as well.as a consultant our customers rarely know what they want and they can't really describe their vision no matter how many workshops we throw at them. microservices give us the opportunity to say we might not know this now but with this architecture we won't be locked into a certain pattern or meet certain technical limitations by a monolithic approach.it seems that what you are really paying for with microservices is flexibility and maneuverability down the line.solving only the problems you have here and now with the simplest solution will also lead to technical debt.;0
37478384;HackerNews;2023-09-12;this comment shows imo that the real issue here is not really microservices or not microservices but what the article calls the apostles of the church of complexity.neither microservices or monolith are a golden hammer silver bullet or whatever nor the opposite. they are tools each with their tradeoffs which combine with the many contextdependent tradeoffs of each organization. they are not the problem.the problem is a engineer's fascination with complexity and confusing simple with hack b how organizations keep cargoculting tools architectural patterns and so forth. applying architectures design patterns whatever naively based on the belief that usage alone will deliver benefits. it doesn't.;0
37478363;HackerNews;2023-09-12;just use a folder brothis will be my new goto response when discussing microservices;0
37478343;HackerNews;2023-09-12;i find it weirdly theraputic to read things like this and reminisce about loudly proclaiming the same a decade ago while being shushed as a nonbeliever...please excuse me if the paradigm of microservices has left a bad taste in my mouth but i have realworld experience with the repercussions of wholeheartedly embracing the latest techdejour without completely understanding the tradeoffs...many years ago i was hired at stumbleupon around the time the leading compsci doctor decided to take a working and profitable monolithic php app and turn it into a scalajava microservices architecture... in fact part of the newhire process was a weird oneonone with said madcompscientist where he extolled the many merits of microservices and skillfully dodged questions like why would you build a distributed service that just adds a list of numbers? with a bunch of you wouldn't understand why it's so much better... type handwaving. fastforward to 30 new hires and 4 long years of intense development and the nolonger profitable company was left with a new slower buggier impossible to debug distributed hellscape... as the main designerarchitect of it all decided it was a great time to take a sabbatical... it wasn't long after that the nth round of investor money ran out and we were all looking for work.;0
37478342;HackerNews;2023-09-12;while there are definitely developers who are enthusiastic about microservices for all the wrong reasons e.g. it looks good on the resume i think it's more about how companies deal with complexity.companies don't just ship their org chart they ship all their dysfunction and historical baggage. a beautiful wellarchitected platform from 5 years ago with an efficient thoughtout data model and api and wellwritten and tested code might be a total mess after 5 years of constant pivots from the ceo last minute customer requests the sales team have pushed through product managers doing their hydrantmeetsdog act of adding features nobody needed or asked for and never enough people and time to do as good a job as the developers would like.one day you wake up with a big pile of tech debt and fixing bugs and adding features takes way longer than it should and microservices are that siren call that promises a solution that doesn't involve burning the whole thing to the ground and starting over.;0
37478218;HackerNews;2023-09-12;splitting out the webserver assuming it is the main entrypoint for users seems more like an infrastructure choice than application architecture and having an independent emailsendingservice looks more like replacing a thirdparty offer like turbosmtp with an inhouse service.i do not think that this is what people mean by microservices.;0
37478178;HackerNews;2023-09-12;to me it's mostly skill issues when people couldn't extract the code into indepedent parts.the point is make everthing as a library.it doesn't matter if microservice or monotholic just import your library and use it.;0
37478172;HackerNews;2023-09-12;the author would disagree with you i think they think it's more likenode engineers let's build some microservices!!!!! yay i'm coding!!chad unix architect who won't code in any language that doesn't give you the tools to blow your own foot off just printing a string to stdout no let's keep adding functionality to this one codebase until it's as complex as a suite of microservices.according to the author at least.;0
37478162;HackerNews;2023-09-12;sorry but what are you talking about? microservices in a monolith without containers? how does that even work?;0
37478150;HackerNews;2023-09-12;this post reads like a cry for help. i don't really know what they're arguing for. sure the broadstrokes 'microservices bad monolith good' is something i can get behind in some cases but the slightly unhinged tirades against node developers and the 'bloated farce' of the modern tech industry might as well be satire for all the value it contributes to debate.;0
37478125;HackerNews;2023-09-12;i don't get the hate about microservices. use event sourcing to eliminate the whole s2s communication and grpc to connect the clients. done.;0
37478101;HackerNews;2023-09-12;absolutely agree i've seen far too many companies spend far too much time working out the infrastructural relationships of microservices. spending very little time working on the actual applications needs itself.;0
37478091;HackerNews;2023-09-12;microservices are often used as an excuse to be able to write part of the system microservice in own technology stack and not in the one the rest of the system is already written in...;0
37478072;HackerNews;2023-09-12;wise words. they boil down to a very simple truth that was as accurate half a century ago as it is todaymake things as simple as possible and as complex as necessary.i can ialwaysi make something more complex than it is now. as you say we can take out things from a monolith and make them into a service. it can be hard to do so sure. but nowhere near as hard as trying to get complexity out of a system once it's in. everyone who ever tried to revert a bunch of microservices back into a monolith knows exactly what i am talking about. it usually amounts to the same work as a groundup rebuild.;0
37478061;HackerNews;2023-09-12;how would you split the total overhead between monolith and monorepo?sorry this ran away with mea dumb example is that if i start with my single codebase running on a single server i am likely to have a single git repo foo.then i have a genius idea and put all the email handling code into foo.mail and soon i have foo.web and foo.payments.all is fine as long as i am just checking out head each time. the code running in the runtime is still one big set of code.if i get creative and put in load balancers it's still a monolith.but if i split out the web servers from the email servers then i kind of start to see microservices appear.i am trying not to be pedantic but i am truly interested in experienced views on where the pain really starts to appear.at this point server to server comms i should look at mtls and centralised logging and all the good stuff to manage microservices.but how much pain was there before?what if i was a large company and so hired a dev or two per repo you know to get that 9 women one month effect. coordinating multiple devs over different repos even with one monolithic runtime is painful experience tells me.so i am interested in where the break points are and whether there are easier paths up the mountain?;0
37477998;HackerNews;2023-09-12;i'm not that much of a supporter of microservices but my experience is the opposite in every company i've worked for that used microservices each team had their own set of microservices they were responsible for.;0
37477990;HackerNews;2023-09-12;a common pattern i've seen is current ctovps builthelped build original monolith nobody wants to tell the cto that their code is shit andor is from a different era and needs a complete overhaul unrelated to that fact it's a monolith. ctos are too busy doing marketinggetting funding to make a decision on microservices vs monotolith so the newlyhired architects gets to call the shots everyone cheers on microservices because it fits within the story of a fast growing serious technical company and nobody wants to be that lone dissenting opinioncriticise the cto.nobody is seriously and truthfully recommending microservices because they believe them to be the best trade off and superior choice. it's because they like their job they like hiring people and it fits within the narrative.and it just so happens during the massive overhaul that you get to rewrite a ton of code and improve it while just calling it a migration to microservicesso it's a way of not hurting the feelings of the cto going along with the crowd and a way of rewriting a ton of old bad code with an excuse supported by almost everyone;0
37477986;HackerNews;2023-09-12;other senior in my team and i agree with you..we are wasting 20 people's time because we were forced to rush into something that resulted in 56 different microservices where a monolith written by 6 competent engineers over 6 months would have sufficed.what you describe regarding microservices and aws is also a thing internally.............;0
37477984;HackerNews;2023-09-12;one of the things this article alluded to but i didn't see it explicitly stated as to why microservices is a default goto architectural choicebecause then a bunch of engineers can stick it on their résumé and try to get a job at a big companyi worked in a funded startup where we built a serviceoriented architecture out of a few key laravel monoliths. this was entirely manageable for a team of less than 10 engineers and scalable for the context.because we built it as a distributed system each of those core services was ready to handle outages. so it was extremely easy to deploywhat's more it barely cost us 20k per year to run it allbut now i can't say i've worked with microservices so i'll likely not stand a chance at any of those interviews;0
37477943;HackerNews;2023-09-12;the problem microservices try tried? to solve isn't about namespaces it is about too tight coupling between code.you can use folders to decouple code by making code private within that folder. only publicize parts of the code with your languages version of exporting.or you can make it private behind an entire new repo and behind an entire service. only publicize parts of the code through api interfaces like http and make everything 10x harder for the sake of decoupling code.;0
37477925;HackerNews;2023-09-12;i have two huge gripes that i've run into when dealing with microservices1. they're actually inanoiservices. the article touched on this. a single function shouldn't be its own service unless it's something that requires a lot of processing like a service that converts files from one type to another. but something like handling user registration? you don't need separate services to handle registration login and the forgot password flow.2. the services are poorly named. at a previous job we had services with names like kafka avatar and sophos and none made sense for what they did especially kafka which i expected to maybe be a wrapper around apache kafka? but no. it should have been called the user preference service because it was simply a service for users to getset their preferences.;0
37477906;HackerNews;2023-09-12;im currently at a place using microservices in a monorepo where business logic is executed in consuming services and some business logic is in a monolithic graphql layer that only frontend clients call. tries all the tricks fails at all of them.still its a profitable business. the dirty truth is that the current crop of engineers are the ones paying with their blood sweat and tears and im not sure about you but thats not what i signed up for as a software engineer so we should demand better.;0
37477892;HackerNews;2023-09-12;that sounds icrazyi. imagine how much worse it would be if it was a microservices system!;0
37477890;HackerNews;2023-09-12;i don't know why but no one hires or listens to the architect who recommends sticking to safe monolithicesque systems. if you're not talking cloud and microservices and the newest unproven frameworks you're an old fogey who needs to get with the times. even though those types of systems are rarely the most efficient powerful or safe systemsi work for a company that builds software to be used internally by other business. we have like 200 people tops using it simultaneously with no usage spikes a perfect environment for regular web servers as we'll never have unexpected scaling issues yet everyone is dying to go to the cloud. why? i think it's just because our management programmers and even customers are convinced by cloud provider marketing that the cloud is cool;0
37477879;HackerNews;2023-09-12;the iworsti wtf system i have ever seen in my 30 years career was a microservices system.the ibesti most maintainable systems i have ever worked on were all 1 million line monoliths. split into n libraries with clean apis and separate teams working on them.you have a problem so you pick microservices. now you have nn1 problems.;0
37477864;HackerNews;2023-09-12;has the microservice backend project team ever observed the monolith project team?;0
37477826;HackerNews;2023-09-12;we have exactly two microservices atm one sends emails one registers users and creates a backend one backend per customer with us. should i hire a team just to adhere to your golden rule? i wrote them myself no support from anyone needed they are low maintenance.do architecture first have a modular monolith if you need microservices use 'em. the rest if this thread is just a waste of time and a bunch of strong opinions.i just hate this whole thread. full of weird assumptions. people here don't know enough about the scenarios to hate on either solution. do what's right for your project and don't listen to the internet. easy as that.;0
37477793;HackerNews;2023-09-12;it's not even funny how many software engineers just don't know that sql is crazy fast and performant if you have basic understanding about it i was once refactoring or rather getting rid of a microservice that was just a json blob storage on top of postgres without having any schema for blobs with 100s of 1000s of them no indices and main complaint was it's slow.;0
37477790;HackerNews;2023-09-12;so what are you gonna do when you need data migrations?ps i'm not saying using one db with microservices it's still with the monolith;0
37477760;HackerNews;2023-09-12;maybe a solution to an antisocial problem!ft.com did a recorded seminar session on their microservices architecture and one of the benefits they extolled is if someone wanted to improve on a feature they could just make it all over again and replace the old microservice with a new one. no need to look at the last persons code just blow it away like it never existed.i gathered their site is actually a black box filled with hundreds of black boxes of microservices. all a mystery they either work or they don't and if they don't they fail gracefully quickly.;0
37477712;HackerNews;2023-09-12;i've been saying this for years the microservices insanity it's just an excuse for mediocre engineers to be in demand.or just inexperienced ones who want to pad their cvs.i think we failed to educate the current generation on what's important in this job.;0
37477691;HackerNews;2023-09-12;i wrote this 8 years ago microservices vs. airgapped modules . you can achieve the same end as a microservice using a module by simply having lint rules that prevent you from importing other application level modules. this way the only possible comms interface is to pass events with a payload of primitive typed parameters.;0
37477677;HackerNews;2023-09-12;i was involved in a merger with the platform i architected on one side and a platform that does the same thing on the other side. we were told the company wanted one platform.i do everything i can to follow kiss. these are important enterprise systems that drive the entire company. i went with a frontend framework in typescript c apis and a relational sql db as the gist of it. it turned out great ... performant reliable and the users were reporting positive feedback this one was a recent upgrade from an older system.the other side had the same number of users but had over 100 php microservices docker containers queuing frameworks and all sorts of additional technologies in the mix. it had 5 times the number of engineers on it but was at the end of the day was functionally equivilant and had the same volume of traffic.when comparing the uptime it was clear the microservices architecture was the main source of pain. they weren't even comparable. we are always talking about whether we're at 5 nines and the other system was having major outages every other week.you could argue that it was a poorly architected system and that microservices weren't the root cause but that really wasn't the case. the entire system was based around the microservices and they weren't working as promised. what originally was seen as separation of logic and concerns and everything else that microservices offer eventually over time became a tangled interdependant system of services that were very high in bandwidth slow in performance difficult to maintain and bad in reliability.this isn't the first time i've seen this. i've worked with microservice architectures in other companies and i haven't yet seen it done right or at least how i understand it. it always comes across as great in principle but bad in practice.;0
37477660;HackerNews;2023-09-12;it's nice to see the trend unwinding microservices are egregiously overused as a silver bullet for any problem not just scaling.there are probably dozens s of companies that would benefit from going allin with microservices. some companies would benefit from having a few microservices but most would be more than successful running a monolith.the most significant problems with microservices arise when they're adopted too early and when data separation is not properly handled resulting of even the simplest requests ended up querying 35 microservices.latest anecdata point doing exactly that unwinding microservices in a team of 20 engineers 15 swe5 sre and 400 repositories which isn't a wrong but having so many different places to update for example python version is nuts. the whole project is nuts.and persuading management was not an issue it was enough to show current aws bills and potential savings from moving from 50 microservices to smaller numbers of consolidated services and deprecatingrefactoring some features. the real challenge was persuading the engineering team to prioritize and work on this issue which is still ongoing.;0
37477645;HackerNews;2023-09-12;god how i love confirmation bias when it's my own bias.i've been saying this for years the microservices insanity it's just an excuse for mediocre engineers to be in demand. it is fueled by mediocrity but it is also what keeps so many tech companies going.there are simply not enough competent engineers who master unix and who can build beautiful minimalist systems like stackoverflow's or a bunch of others' mentioned in this article. therefore microservices as a smoke screen for mediocrity is here to stay it's not going away any time soon especially considering that cloud providers like aws promote themselves via all possible channels and encourage the decision makers to take that route anyway.;0
37477632;HackerNews;2023-09-12;i've never seen teams organized around microservices like that. what i've seen again and again is one huge team where everyone is responsible for all the microservices meaning noone is responsible for anything.on a theory level i would agree with you i've just never seen that happen in practice.;0
37477621;HackerNews;2023-09-12;i don't think microservices are as common as often suggested. in my experience with small and medium sized companies if they go soa its typically just services almost always sharing the same db and pretty much never microservices. usually it's something like a service for the webapp maybe an api service a couple services for something like a job queue or sockets possibly with the a service for compute bound tasks like media processing or reports. i've also worked at places with 50 services working together in production but they're rare at small and medium sized companies.;0
37477612;HackerNews;2023-09-12;a good maintainable software solution is always build out of relatively small and simple components with very important clear inputs and outputs without too much sideeffect behavior. it says nothing about if its a monolith or microservice. i have seen a lot of microservice architectures so complex with 100s of layers and configurations that nobody in the company understood how it really worked. i have also seen the very same thing in large monoliths. too big. too complex. the discussion should be about the software component architecture. not about ifs a monolith or microservice.;0
37477608;HackerNews;2023-09-12;gold rule to start with is1 microservices 1 teamin a multivendor scenario it could make sense to split a big monolith in say 2 or 3 components but i have seen dozen of microservices one of which just managed 3 readonly tables....but if your 6guys team ends up deploying 6 microservices you are doomed in my huble opinion.;0
37477594;HackerNews;2023-09-12;microservices is mostly an rdd resume driven development practice i've foundmicroservices was invented nearly 20 years ago.at what point is this argument that it is some new risky approach that is going to wow hiring managers going to stop.it's actually ridiculous now.;0
37477580;HackerNews;2023-09-12;the problem microservices try tried? to solve isn't about namespaces it is about too tight coupling between code. whether that tightly coupled code sits in a subdirectory or in a different repo doesn't matter.it icani be benefitial to maintain well defined interfaces at boundaries between certain parts of your code. it can also produce a lot of work and add complexity. but beyond a certain scale adding systemic boundaries and honoring them isn't something you should avoid.devs who do microservices just tend to go too far too early.;0
37477577;HackerNews;2023-09-12;im aware that this is a bit controversial but i feel like the current state of affairs when it comes to microservices is as followsnoobs microservices can be usefuladvanced and cynical microservices are a complexity nightmareadvanced and experienced microservices can be useful;0
37477576;HackerNews;2023-09-12;having taken part in building the wix microservices architecture i have to say that i understand and accept the critique of the article. microservices is not a magic architecture it solves some problems with the price of others.when we stared wix we stared as a monolith at 2006. in 2008 we split this monolith into two services due to different sla building websites and serving websites.in 2011 we stared splitting the monoliths into micro services to solve software delivery pipeline ability to move fast and scale with number of developers. today we have about 20000 deployments of new software every year with over 1000 developers.at wix we are constantly investing a lot to maintain the microservices architecture and make it productive for our developers. we are making tools and utilities to return dry into microservices architecture think cdc support gdpr support monitoring support scaling access control etc..my takeaways microservices do not come for free. you have to invest in making it work for you when building a startup build a monolith. break it down later when you understand what you need. we as an industry do not understand how to build micro services. there are a lot of fundamental aspects of microservices that are not commonly known understood or ready as of the shelf solutions.;0
37477572;HackerNews;2023-09-12;i agree. whats the answer to the question monolith or microservice? the answer is architecture.;0
37477525;HackerNews;2023-09-12;i also know people that spend 40k euro a month to run the database of their rails app on the biggest instance they can find on aws. the traffic is seasonal and the workload is mostly one way payment traffic. but hey they are still making money so good for them. i've personally been exploring a more flexible architecture for another project using a combination of cloudflare workers storage and kv store. the hardest thing about it currently is that you have to engineer everything yourself to be specific to your problem. either way both monolith and microservices have their challenges i hope to find something that can avoid both but it feels like a stab in the dark.;0
37477522;HackerNews;2023-09-12;of all the things wrong with microservices this isn't one of them.it is exacerbated by the overuse. the complicated communication layer is always either restjson or grpc.going over network which is slower unreliable poorly typed. it's orders of magnitude more difficult to refactor a published rest api in comparison to e.g. java interface within a monolith.microservices are generally far from easy to debug. in the best case scenario you have the whole stack locally and can put breakpoints add logging immediately. but that happens rarely debug port is often blocked security you can't easily modify the code to add some diagnostics without a complex ci dance etc.;0
37477508;HackerNews;2023-09-12;aww thanks for the kind words. i apologize if i caused you any harm with my talks. i did in fact start out saying everyone should use microservices but i pulled back as i saw how damaging that can be to a small startup or even a large enterprise that doesn't actually need it.we all make mistakes!;0
37477501;HackerNews;2023-09-12;when proposing a system design have two. one using a monolith and second using microservices. put the first in production and the second in your cv and everybody goes home happy.;0
37477482;HackerNews;2023-09-12;microservices is mostly an rdd resume driven development practice i've foundi agree. the worst i've seen is with contractorsconsultants because the incentives are particularly bad.they often stay with the project only for a limited time and grokked customer's businessdomain logic is not something you can put on your resume and the typical 6 months are too short for that anyway. but there's enough time to introduce a schema registry or other piece of tech which can look pretty good on your cv. jump onto a different customer rinse and repeat. i call this technologyoriented mindset vs. goal oriented mindset.;0
37477462;HackerNews;2023-09-12;i have avoided by luck alone microservices except the occasional small service where it makes sense think aws lambda to covert doc to pdf for spikey loads and i am glad. it means i dont get far in interviews at small companies that bizarrely want microservices experience as opposed to problem solving experience!;0
37477460;HackerNews;2023-09-12;i don't quite understand the mentioning of node at the start of the article as a cause of this. you can write a monolith in node just as well as you can write a web of microservices. that said i agree with the sentiment of this article it's very frustrating to deal with in any company. especially when these microservices aren't versioned under the same repo andor are hosted at different providers causing unnecessary latency.;0
37477454;HackerNews;2023-09-12;i have seen managers propose microservices to their own bosses just to show their own bosses that their team will embark on something netflix does so we should do too.;0
37477451;HackerNews;2023-09-12;an interesting angle would be how to get out of this mess.here's one in politics we see national and supranational governments take on the job of making large decisions. style guides and best practices on whether to use microservices or not are at best made at a company level.would it be interesting if these architecture decisions were made or at least kept in check by a body that is larger than a company?perhaps we could have some laws that dictate that you must at least partially understand how software works before you can buy it. especially for government contracts.;0
37477444;HackerNews;2023-09-12;microservices was literally invented by a software outsourcing company.why make only one service when you can bill more.;0
37477432;HackerNews;2023-09-12;been working for 6 month at a company with 150 engineers that uses microservices.as a simple software engineer i love it it allowed me to easily get right in to parts of the system and conceptually understand the boundaries between different systems and business unites.but it sure adds complexity complexity that i fortunately do not need to deal with... yet.;0
37477430;HackerNews;2023-09-12;agreed. the db is the bottleneck iwayi before the code architecture. but that is a solved problem from a deployment perspective. all the cloud providers have managed postgres that scales to petabytes and millions of transactions per second. and the part being discussed in the article is the microservices. where elixirphoenix shines at delivering the ibenefitsi of microservices i.e. scaling a specific function in your codebase to multiple processorsinstances while still being easyfast to run on a single dev machine without hundreds of docker processes.;0
37477427;HackerNews;2023-09-12;i got out in part because of this. i weathered the ejb craze somehow and microservices plus the javascript framework du jour was too much...;0
37477424;HackerNews;2023-09-12;and then when you start growing that's when you break out an independently scalable part of the system into a microservicerespectfully disagree. at this point you start refactoring your monolith into components and actually look at performance measurements via tracing.do not do microservices when you're growing or ever most of the time.and by the love of god don't split your data. data is much more complex to manage than code.;0
37477422;HackerNews;2023-09-12;ah its you!youve got a hell of a resume. and been accidentally incredibly convincing in getting many people into many early messes.jokes aside thanks for at least coming around to advise startups sanely.id personally never advocate for microservices until at the scale of netflix or amazon or reddit and even then only with inhouse expertise at your level. otherwise its a nightmare.thanks for everything especially your contributions of sanity.;0
37477415;HackerNews;2023-09-12;i feel this working on a small team moving things to microservices. my primary problem is observability. it's become a huge chore figuring what exactly is going wrong in production when something goes wrong. it's not enough to tail the logs of some distributed application i need to tail the logs of several distributed applications where there messages are interspersed with one another. i suppose when we get some way to visualize these traces tooling it'll be okay. but small team limited human bandwidth and we don't have this tooling in place yet.the monolith in contrast had newrelic integrated years ago. there were performance problems with this monolith which have been mostly solved through indexes and a couple of materialized views. trivial to figure out what is going wrong. the code may be old and full of race conditions but solving problems isn't difficult.i dread dealing with multiple separate database instances each backing their own microservice when it comes time to upgrade those databases instances. i was hoping for a single database instance with multiple databases but that particular architecture isn't on the menu.;0
37477413;HackerNews;2023-09-12;one of our projects has 15 backend engineers and 30 microservices. it also requires a separate platform team. a k8s cluster with several nodes. it has incidents like every week because the whole thing is like a house of cards. a small feature requires changes in 5 microservices and a lot of coordination between the teams. they always need to think about things like circuit breakers timeouts apis schema synchronization versioning event queues distributed transactions sagas distributed locking k8s configs git repository management distributed tracing etc. etc.on the other hand there's another project which is a monolith. around 15 engineers. incidents happen very rarely. the infrastructure is simple just one beefy server without k8s but there's a standby replica of course so the team often does maintenance of the server on their own instead of a separate sreproduction team. the monolith is modular so it enjoys same advantages as microservices when it comes to module isolation etc. highload functionality is moved to separate go services only when needed currently 2 or 3 satellite microservices. all changes happen in the same codebase so features are released faster and it's easier to reason about.i'm currently on the second project and whenever i attend architecture reviews of the first project i'm shocked how overcomplicated the first project has become. a simple addition of a new object property can end up in 510 engineers arguing for hours whose microservices are affected and how they should best communicate.;0
37477404;HackerNews;2023-09-12;if you have an expert in design architecture and know the domain problem scope boundaries go for microservice. otherwise monolith.a good microservice is better than a good monolith since the boundaries are clearer. however a bad microservice are many times worse than bad monolith since on top of the wrong scope intertwined boundaries and other problem from bad design that exists in monolith now you're faced with additional infra challenges.;0
37477401;HackerNews;2023-09-12;microservices are a bit like nosql dbs. there is nothing intrinsically wrong with the technology its just overused.many users of microservices would be better off with a monolith. many users of nosql dbs would be better off with postgres.;0
37477400;HackerNews;2023-09-12;a post like this pops up every few months arguing one way or the other. i have lived in absolute nightmare monolith systems with so much cyclic dependency that you couldn't move without breaking something. so monolith isn't the answer. i have also seen many instances where people have completely missed the underlying principles of microservices and have ended up with an equal nightmare. neither is a hero or panacea what matters is to understand what you are building and why and get the interfaces correct. then understand the principles of different architectures before moving forward. if you fail on this you get predictably a nightmare. there is plenty of nightmare code sitting on this planet everywhere we look. my recommendation isn't to vilify either architecture but to understand their strengths and weaknesses.;0
37477388;HackerNews;2023-09-12;which is the main step on the pathway to hellat the point where you have to write an api call instead of simply joining to a table you have introduced orders of magnitude more complexity failure points testing challenges race conditions coherency issues code duplication etc into your system.i don't mind stateless microservices too much. this forms more of a hub and spoke model many services talking to 1 database. but the minute you bring separate state into the equation it's a chaos factory.;0
37477384;HackerNews;2023-09-12;the name microservice is a fanatical view of how a service should work. that is the problem. if you say you made a service then it is not a microservice so you are lacking experience with microservices therefor we must build microservices to have jobs.in reality you need services that are engineered properly. they can be monolith or not can share databases or not can live on the same server or not... depends on the situation. but as soon as you say the work microservice you are doomed because it won't be a microservice if it does not adhere to millions of articles on the internet saying how to it should behave...;0
37477372;HackerNews;2023-09-12;a lot of microservices introduce unnecessary complexity.erlang and elixir are unusual in that you can have independent microservices running within a monolith.;0
37477361;HackerNews;2023-09-12;i am one of the biggest proponents of microservices. i helped build the platform at netflix i've literally traveled around the world extolling the virtues of microservices.but i also advise a lot of startups and you know what i tell them nearly every time?build a monolith.it's so much easier to start out with one codebase and one database and that will scale for a while. especially if you use a keyvalue store like dynamodb although you will lose relational functionality that can be helpful at the start. and did you know that you can deploy a monolith to lambda and still get all the benefits of lambda without building services?and then when you start growing that's when you break out an independently scalable part of the system into a microservice with it's own data store!. the one that may need to scale independently or that you want to be able to deploy separately.microservices takes at least 25 of your engineering time just maintaining the platform. it's not worth it unless you can recoup that 25 in efficiency.;0
37477350;HackerNews;2023-09-12;just use elixirphoenix and get ialli the scaling benefits of microservices running seamlessly across datacenters while maintaining the sanity running a single app on your localhost that is fast to test easy to reason about and deploy!having worked in several places that adopted microservices with nowhere near the netflix or uber scale just because it's trendy i can attest to the mess and glacial pace of both learning and development for new team members. if you want to move fast and make something people want don't pretend you need webscale you don't. you're building an apartment block for a few people not a city for imillionsi. the beauty of erlangotp is that it's designed to scale to millions without any extra effort from the individual contributors or fancy devops.;0
37477344;HackerNews;2023-09-12;do you think graphql has contributed to more microservice driven development?;0
37477341;HackerNews;2023-09-12;this article is off the rails to borrow the authors amtrak metaphor.the author posits that if you make pile of crap microservices then all you had to do instead was make a monolith and magically itll all be fine.you can put the same kind of design and engineering work in that results in a pile of crap microservices but if you target a monolith instead then youll be golden.the author enjoys stroking his own ego as he goes the comment about full stack js devs for example. and yet theres very little here in terms of actual engineering. want some measurements or some data to back up the waffle? well the author says tough! you just get a diatribe instead.keeping the cost to change a system low by managing complexity is a fine goal but thats not whats being proposed here. this article could have been better if it recognised this. this article could have been better if it gave some data hell even anecdata a single motivating example would have been a start.on my team ill take on a bright enthusiastic front end dev who decided they want to spread their wings and grow into a full stack dev over someone who believes they already know everything and has no growing left to do.;0
37477331;HackerNews;2023-09-12;microservices you trade application complexity for devops complexity.there's a second trade off. overall complexity. the application as a whole is more complex when split into two than when existing as one.so three things happen1. complexity of the individual microservices goes down.2. dev ops complexity goes up.3. overall complexity of the entire system in general goes up.;0
37477305;HackerNews;2023-09-12;this isn't even a joke. technology in software development has been progressing horizontally. nothing is improving but abstractions and patterns are changing constantly.engineers need something to talk about in their okrs. one strategy is to refactor things into microservices.;0
37477279;HackerNews;2023-09-12;microservices are a solution to a social problem not a technical one.a team of n engineers requires n coordination. large teams get mired in endless meetings email design reviews. small teams are more effective but struggle to maintain large systems.splitting a system into subsystems allows each team to focus on their piece of the puzzle while minimizing the amount of peertopeer coordination.yes microservices add complexity and overhead but this approach enables a large organization to build and iterate on large systems quickly.;0
37477259;HackerNews;2023-09-12;microservices is mostly an rdd resume driven development practice i've found. really as the article says correctly and hilariously unless you're a greenfield or exceptionally large you end up with a fleet of shitty golf carts.my personal anecdote is watching from the sidelines with face cupped in hands watching a monolith being broken into hundreds of microservices at the cost of decreasing performance increasing complexity and 90 of the traffic still hitting the monolith. of course there's no time to do anything for the customers any more because everyone is updating software versions in all the microservices and promoting that iit'll all be fine if we just move one more thing to a microservicei. the architectural vision will be complete in 2130 at this rate.i want out from this demented ego driven fashion show.;0
37477248;HackerNews;2023-09-12;there was a paper published about facebooks infrastructure scale is measured in millions of instances on 20221221 the microservice topology contained 18500 active services and over 12 million service instances.they do go on to say that microservice as a concept is poorly defined. are you suggesting that they mostly have 18500 of what wed normally consider monoliths?;0
37477240;HackerNews;2023-09-12;i have been fighting this in my current position with some success with some teams and far less success with others who are now fighting with the distributed monolith they have created. ironically the exfaanmg folks are all promonolith.i think most people fail to realize microservices are what you get from an iterative process. you pull out of the monolith the things you need to scale eventually.microservices need plenty of basic infrastructure that you don't want to mantain unless you need to. most companies don't have an adequate platform to support the pattern anyway.;0
37477231;HackerNews;2023-09-12;i am literally working on a project where the backend team consists of three coders and the backend currently consists 33 microservices. common tasks for this platform involves calling around 7 microservices.thankfully i am working on the frontend side of things but this is going to be hell when when we launch.;0
37477223;HackerNews;2023-09-12;microservices you trade application complexity for devops complexity.my theory is to make devops as simple as possible and push complexity into application code.this includes a rule to use cloud vms but use the minimum possible cloud services ideally none especially not things like lambda cloud functions.;0
37477208;HackerNews;2023-09-12;fwiw google and facebook are mostly monoliths and not microservices.;0
