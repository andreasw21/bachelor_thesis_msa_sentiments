ID;Source;Creation Date;Content;Sentiment
18nex11;Reddit;2023-12-21;Title:Microservices without Reason, Content: https://www.felixseemann.de/blog/microservices-without-reason/;0

keah426;Reddit;2023-12-21 07:10:17;hey the software i'm working on checks all the points of the symptoms of a badly designed microservice architecture list;0
kealbnt;Reddit;2023-12-21 07:54:54;i promise i am not a microservice shill but i dont really understand what the argument against microservices is here other than just listing off common mistakes made when implementing microservices. or is that the point?;0
kebczxz;Reddit;2023-12-21 13:31:53;if someone argues microservices remove spaghetticode by eliminating dependencies they are just plain wrong. i've never seen that argument. people argue that microservices reduce spaghetti code by making it physically impossible to cross module boundaries with a hack. every monolith ends up with modules doing ungodly things with the internals of other modules. that isn't a matter of developer discipline it is just a matter of the reality of time deadlines and corporate penny pinching over fixing technical debt. the advantage of a microservice in this regard is the hack is impossible to make to begin with. in theory you can just not do the hack and then use a monolith. in practice once you have a monolith you'll end up pissing all over the boundaries very quickly. now i'm not saying this is a good reason to use microservices it is actually a very bad one that shouldn't exist in an ideal world. in the real world i've got a lot of sympathy for people who want to put a solid process boundary around some obviously self contained functionality to preempt attempts to ask for stupid stuff.;0
keaz8l9;Reddit;2023-12-21 10:51:43;david heinemeier hansson of ruby on rails fame said in one interview that the microservice pattern is possibly the most damaging pattern in web services in a decade and i agree with him wholeheartedly. basically the only advantage of microservices emphasis on micro is the scalability but that's relevant only for extremely high traffic services like netflix and most startups mature companies won't ever need it. it kind of reminds me how poor americans see themselves as temporarily embarrassed billionaires.;0
keb6kys;Reddit;2023-12-21 12:23:55;having been in this game for a while this is standard and predictable behavior for most in the development arena. they chase the latest and greatest tech for reasons that have nothing to do with their actual mission but mainly to build their resume for the next job. i totally get it if you look at job postings they all want serverless microservices containerized cloud experience etc. i get why microservices are good for mega sites like facebook or amazon but are they really needed for a middling site when a couple of load balancers could easily handle the traffic for a fraction of the cost? many times these are solutions in search of a problem because those building the solution don't really care about the problem they just want an excuse to play with the latest tech which more often than not is a flash in the pan and will be gone in a year or two. activex java applets asp flash etc were all going to revolutionize the web all are dead.;0
kec5nmz;Reddit;2023-12-21 17:03:02;the microservices hate is flowing now and i love it even if all of these articles are starting to get repetitive. microservices have caused me so many headaches over the years and i like thinking about all the devs who inflicted it on me reading the articles coming out and feeling embarrassed.;0
kebnodk;Reddit;2023-12-21 15:01:31;i agree with the main theme but i don't think clean ddd hexagonal help particularly when you end up making a whole lot of internal interfaces and boilerplate hoping that somehow helps change stuff. it doesn't it's just more work. i'd say people should focus on designing and abstracting things carefully and no amount of simple scaffolding rules will help with that. if you get into it thinking you'll be able to change everything you've already lost and you're probably working on inconsequential stuff. which is also the case with microservices. and it's much easier to refactor in a decent staticallytyped language anyway no need to add extra layers.;0
keaa07k;Reddit;2023-12-21 06:01:47;to cut a long story short the post discusses the trend of adopting microservices in software development often without proper justification. it highlights how companies frequently choose microservices due to their popularity overlooking the complexity and challenges they bring. the author emphasizes the importance of understanding the specific needs of a project before deciding on an architecture suggesting that microservices are not always the best solution and can lead to unnecessary complications. if you don't like the summary just downvote and i'll try to delete the comment eventually;0
keaxukc;Reddit;2023-12-21 10:33:12;multiple services have to be deployed at once because a shared library has been updated not a sign of bad microservices. a library fix should be pushed to all code it uses. does not make it strongly coupled or a monolith. failure in one microservice leads to cascading failures in others so? makes sense that the scalable microservices would fail if the authentication service fails. does not make it a monolith. microservices are meant to scale authentication is probably a singleton. its nice to be able to spin up serving video streams in many servers worldwide and scale horizontally while keeping a central user authentication running. yeah if your core system that secures everything fails then it all fails but that doesnt mean you're doing microservices wrong.;0
kedmaxd;Reddit;2023-12-21 22:25:25;devil's advocate microservices are incredibly difficult to migrate to once you have a large enough monolith so if you ever think you might reap the benefits of microservices you might as well start with them.;0
kee5yvt;Reddit;2023-12-22 00:33:44;botnets were the original microservices and a lot of those work pretty well. convincemeotherwise;0
keayxbe;Reddit;2023-12-21 10:47:35;former job did the same and when i brought it up manager guy was like but microservices in the cloud are the future!!!. needless to say bugs were frequently reintroduced a week after quashing them all of it had to be deployed in sequence and what was initially a loosely coupled system rapidly turned very tightly coupled. glad the current place actually thinks about the requirements first.;0
kedkz8l;Reddit;2023-12-21 22:17:15;amen brother. our company has had a monolith for a while and a few years ago started going into microservices. turns out now we still have our monolith but we also have a fuckload of tiny reposin comparison that no one ever regularly works in and each and every time someone has to do work in one of them the engineering channel is tagged hey does anyone know anything about x repository? i need to make a change but no documentation send halp. i am one of the lucky stinkbug assholes that have gained implicit ownership of a microservice that is rarely modified but integral to business. it is nowhere documented how exactly nor when one needs to consider or modify it. i have tried getting time set aside to change this but looking at how rarely it needs changesit's stable as fuck but again if it fails business stops completely if it fails minorly business is majorly inhibited no one cares. changes are only needed here three times a year or so we don't have capacity to fix this. yes but i am sick and fucking tired of being the sole god of this repository let me write some documentation so any engineer can work with it. fucks sake.;0
keaw66u;Reddit;2023-12-21 10:10:57;the article argues that companies adopt microservices for the wrong reasons. they will not make it easier or faster to ship software. they will not make your code better. if your team is not able to manage a monolithic application why would they be able to manage a distributed system? i do agree with the author. as a consultant i seem many different companies adopt microservices for no apparent reason other than it is hot. they do this without proper analysis on service boundaries and end up with a distributed database schema instead.;0
keb2w3t;Reddit;2023-12-21 11:39:03;focus on the title and the intro. any design element used without reason is very likely to result in a bad outcome. i see this a lot in big enterprise especially where bored architects like to tack things onto a design like greebles glued onto a scale model. it sure looks pretty when there's dozens of icons with arrows pointing at each other. you know what doesn't look pretty doesn't pad out the resume and doesn't help get you promoted? boring designs like this ðŸ‘¤ web app db that might work be easy to deploy easy to understand and surprisingly wellunderstood and robust but it's just soooooo boring. let's do microservices instead! woo! lots of fun!;0
kec4xhe;Reddit;2023-12-21 16:58:28;my personal experience has been much better with microservices it was jarring last project going from microservices to monolith when we switched client projects and now suddenly you have a lot less freedom with releases and testing gets difficult impacting downtimes for other teams rather than being isolated and easy we went from dailyweekly relatively painless releases to monthly train wrecks where one little pebble derails the whole thing;0
kebaft9;Reddit;2023-12-21 13:06:28;the biggest advantage is the ability to deploy services independently without breaking the things around them. ive implemented a few successful large scale microservices projects and the scalability angle is over sold. teams being able to release their code to prod without having coordinate or be blocked by other teams is what makes you agile. being able to know without running any tests that your change cant cause a random side effect elsewhere because you arent changing or redeploying those things. these are the real advantages. generally found you need events to fully decouple your services. direct calls between services introduce coupling and harms the ability to release independently. once your the world of having to test and roll out linked services together then youve lost the majority of the benefits.;0
keandao;Reddit;2023-12-21 08:18:55;i am the author of this blog post. thank you for sharing. your summary is accurate. i wanted to emphasize that microservices is not an architecture that automatically removes spaghetti code but good software design practices do. i also wanted to give a list with valid reasons for microserives to make people think about if they adopted microservices for the wrong reasons. one of the big takeaways is that microservices can be adopted gradually and the complexity to start with them is not worth it in many cases. my next blog post is about dependency inversion and how to write software that can evolve into microservices eventually.;0
keb59za;Reddit;2023-12-21 12:08:25;your missing the required deployment. a proper microaervice should be able to have a staggered release of changes. if you can't stagger releases ... what's the point of microservice in the first place?;0
keb1shh;Reddit;2023-12-21 11:25:12;that sounds more like the distributed monolith school of system design than a set of cooperating microservices.;0
keb1efy;Reddit;2023-12-21 11:20:15;is it hot? i mostly see people criticising microservices these days and saying monoliths are amazing. i'm sure in a few years people will realise that monoliths modular or not also have their downsides and round and round we go.;0
kebysh5;Reddit;2023-12-21 16:19:24;i agree with everything you said but i dont feel the author makes a clear argument. you shouldnt adopt any practice without reason but it seems like the author was focused on issues from poorly implemented microservice architecture without comparing the pros and cons of either approach when properly implemented.;0
kebcgda;Reddit;2023-12-21 13:26:38;the biggest advantage is the ability to deploy services independently without breaking the things around them. i concede that having the processcontainer isolation provides a protection against spreading of failures like memory leaks fatal crashes etc. this does happen but i don't think it's a frequent problem in memorysafe languagesruntimes or shouldn't be at least and can be mitigated to a significant degree by a good test suite. that your change cant cause a random side effect elsewhere because you arent changing or redeploying those things i don't see how microservices handle this better than monoliths. i mean in the monolith you still want to use encapsulationmodularizationprogramming to contract changing one area of the code shouldn't affect other parts just like that. there are situations where the contract is incomplete client caller relies on behavior which isn't part of the contract etc. but it's all the same in the microservices and monoliths. i mean on a fundamental level microservices just insert network calls into the interactions between modules aside from the resource isolation conceded above how does this help to functionally isolate the functionality? generally found you need events to fully decouple your services. people use coupling as a swear word but i love it. it's awesome that i can call a method and get the result immediately with no retry waiting for an indeterminate amount of time etc. coupling is straightforward easy to think about easy to debug. business product people love it as well since it enables very nice properties like synchronicity transactionality time determinism immediate consistency. decoupling is sometimes necessary but it also incurs costs and should be used where the situation requires it.;0
keay1xu;Reddit;2023-12-21 10:35:51;nicely worded article albeit a bit clickbaity but i guess that's a must to get some traction. thought it was going to be yet another it's popular to hate on microservices right now so here's another one. poorly thought out insert popular architecture is always bad. monoliths are good if properly implemented microservices are good if properly implemented. there will never be a onestop solution for any business. i'm right now dealing with companies in a small country who only has customers in that country and my job right now is to tell them yagni when it comes to micro services kubernetes etc. simple scaling horizontally as well as some redundancy will suffice when you know you're never going to be above 10 reqs except for peak hours. i usually just end up telling teams to implement a monolith to start with but to consider what parts may need to scale out to a micro service at some point. basically make sure to properly separate concerns so that it will be easier to refactor in the future.;0
keb3tta;Reddit;2023-12-21 11:50:42;i think the article didn't give enough direct attention to one of the primary benefits of microservices enabling continuous deployment. ensuring independence data and deployment artifacts between microservices ensures that i can independently upgrade and deploy microservices without affecting each other. there are many other potential benefits though. another benefit is technology independence. microservices don't all have to use the same stack. if i have monolithic application then it will necessarily be in a single tech stack. honestly an article like this should imo be structured along the lines of microservice qualifications in the first place and show benefits and costs of each aspect. this is a very incomplete treatment of the subject and fails to really show why a microservice by default architectural guideline would not be a good thing in at least in larger organizations. i think it goes without saying that small to medium organizations perhaps benefit more from sticking with monolithic architectures by default more than any opportunity cost they incur. then again your article really seems targeted towards small shops in the first place. the context of your target audience is not clear at all to me at least. anyway microservices are a much more mature subject area these days. thishttpslearn.microsoft.comenusdevopsdeliverwhataremicroservices is an excellent starting point for definitions and benefits. the article didn't define your own definitions after all. if your article was a roundabout way of saying that hexagonal architectures are simply better and should be the default in most organizations then that could use specific focus instead.;0
kebdv5b;Reddit;2023-12-21 13:40:08;the point of microservices is primarily horizontal scalability of specific parts of your code. cutting up the codebase is just an additional benefit that might happen. all the other benefits that exist are just bonus if they occur. i feel like half the critique of microservices comes from people trying to use them incorrectly not for their purpose but because its cool which is a running theme in tech solution;0
keb48zk;Reddit;2023-12-21 11:55:55;oh yes definitely. i'd have been one rich motherfucker if i'd gotten paid per line of code too every microservice had to use the same 7project template too.;0
kejv8k9;Reddit;2023-12-23 03:45:33;however cooperating microservices that isn't just a distributed monolith is an unlikely scenario in many cases. because to get that you actually have to design something and futureproof it. you can't just make up adhoc stuff as you go which seems to be a common theme among projects that misuse microservices. you can't just divide work and sandbox developers.;0
kejxdxy;Reddit;2023-12-23 04:03:07;besides code size just isn't going to be much of a concern in many cases. and it isn't like microservices automatically improve on that if anything there will be a lot of duplication.;0
kec8iti;Reddit;2023-12-21 17:20:59;runtime architecture code organisation deployment pipelines test suites business logic... all related but different domains. the lambdas are deployed together as an api collectively known as a service. they share the same authorizer for the aws account they're deployed to. they can be individually tuned for memory cpu lifecycle timeout metrics. they operate on one more files databases queues other apis... api endpoints become testable building blocks and we tie them together through ui tooling. employees can authorize against endpoints based on their role within the business. almost all readonly endpoints can be accessed by all employees. third party users have separate api access based on their roles. running costs are kept low at the expense of cold start latency which melts away once the system gets regular traction. different parts of architecture can be deployed redeployed to any of a dozen aws accounts for dev test prod reasons hosted domains matched to the account to figure out where a service is deployed. infrastructure is tagged by team purpose and function for compliance cost and auditing. i used to be a ec2docker server management devops this relatively new world of event based architecture and microservices is much simpler to run then what i've historically known to work with but it has a massive upfront cost in complexity it very much cannot be ran as a whole on a local machine. however all the ui tools are static htmljs typescript and can be developed against real services from localhost and that rapid develop cycle for a better t of upfront api work means we can turn round fully hosted features and new services in days and hours instead of weeks and months.;0
keb5w6d;Reddit;2023-12-21 12:15:56;i agree there's a reevaluation going on but just like with the microservices the mindshare takes its time to propagate. i'm sure in a few years people will realise that monoliths modular or not also have their downsides and round and round we go. well it's not a dichotomy there are more options compromises than that. like getting rid of that micro and we're back all the way to soa. i also think there aren't really many people who always oppose splitting off some responsibility from the monolith the controversy is more about whether the microservice architecture should be the default one you start your project with or whether you split off services as you understand your needs better.;0
kebdyzu;Reddit;2023-12-21 13:41:09;it is mostly that we now have developers who've never seen a meaningful real monolith in action. when your entire career is microservices your toy monolith probably looks really good. they haven't yet seen the reality of the ball of mud monolith that inevitably results when driven by the political processes in 99 of businesses out there. people talking about carefully cutting out a section of a monolith when they need a microservice have never seen a real monolith. they haven't seen the pain of a logging method for some reason reading .config to get database credentials to read shit out of the database.;0
keby528;Reddit;2023-12-21 16:15:06;i work with enterprise ecommerce businesses and what i hear along the above lines tends to be things like we went from deploying every quarter to deploying any time of day. and it's not a flip the switch overnight change. one team talked of going from deploying every two months to deploying every two sprints to having their cicd practices down to the point where the business can't move faster than it can provide. that working on monolithic systems means waiting for all the teams to complete their code before deploying. downtime for upgrades. microservices definitely isn't for everyone but in ecommerce you've got the kind of rapid application scaling needs that can cost a lot of money if your application can't keep up with demand. and you've also at a certain size got to be able to serve a variety of similarish applications websites mobile apps instore devices b2b purchasing systems commission calculation systems erps warehouse management systems and an often dense forest of third party systems.;0
keb45io;Reddit;2023-12-21 11:54:43;technically youre using messaging every time you call a function of the method of a class in the same process. if thats what you meant great but then thats not what im talking about. yes its possible the modular monolith where you use the compiler and pubsub in the same project to simulate network calls without the physical issues it can bring thats also not what im talking about. im comparing bad code in a monolith with good distributed microservice architecture. if you compare a well built monolith with a bad built microservice architecture then its the same idea. whatever you do it proper in the right context will be a good job regardless of the architecture you pick. understand the tradeoffs. i never said you cant use messaging in one single server.;0
kecfi64;Reddit;2023-12-21 18:03:35;another benefit is technology independence. microservices don't all have to use the same stack. i never understood why this would be a good thing. you don't hear people praising express because you can structure your code in any way you want. supporting different stacks seems like it would lead you to reinvent the wheel a lot lock out team members based on competence need to hire for lots of different technologies not be able to reuse coding practices and documentation not be able to reuse infrastructure not be able to merge microservices etc.;0
kec2aqx;Reddit;2023-12-21 16:42:01;every microservice had to use the same 7project template too. taking the 'micro' out of 'microservice' one useless requirement at a time.;0
kecjwhk;Reddit;2023-12-21 18:30:07;this relatively new world of event based architecture and microservices the technology is new but job based processing and job processors have been around for decades. job processors can be async triggered too. same thing new words;0
kebeusa;Reddit;2023-12-21 13:49:19;honestly the distinction between soa and microservices is very vague to begin with. i think the only real distinction is soa was typically homogenous you'd make everything wcfsoap and all your web apps would be asp.net whereas microservices seems to imply heterogeneity. what most people are calling microservices is already no different to soa in practice. most people are balking on the heterogeneity part because of how annoying it is to manage one app in dark ages angular while another is asp.net core and another is blazor.;0
kecxkfn;Reddit;2023-12-21 19:52:59;adding to your point more modern frameworks and tooling well also just modernrecently built software that hasn't aged yet has made monoliths comparably easy and hard as microservices. it is far easier now days to build a monolith with shared libraries but scalable workers. ie one of the platforms we updated recently is micro serviceish in that while it is a monolith in must deploy at same time and cascade failures suck etc we have web workers job workers and data workers and each group of those can reasonably scale from one node to about 1015 depending on workload. this isn't an uncommon path more modern platforms are taking and as you say can still have problems cutting up into proper microservices but is still more a middle ground between. the base quality of all the frameworks for all everyone hates how much churn there has been has significantly improved on the backend in the last twenty years hell even the last ten or five. further while many mistakes can still be made it is less common for newmonoliths to make the logging method for some reason reading .config to get database creds to read shit out of the database mistake. still of course possible but less common as most frameworks base logging tools have gotten much much bettermore sane especially after log4j's snafu. older monoliths are still of course a problem we have a few at my work that are worse than your logging example but we try to chip away at them when we can.;0
kebjyh9;Reddit;2023-12-21 14:32:44;how does microservice architecture mitigate hidden coupling?;0
kee74ar;Reddit;2023-12-22 00:41:45;this is a usecase where there are microservices with a reason. if you have dozens of teams treading on each others' toes due to the complexity of orchestrating a release congratulations! you've found a reason to use microservices! if you have literally one developer working on a tiny web app in their part time then no you do not need microservices. it's as simple as that.;0
keb50jw;Reddit;2023-12-21 12:05:18;if thats what you meant great but then thats not what im talking about. no. colloquially when i hear messaging it's asynchronous. method calls are synchronous for the most part. where you use the compiler and pubsub in the same project to simulate network calls without the physical issues it can bring tbh i don't understand why you'd do such a thing. what i head in mind was use cases where the instances need to broadcast events like something changed invalidate your caches you have important transactions which must happen e.g. an event command to send out an email must be repeated until successful so you persist it as an event etc. whatever you do it proper in the right context will be a good job regardless of the architecture you pick. indeed. it's just that doing it right in the microservice architecture is usually more difficult and expensive than with a monolith. then it's a question of whether you're getting something valuable in return for this complexity increase.;0
kecja54;Reddit;2023-12-21 18:26:24;i think you have to take a longer view of things to understand it. try to imagine an architecture where you have several legacy systems with their own data sources they might even be monoliths in their own right. now integrate those with newer technologies for which it's actually much easier to hire folks. at a minimum microservices become a way to silo off the new developments so at least you can diversify your talent pool. now look at it from a modernization point of view. take the above imagined architecture and ask yourself how do i update all these older technologies to something more current? the answer is always divide and conquer and you naturally manage the risk around that by only updating one stack at a time in order to limit enterprise ripple. if you're at this point of complexity then you'll likely want to move towards microservices to give you a wee bit of extra future proofing. again microservices aren't for every organization and monoliths are necessarily more efficient. i know that i as a developer actually prefer to work on monoliths they're just easier to deal with. but once your organization is at the point where one or two monoliths are no longer manageable then starting to carve things into microservices makes a lot of sense.;0
kebu2y9;Reddit;2023-12-21 15:47:40;microservices can be corraled under larger orchestrative services all the while preserving independent deployments.;0
keb99sh;Reddit;2023-12-21 12:54:06;retries infrastructure reliability assurance alarms metrics dashboards not having to manage your own server build it once runs forever regardless of the load with auto scaling ddos protection etc. after you know how to do it the effort to build microservices the right way in cloud providers is order of magnitude lower as building all these things yourself since you dont have the running cost of maintaining the infrastructure yourself. of course you pay for it and you need to know how to do it right.;0
kejvu1v;Reddit;2023-12-23 03:50:24;well we do have those and they're fine. probably better than many microservices in the wild. think rdbmses identity providers load balancers that sort of stuff. in fact i'd say you're even more likely to succeed at services by going macro because those are more likely going to be inherently futureproof and looselycoupled. just not macro in the way that comment meant.;0
kebagp1;Reddit;2023-12-21 13:06:43;retries that's funny since it's a solution for a problem which the microservice architecture causes itself for the most part there are way fewer needs for retries in the monolith since you don't have the unreliable network in all your interactions. infrastructure reliability assurance alarms metrics dashboards not having to manage your own server build it once runs forever regardless of the load with auto scaling ddos protection how are these specific to microservices? after you know how to do it the effort to build microservices the right way in cloud providers is order of magnitude lower now scale this learning to whole teams and organizations. most microservice deployments i've seen were pretty bad. since you dont have the running cost of maintaining the infrastructure yourself. why are you conflating onprem vs. cloud with microservice vs. monolith? you can of course run a monolith on aws or wherever.;0
kemvoei;Reddit;2023-12-23 18:45:05;eventually you cant publish a fix to your module without signoff from the 8 modules that depend on yours or perhaps more painfully a full regression test of the monolith. there's no real different in the microservice world. one microservice depends on other ones based on the contract. same for modules within the monolith.;0
kebsyul;Reddit;2023-12-21 15:39:54;but then you still have to deploy it all together instead of just the module that changed. you may have decoupled modules but monoliths give you coupled deployments. microservices and certain flavors of soa can help you enforce the logical decoupling while allowing you to decouple deployment.;0
kebbzmv;Reddit;2023-12-21 13:22:06;retries are only required for io or inter companyteam communication. you concluded it right. scale the learning to whole teams and organisations. thats the whole point of the antimicroservice movement. there are solutions to scaling learning to orgs and ive done it successfully but very hard to apply on an existing org and it takes too long. leveraging managed infra. thats why im currently working in a 100m startup as the only engineer not interested in teaching. just need to make sure i hire those that already have that knowledge and more to add. as long as someone understands the principles then the tool cloud provider or language dont really matter.;0
ken0mdl;Reddit;2023-12-23 19:17:12;one microservice depends on other ones httpsmicroservices.iopostarchitecture20230328microservicearchitectureessentialsloosecoupling.html;0
kebd4zu;Reddit;2023-12-21 13:33:13;there's much more io in microservices than monoliths therefore much more need for retries. you concluded it right. scale the learning to whole teams and organisations. thats the whole point of the antimicroservice movement. it's one aspect of it. microservices are more complex than monoliths teaching an entire org to do it might take years and a lot of money. for such price it needs to have large benefits as well but for most organizations there aren't that many benefits. leveraging managed infra. again how is this different for monoliths deployed on a managed infra?;0
kebdmwx;Reddit;2023-12-21 13:37:58;there's much more io in microservices than monoliths in microservices done wrong sure. distributed monolith with a network inbetween. it's one aspect of it. microservices are more complex than monoliths teaching an entire org to do it might take years and a lot of money. for such price it needs to have large benefits as well but for most organizations there aren't that many benefits. or just hire ppl who already know these things. again how is this different for monoliths deployed on a managed infra? it's not a monolith as a pejorative term if done right. it might as well be also called microservice or service or proper way of building software. it seems like you're using the buzzwords for how other people used it and did it wrong and referring to that. i'm referring to something completely different. take a look at wittgenstein's beetle from private language argument and apply it to buzzwords in software. two people talk about the same name meaning two completely different things;0
ken64ui;Reddit;2023-12-23 19:53:41;qa should as more types of changes will require full regression testing. full regression testing is done by a comprehensive system test suite. our qa test only incremental changes and it works fine. users will when a small change takes down the entire app. it's not like this isn't happening in microservice world either. your auth service is fcked your whole system is fcked. devs should as building and deploying monoliths takes much longer. our ci build including tests takes 30 mins. deploying it on prod 40 app servers is i think 10 minutes. dev full rebuild without tests takes about a minute incremental a couple of seconds. dev startup on local environment takes about 30 seconds. that gives you the full system running locally. the build consists of 20 000 integration tests basically testing the api going all the way down to the database many of them parametrized. because we have basically just one service these tests provide a lot of assurance since they test pretty much everything apart from the ui i.e. not just testing the contract of one service in isolation. apart from that we have about 1000 full e2e tests including ui. the build is parallelized aside from that it would take a couple of hours to finish. this is a project with 100 full time devs.;0
kebg18x;Reddit;2023-12-21 13:59:43;distributed monolith with a network inbetween. which indeed happens because a lot of business requirements need that. or just hire ppl who already know these things. let me just quickly fire this software division with all their years of domain knowledge and replace them with 1000 fresh ehm actually very experienced hires they'll get up to speed in the domain in no time! it's not a monolith as a pejorative term if done right. it might as well be also called microservice or service or proper way of building software. ok so monolith is not an architectural style it's just bad software. i'm referring to something completely different. certainly looks like that.;0
keo7w0k;Reddit;2023-12-24 00:17:19;indeed it's a mature org. otoh i haven't seen yet a deployment of microservices out of several i've seen which wasn't severely dysfunctional and the complexity of getting a microservice architecture to work efficiently seems just so much larger than for the monolith. i've seen several lessthanideal monolith deployments but the level of dysfunction was usually much smaller than with the microservice based ones.;0
kebinxn;Reddit;2023-12-21 14:22:15;yes i interpret monolith in the pejorative sense as badly written software. then why are we arguing tautology if your definition of monolith is bad software? bad software is bad. all this time i thought we're discussing architectural styles. but the way theres no business requirement that requires a monolith there are many applications which require properties like transactionality immediate consistency etc. good luck doing that with messagebased microservice architecture.;0
kebno05;Reddit;2023-12-21 15:01:26;theres no such thing as immediate consistency. everything is async but closer together which creates the illusion of consistency. thats when you create things like transactions for a problem that can be easily solved with proper domain design. business who need consistency guarantee dont need a monolith they actually need to be eventually consistent in such a way that happens in milliseconds every business operates async for its business operations we programmers just tend to model incorrectly expecting the world is perfectly aligned to our twisted imagination. again modular monolith done wrong if youre doing it for consistency and transactions which doesnt exist in real life. have you heard of sagas? also have you tried to explain consistency and transactionality for a nonprogrammer? im the only engineer in an 100m company. i must be doing smth right with real microservices event sourcing and modeling the code according to the business which leverages conways law for reality not programmers overengineering talk;0
kesam6y;Reddit;2023-12-24 21:57:10;but you seem to be implying the latter. i'm implying that microservice architectures are more complex and thus more difficult to get right.;0
