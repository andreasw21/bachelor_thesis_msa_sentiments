ID;Source;Creation Date;Content;Sentiment
172taw3;Reddit;2023-10-08;Title:Antipattern: Microservices without reason, Content: https://www.felixseemann.de/blog/microservices-without-reason;0

k3yxakk;Reddit;2023-10-08 12:03:37;the best advice i've seen is to start with a simple basic allinone codebase aka monolith. when it needs to be split out into smaller services you'll know. you will not know in advance because requirements and reality over time rarely goes the way you think it does and projects can shift in completely unexpected directions that premature complexity will then bite you in the ass especially if you went all in and decided that since you're doing microservices you clearly need a k8s cluster and you absolutely must recreate an entire cloud network topology and you're drowning in pointless busywork. when you could have gotten away with a few fargateecs or lambdas or something basic and boring and moved on with life.;0
k3zfi4x;Reddit;2023-10-08 15:11:18;when it's small just start with a monolith. but be disciplined about module boundaries. that way you still have some benefit of independent development but no have the independent deploy. also in the future it will be easy to move into microservices when it's necessary.;0
k3yxy3h;Reddit;2023-10-08 12:11:53;focus on real software architecture what a nonsense statement. first know the difference between architecture on a service level such as onion or hexagonal architecture and architecture across multiple services e.g. api callbased microservices eventdriven microservices etc.. second ddd does not guarantee that service encapsulation is done right and does not lead to a distributed monolith with too many and fine granular calls or events between services. i have seen way too many projects where ddd was used like a cargo cult and the result was the same. to make matters worse sometimes the decision about the responsibility of teams for certain business domains is political and not about business. furthermore there is no architect like an enterprise architect or something like that which leads to improper dependencies between services and teams.;0
k40bou0;Reddit;2023-10-08 18:43:12;i think this is the right idea. if you've designed correctly moving a service out of a monolith and into a microservice when needed is easy.;0
k3zt3wt;Reddit;2023-10-08 16:47:55;i think the article would be much improved if it were about how hexagon or ddd architecture can be used in places where microservices are abused. that has tangible benefits for developers. otherwise it's the 14389th blog on doing microservices blind is bad.;0
k3zr208;Reddit;2023-10-08 16:34:28;without reading the article in today's world the bar for when you need microservices for any real problem is super low... do you have at least 2 different components with different orchestration requirements? bam microservices. hell even when i don't have multiple services planned for a product i still write it with the same design principles as i would a microservice because it's just a good way to design software. if it grows beyond the original scope breaking it down is no effort. if i still want my single service orchestrated works out of the box.;0
k40pbz8;Reddit;2023-10-08 20:02:50;death by a 1000 microservices.;0
k409u7o;Reddit;2023-10-08 18:32:06;on the ops side i kinda love microservices. wicked easier to scale up and out. monoliths are easy to work with until that one endpoint slows down the whole entire stack.;0
k405hoq;Reddit;2023-10-08 18:06:14;imo security is a good reason for microservice architecture. at minimum authentication service should be separate which can only access token signing keys and password hash db. other services could also have separate db users with access to the only tables they need.;0
k45p409;Reddit;2023-10-09 19:34:43;microservices rarely help with actual problems. and no they certainly do not help with spaghetticode which is the biggest misconception of them all. that's why you should have a reason for microservices. wait what ? rly ? monolith where you can blur bounded contexts boundaries as much as compiler lets you is good ? x200b symptoms of a badly designed microservice wait again badly designed architecture leads to all kinds of mess regardless of microservices or monolith;0
k407upp;Reddit;2023-10-08 18:20:24;this is basically the advice of the book building microservices. monolith until it hurts just organize your code properly so it's easy to extract later.;0
k3yz8n4;Reddit;2023-10-08 12:28:00;agree this what i saw when i was in team which started to build fully new system. having everything as microservice from start slowed development and dropped quality. my best recommendation is to start with one database multiple schemas and one monolith application. after experience it starts to be easu to split db to schemas which handle one service so that it has only one or two data sharing views to other schemas. then those db level data batches can be moved more easily when need arises to own microservices. there is use cases where i have seen that it is build as microservice from start but there is no technical need to split services as usage does not need it. that means lot of time spend to solve problem which does not exists. that said it does not mean that you should not think about those things during development phase you should...;0
k40l7w4;Reddit;2023-10-08 19:39:03;so relevant for me. we're always so quick to bring up microservices kubernetes and all that only to eventually decide we were using a sledgehammer to crack a nut.;0
k41jk9y;Reddit;2023-10-08 23:01:48;can't agree more i even seen people merging unnecessary microservices back! there is a catch though even if you know where to split you need to be careful with how you are approaching it and do it properly. sometimes people still share database for example this is socalled distributed monolith which wouldn't benefit you and will only increase complexity.;0
k43ill6;Reddit;2023-10-09 08:14:22;are microservices done as containers really that bad.;0
k407p8t;Reddit;2023-10-08 18:19:30;i saw this at a company i worked that was notorious for going all in on microservices. at the same time that architecture was our reality. in that environment are you really operating at the senior level if youre not able to design build and run a new system?;0
k42y8c2;Reddit;2023-10-09 04:57:09;oh and no one wants to do proper contract testing to ensure each service can actually develop and deploy without worrying about their dependencies breaking stuff from underneath them. or theyll do microservices but share the same data layer to save money cutting off the benefits of microservices at the knees.;0
k40vhww;Reddit;2023-10-08 20:38:33;what kind of application are we talking about? if it's web services you have to be a special kind of incompetent to allow one failed request to crash the whole thing. if we're talking about stateful processing apps then yes microservices are the way to go.;0
k40z7u1;Reddit;2023-10-08 21:00:24;everything you said is about redundancy not microservices. you can run multiple instances of a monolith. as a bonus you usually get the bin packing something like kubernetes would do for free via your thread schedulerexecutor.;0
k43og7a;Reddit;2023-10-09 09:25:40;imo you should always view your code as little machines communicating with each other through messages. in most cases it gives you a better architecture and it makes it easy to go from a single process to distributed microservices as the code is already written in the right style. for single servers you can use the actor model with something like elixir if you want to be able to hot reload code if not any big actor framework should be a good step in the right direction.;0
k3z4r53;Reddit;2023-10-08 13:31:54;i cannot rightly apprehend how in such a vast universe of computing any seasoned creator of software would espouse a single proper architecture. i don't think is about a single proper architecture but a proper process to create architecture. at least is how i've understand. the problem with single proper architecture is real is how we end up with the single architectural pattern microservices and recently serverless. it is like every damn problem has the same pattern solution. some years before was dependency injection and more years before was the only design pattern to rule them all singleton.;0
k3zdp8j;Reddit;2023-10-08 14:56:19;thanks man. i'm so sick of these kind of posts getting reposted all over the dev subs. scrum is shit microservices sucks donkey balls cloud is stupid and costs too much look at how much we saved going to on prem. fuck off.;0
k3zru7m;Reddit;2023-10-08 16:39:38;yes. what's with all these software architecture posts recently from people who have no idea what architecture is? all software architectures have a simple layering concept in common. have layers where each layer is only dependent upon the next inner layer. to cross from an inner layer to an outer layer introduce interfaces. that's it. sigh... that's it? i read this and i weep because someone is again giving out architecture advice without actually understanding what they're advocating. there's this saying you have agile organizations that embrace the principals of agile development and get great value out of it and you have bureaucratic organizations that copy the practices that they see from agile organizations having stand ups that last 20 minutes having retros that never change anything... and they 'look' agile but they haven't understood why they're doing those things they do them wrong and most of the time it doesn't work. it's actually net harmful rather than beneficial. 'dark scrum'. software architecture is the same. if you don't know why you're doing it then you're not going to do it right and you're not going to get any benefit from it. ...and sure as hell you shouldn't be telling people what they should do. if someone argues microservices remove spaghetticode by eliminating dependencies they are just plain wrong. microservices remove spaghetticode by eliminating dependencies. if they don't you're not writing microservices. you're just doing a bunch of services and calling them microservices. that's ok. doing them right is hard. if you don't understand how to do them right don't do them. if you don't understand the benefit you get from doing them you haven't understood what they are and you're just copying the patterns you see from successful organizations incorrectly. ...and building a distributed monolith.;0
k413dpu;Reddit;2023-10-08 21:25:04;also microservices are more resilient. it's just like the bulkhead resilience pattern applied on the application level. way better when one serious problem e.g. out of memory can wipe out your entire application.;0
k40ukuv;Reddit;2023-10-08 20:33:11;just organize your code properly so it's easy to extract later this part is almost impossible in a large growing startup. everyone will reference everything else for the sake of saving time and shipping it. and this is also one of the weird reasons people jump into microservices sooner they force you to separate the concerns properly. it's true that this is like hammering a nail with a microscope but it's better than hammering a nail with your bare hand.;0
k40mxob;Reddit;2023-10-08 19:48:57;microservices forces separation of concern and thats a good thing. if you can build proper verticals into a monolith theres no point in splitting it out until more fine grained horizontal scale out becomes a requirement. and even then aim for services that own a concern or maybe a class of entities and dont fall in the remote function call trap. if you need to know how a service works to use it or you have to constantly call it its not a service but a function call with higher latency.;0
k490kok;Reddit;2023-10-10 10:50:53;theres nowhere and i mean absolutely nowhere written how much code a microservice should have.;0
k3zxkx6;Reddit;2023-10-08 17:16:46;exactly people are bashing monolith because they think it leads to spaghetti code. no it doesn't if you have the self discipline and don't compromise it for velocity. one doesn't need to introduce a network call to properly separate two pieces of functionality. i would go far as claiming that unless you modularize your monolith before you move a functionality into a microservice it's likely to go bad as the result will also a group of microservices forming an unnecessarily complex network graph.;0
k3z71tj;Reddit;2023-10-08 13:55:30;but hey modular code existed for millions of years before anyone ever thought about micro service architecture. micro services are a technological answer to a political problem. good clean interface definitions between modules do not need the runtime and operational overhead that microservices impose. just organise the code well or enforce boundaries via compiler or service layer. heck if you wanna go strict and are pain resistant go for something like osgi and boundaries will be enforced.;0
k3zdds4;Reddit;2023-10-08 14:53:36;way worse imo only because with a monolith there is a clearer path back to sanity. cordon some portion of the code base off write detailed tests refactor repeat. with microservices you have to worry about all of that plus migrating data across services backwards compatibility between services and whatever infrastructure changes are necessary.;0
k4087ps;Reddit;2023-10-08 18:22:29;i'll never forget the ticket for putting 50 off until end of the year on our pricing page. it should have been a 10 minute text change. instead it turned into a 3 month new microservice called couponservice that could handle any generic discount. it took until the new year to release so it wasn't even useful anymore and we just scrapped it. dev still got promoted. the stupid thing went through design reviews and code reviews and requires new database tables to be created. so much wasted time. this is the worst example of this sort of thing i've ever seen.;0
k3z6ygl;Reddit;2023-10-08 13:54:36;the architectures that are prevalent in practice depend greatly on the problem being solved. some of those use microservices and i'm not convinced that it's remotely the majority despite it being talked about often. some problems are throway scripts others are ancient cobol programs from before some of the parents of the people who created this website were born. there's collections of vba pasting together excel spreadsheets bespoke handcoded assembler for microcontrollers with 1k of ram amorphous blobs of huge and important matlabfortranetc programs kernels written in c compilers written in haskell whatever the flavoroftheday and yesterday and ten years ago and twenty is in javascript aging legacy c programs lua application scripts billiondollar unreal engine games etc etc etc. only the tiniest fraction of programmable computers out there are a server or a desktop and on those even a small fraction of programs are applications. there has never been a right answer across every or even most domains of code and the closest to a pervasive paradigm i've seen is imperative programming because many times it's the most convenient.;0
k3zotss;Reddit;2023-10-08 16:19:22;microservices suck because i experienced still am microservices hell. 6 solid years of wonderful experience.;0
k42tql5;Reddit;2023-10-09 04:24:09;while i understand your point i've seen startups not separate concerns properly with microservices. a common shared library with tons of business logic and direct database access...which is shared as a package across 10 services all readingwriting to the same database servers and tables. with a depth of inheritance of 10. and different teams all adding the kitchen sink into the one common library. so basically a mess of a monolith with the added complexity of distributed messaging transactions and networking issues and distributed deadlocks. with no logging traceability across processes. or the ability to easily debug things. just because monoliths can be a mess doesn't mean people don't make equally large or even worse messes with microservices. it's often done because it's easier for developers to pretend they don't need to coordinate and all just work in their own sandbox. yet over time reality sets in that it isn't really their own sandbox.;0
k43u0nr;Reddit;2023-10-09 10:40:45;they force you to separate the concerns properly the question remaining is if you can't get separation of concerns right in a monolith style application what makes you think you can get it right in a distributed application? to play devil's advocate at least the monolith start up managed to ship it. the microservices one may be dead already or at least taking way more time and effort for a result which could easily be just as bad or worse. update grammar. i'm awake now .;0
k432js5;Reddit;2023-10-09 05:31:25;microservices forces separation of concern and thats a good thing. only if you are doing them right and really the same thing can be said about that monolith. it's not as if anything inherent in separating that code actually forces the decoupling of it.;0
k402brk;Reddit;2023-10-08 17:46:51;that's the kind of anecdotal thing the comment you replied to was complaining about. i'm currently working on microservices and although there are many issues i shudder to think how much worse it would be if the thing was a monolith. just because a microservices project is crap doesn't mean it's crap specifically because it's microservices.;0
k40wm4w;Reddit;2023-10-08 20:45:13;microservices can be a hell if you just screw up every aspect aka distributed monolith without proper monitoring tracing and shitty applied ddd if even ddd was seriously a concern. i speak out of experience. but i haven't say microservices are doomed. unfortunately there are always people that screw things up for personal or political reasons.;0
k490t0g;Reddit;2023-10-10 10:54:00;if you have discipline you will keep domain contained within a single microservice or thou shall not share databases or db schemas or thou shall not have shared dependencies to cut the crap microservices require discipline too. imho much much more discipline.;0
k3zfl3e;Reddit;2023-10-08 15:11:56;i'd wager that the vast majority of companies using microservices don't actually need independenly scaling services at all. you need to get a lot of traffic or very heavy computations before it's actually needed.;0
k3zcjis;Reddit;2023-10-08 14:46:18;monolith does not preclude horizontal scaling. this has more to do with whether your internal architecture holds session state in memory or not. ideally you would want requests to be stateless or keep state in a shared store same strategy as for microservices really. if i'd need shared state across nodes i'd probably add a external cache or abuse a database for it. that makes shared state ok to handle and does not bind sessions to physical nodes. look at it this way if i give you an api schema behind a gateway host how would you tell whether you are served by many microservices or by a monolith that just runs as multiple copies of itself? scalable architecture does not need microservices although micro services can help with more efficient resources use. but again for 99 of the cases i'd wager the cost benefit between the two would not be clear cut. what you save in hosting cost you pay in development and operations cost. you need microservices if you have multiple independent teams that need to develop and evolve their part of the code without having or wanting to coordinate with other teams. and obviously even that has limits as breaking your public api still gets you yelled at.;0
k409fqy;Reddit;2023-10-08 18:29:45;what about it? microservices don't scale easily. you can run as many copies of a stateless monolith as you want behind a single load balancer. if you try that with microservices you need to start adding extra stuff like internal load balencers. if you couldn't figure out one you aren't going to be able to maintain one per service.;0
k401gis;Reddit;2023-10-08 17:41:28;microservices are sometimes used as a way to save developers from themselves for this reason. instead of giving people time to design a system and implement design patterns etc. that will allow strong modularity in the system companies and devs drank the go fast and break things koolaid up front but then when it comes time to redesign and fix the broken things there suddenly isn't capacity to do anything more than apply a bunch of bandaids. so basically i think the bigger problem is an issue of process. microservices and monoliths both have their places and will both be a nightmare if you don't get a chance to properly maintain redesign and rewrite the parts that either don't work as they should or that are written in a way that is unmaintainable.;0
k44hfe2;Reddit;2023-10-09 14:55:49;i don't think it's an easy problem to solve in a monolith but i do think it's strictly easier than the same problem with microservices.;0
k46mmnq;Reddit;2023-10-09 22:53:37;that's the kind of anecdotal thing the comment you replied to was complaining about. only because it's anecdotal doesn't necessarily means it's false. as i wrote elsewhere assuming the system in question is not trivial as soon as you decide to design it entirely as microservicesyou immediately introduce a ton of unnecessary accidental complexity most of it i say it's due to the distributed nature of the architecture. the lack of acid transactions across microservices makes it even worse. etc etc. so yes 150 microservices interacting with each other to accomplish simple tasks is a kind of hell compared to a wellwritten monolith no matter how well you write your microservices. it's a whole lot of complexity that not only you don't need to add you shouldn't add.;0
k46ljz7;Reddit;2023-10-09 22:47:12;assuming the system in question is not trivial as soon as you decide to design it entirely as microservicesyou immediately introduce a ton of unnecessary accidental complexity most of it i say it's due to the distributed nature of the architecture. the lack of acid transactions across microservices makes it even worse. etc etc.;0
k3zzbl1;Reddit;2023-10-08 17:28:08;and the majority of companies using microservices overlook the overhead of microservices and will have worse performances than using a monolith.;0
k403hni;Reddit;2023-10-08 17:54:08;i agree with this 100! but find that whenever the topic of microservices v monoliths comes up you get lots of people bashing micro and almost preaching monoliths while ignoring the points you mentioned. that if you have poor design and processes in place that lead to microservice hell then youre most likely going to have the same issues in a monolithic setup;0
k46sktf;Reddit;2023-10-09 23:30:41;unnecessary accidental complexity but you're implying that everyone doing microservices is adding complexity that is unnecessary and that they're adding it without understanding the ramifications. i think plenty of teams use microservices because it plainly works for them better than a monolith. especially when it comes to large 50 dev teams. it's a whole lot of complexity that not only you don't need to add you shouldn't add. dogma. monoliths fit some projects microservices fit others and other approaches fit everything in between.;0
k48sa63;Reddit;2023-10-10 08:57:29;you sound like the only viable solution is always a monolith do to this. but there are requirements for some systems that are relative laxe about consistency. so there is no need acid or a distributed version of it which is indeed hellish. for instance in a event driven system consisting of different teams with different teck stacks but clear contracts for events you can use a orchestrator or coordinator approach to roll back things in a distributed system with no need for acid. but all these things depend on many requirements to fit in. there might be cases where transactionality and acid is a thing but as said before not all systems need this. i agree about the stark rise in complexity in certain fields like networking especially when using remote calls. but there are solutions like resilience patterns like retry bulkhead and circuit breaker as a combo to mitigate effects. if it's done wrong and naive things become hellish. in the end microservices require more experience effort and discipline do get done right.;0
k416wuc;Reddit;2023-10-08 21:45:48;you can enforce pretty much everything in a monolithic system. most build systems are multi modular. if you set module dependencies correctly they won't have the candy. it's much cheaper then going full microservices if all you need is module boundaries.;0
