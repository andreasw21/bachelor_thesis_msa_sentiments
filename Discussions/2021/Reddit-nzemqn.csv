ID;Source;Creation Date;Content;Sentiment
nzemqn;Reddit;2021-06-14;Title:Disasters I've seen in a microservices world, Content: https://world.hey.com/joaoqalves/disasters-i-ve-seen-in-a-microservices-world-a9137a51;0

h1pincd;Reddit;2021-06-14 09:43:17;a very good read. usually when working on microservices we take a more 'macroservice' approach or how others jokingly call it soa done right we keep the bounding context domain fairly big and only grain further portions shared between other macroservices. so instead of having 'authservice userservice permissionsservice postsservice threadsservice ratingsservice categoriesservice articlesservice newsservice' you'd want to have 'portalservice forumservice authservice newsservice' while not as scalable as having more microservices it's significantly easier to work on update test and optimize.;0
h1pap2n;Reddit;2021-06-14 07:47:13;1 is especially relevant to the company i work for. on my team of 5 we manage about 25 microservices and counting. there's some we technically own but no one currently at the company has actually touched meaningfully. i'd also like to point out some of these like failures in a distributed system create more pressure on the other perhaps questionable design choices. e.g too many services makes code rot worse. code rot makes debugging live systems harder. hard to debug systems lead to worse outages. bad outages lead to writing new services to replace the ones that are poorly understood and neglected...;0
h1pd7t2;Reddit;2021-06-14 08:22:05;yeah fully agree with this. and i will say i'm slightly less optimistic than the author. it's not that microservices don't have a point but in the end it mostly feels like management saving money due to rapid deployment then later being able to whittle away at maintenance costs because they can be quantified per service. they would in theory be higher but by forcing code rot acceptance they can actually keep them lower. net result is that the software gets off the ground very quickly but ends up being in a worse state longterm and also being rather fragile bugs often cause long chases of finding the source and the specific cause.;0
h1qlzz0;Reddit;2021-06-14 17:19:09;for consultants microservices are amazing because they create so many new opportunities for highpaying consulting.;0
h1quj3n;Reddit;2021-06-14 18:23:21;a related problem is that microservices are poorly defined.https especially see replies to uscottypants2. it's difficult to study classify and debate the usage and patterns of microservices without clear agreedupon definitions.;0
h1pmnea;Reddit;2021-06-14 10:49:14;most engineers forgot though that while solving an organizational problem at the software architecture's level they also introduced a lot of complexity. i'm sure a lot of engineers forgot. but also a lot of engineers were given little choice. consultants and managers in a circlejerk kept telling each other that microservices are the next big thing and even if engineers did object it would often fall to deaf ears.;0
h1pwi5k;Reddit;2021-06-14 13:21:25;i'm so sick of hearing about microservices. even if they are worthwhile for some enterprises they have made normal development 10x harder. every man and his dog wants to try applying random aspects of microservices to monolithic architectures for no reason. there's nothing worse than a big system hacked in to random smaller pieces by people who don't know what they're doing and the reality is that's what microservices usually are. the word is supposed to imply discipline and engineering but it usually just means cloud spaghetti because nobody knows what's going on. and yet you can't get a job if you haven't spent several years messing around with this crap.;0
h1pfml2;Reddit;2021-06-14 08:57:10;i think what's described in the article is a series of organisational bottlenecks. once you optimize for microservices the sites at which you develop and deploy code can effectively reduces close to zero so now you have lots of code in production you have a new bottleneck on human cognition to debug and diagnose system level issues you have a database bottleneck or multiple such bottlenecks and so on. i tend to organise teams around good services httpsgood.services that value too an end use. you can infinitely optimise code and architectures to run more efficiently but if you're not providing a valuable service we're in trouble. you could relabel the article as nice problems to have because of continued use growth. the solution to many of those problems lies with what's good for the user? up to and including how do we make this service profitable to run for the company so that we can continue to support an affordable product for our end user. i'm watching my current company go from monoliths to microservices from physical data centers to cloud but they've not fully embraced cicd for infrastructure yet and are still thinking in terms of traditional dbs. it's a long way to go for people with 1020 years of monolithic services to transition to cloud based architectures. so comes the next bottleneck time for training and development.;0
h1pjvzx;Reddit;2021-06-14 10:03:16;suddenly teams with 20 engineers were maintaining 50 services. that's more than one service per person! yea so? most of my microservices have one function not counting boilerplate. i'm using microservices so i can make changes to the download and parse bank of americas pseudoxml files service without shutting down the upload bond orders to knight service. it doesn't take much documentation to keep track of things. and these services go for months or years between changes.;0
h1qzvgz;Reddit;2021-06-14 19:02:09;this is why it's crucial to only go into microservices if you have an architect who knows exactly what they're doing. we went with microservices each environment has 250 services but utilized various design patterns and technologies to make it incredibly resilient. cqrs with versioning of state addresses eventual consistency you can change state only if the current state asserted matches what you expect which also leads into using events and event sourcing which both provides you with guaranteed consistency when needed and also allows you to subscribe to changes without having to make queries. process managers with idempotent steps allow you to build resilient workflows that no matter when the process is interrupted including abrupt shutdowns of your service allow it to continue to work fine on startup. for core libraries shared between services we automate both the updates and refactoring as part of our cicd pipeline very rarely do we need to manually refactor. it's a large overhead to implement and needs to be done correctly but when it works it's incredible.;0
h1s4gd7;Reddit;2021-06-15 00:06:26;i just got my first programming job and it's at a huge credit union. they're trying to convert from archaic mainframes to microservices turning everything into rest api. should i be worried?;0
h1swbhe;Reddit;2021-06-15 04:00:56;somewhat related a fantastic hourlong rant from bryan cantrill that starts off with a microservices disasterhttps which i would love for more people to be exposed to. probably my favorite video on youtube.;0
h1zh2qm;Reddit;2021-06-16 18:33:21;to see what factors tend to indicate success this is a draft of a survey i'd like to see 1. how big is your org? 2. how would you rate your microservicebased systems a to f scale. 3. how many each of developers domain analysts and architects do you have? 4. how many microservices do you have? 5. what's the average size of team devoted to each microservice? 6. what's the average lines of code per microservice? 7. how many staffers work on more than one microservice? 8. are the microservices used mostly on your domain core function side functions such as administrative or a mix? 9. do you partition most microservices by domain orders suppliers marketing etc. by technology ui user securityrole database etc. or a mix? 10. do you partition your databases to fit the microservice partitioning? yes no mixed 11. what are the biggest factors microservices improved and what are the biggest headaches? 12. how long have you been using microservices in production? 13. do you have centralized microservice shop standards and conventions management? yes no partial. 14. how would you rank the benefits top to bottom? a. team management b. deployment flexibility c. performance scaling d. technology mixing different languages and databases e. other;0
h1pk13t;Reddit;2021-06-14 10:05:32;another smell was when someone told me that deploying a new feature in service a also needed a deployment at the same time in service b. agreed. if you have services calling other services you aren't really building microservices anymore. what you have is a distributed monolith. sometimes that's the right decision but usually it's not. so think hard before you build one. edit you may hate the term distributed monolith but ask yourself how many services do i typically need to alter to add a database field that is displayed in the ui? if you find yourself saying well i need to add it to the persistence microservice and the business logic microservice and the presentation layer microservice then you have a distributed monolith. it doesn't matter if you can update individual layers in theory. what matters what you actually do which for many of you is version and deploy them as a set.;0
h1qt83g;Reddit;2021-06-14 18:13:42;while not as scalable as having more microservices i agree with everything else but why would you say that? i'm assuming that we're talking about rest style servers. if so they are 100 scalable by default. it doesn't matter if you have one massive service or a thousand tiny ones if you throw more hardware at it you can scale it in both directions.;0
h1pk4l4;Reddit;2021-06-14 10:07:06;here's what i learned. https;0
h1ra0ar;Reddit;2021-06-14 20:17:19;i think using proper rpc system like grpc or similar would solve a lot of the issues i've heard about microservices.;0
h1pn5rk;Reddit;2021-06-14 10:58:02;i think this is conditional on the team and project. a cohesive team with strong cicd practices and a well maintained monolith isn't likely to experience higher velocity from adopting a microservices approach. the main advantage of microservices from a managementorganizational pov is reducing the need for onboarding and allowing development to proceed with large numbers of lowskill devs who can work out of sync with each other. additionally the approach creates a homogeneity in architecture and code quality that is more attractive to managers.;0
h1qml83;Reddit;2021-06-14 17:23:39;yep conway's law software architecture reflects the communicationorganizational infrastructure of the teams that designed it goes both ways. you need to be flexible in your team organization and organize around the software architecture you want. if you have pure microservices chaos it's usually a symptom of an organizational problem where nobody really talks to anybody and everybody does the minimum to get the job done. you do not want a manager or tech lead's job to be tied to a specific piece of architecture. you want them tied to a business need and for the software to shift and evolve around that need. this can be done with microservices but the key thing is that you need to be willing to let a service die off rather than drive the organizational structure due to its need for continued maintenance. on the other hand you don't want to casually reinvent the wheel unnecessarily.;0
h1r0r70;Reddit;2021-06-14 19:08:38;every man and his dog wants to try applying random aspects of microservices to monolithic architectures for no reason. it's not no reason it's often to get buzzwords on one's resume so that they can be hired somewhere else for more money. the victim company is an unwitting training lab 🐁 spaghetti stacks are also job security as nobody else knows what the hell is going on inside.;0
h1sd0gt;Reddit;2021-06-15 01:13:33;i guess i dont understand because i built and use a microservice architecture that is amazing. but we have max 7 services and only break down to a microservice if it really makes sense. if i had a project with 250 microservices my anxiety would be insane.;0
h1r08c2;Reddit;2021-06-14 19:04:48;but they've not fully embraced cicd for infrastructure yet and are still thinking in terms of traditional dbs. i generally see db's as mostly orthogonal to the microservices versus monolith debate. how about an example?;0
h1r1k0f;Reddit;2021-06-14 19:14:36;i'm using microservices so i can make changes to the download and parse bank of americas pseudoxml files service without shutting down the upload bond orders to knight service. why do you need microservices for that? i've seen such successfully done even back in the dos days pulling in multiple customer routine data loads. what forced you to tie the two services together before microservices?;0
h1qntqt;Reddit;2021-06-14 17:33:00;it sounds like you're doing it right then with services based on business needs. i mentioned elsewhere that conway's law works with both ways. microservices become hell when they're designed around established internal organizational boundaries rather than business needs. this isn't at all apparent when it's one guy or one team maintaining everything. also joel spolsky's guidelines still apply. you should always be able to checkout and build in under 10 minutes of developer time some unattended downloadcompile time notwithstanding. every developer should be able to run tests that give high confidence in the results quickly and frequently. it's microservices is no excuse if you can't actually debug a service on a new machine without days of setup that may or may not actually reflect a reasonable facsimile of production. a microservices architecture without the organizational discipline to support it properly is just a cthulhu monolith.;0
h1tgl0b;Reddit;2021-06-15 07:26:32;i'm using microservices so i can make changes to the download and parse bank of americas pseudoxml files service without shutting down the upload bond orders to knight service. you could also have your infrastructure do a rollout. a new instance of your service is spawned traffic gets routed to the new instance while the old one finishes what it was doing and terminates. for all its warts kubernetes handles this perfectly. now if two parts of the system do complex enough things that can be performed independently it might make sense to split it two but i'm not sure using microservices just to be able to make changes to a live system is a good reason.;0
h1tnxjv;Reddit;2021-06-15 09:06:00;tbh i like it for one simple reason and it is deletability. i've seen dead code persist in monoliths for literal decades because nobody trusts themselves to remove it. with microservices you just turn it off.;0
h1r2sqk;Reddit;2021-06-14 19:23:46;it matters a fair bit when scaling. if your macroservices encompass few smaller services you can no longer scale them independently. if you have a forumservice macroservice that contains 'postsservice 80 of the traffic' 'threadsservice 15' 'notificationsservice 5' you have to scale the whole forumservice which gives each service a 33.333 performance boost per instance despite the disproportional traffic. if you have independant 'postsservice 80 of the traffic' 'threadsservice 15' 'notificationsservice 5' you can simply scale just the 'postservice' and give it 100 performance boost per instance. arguably the performance boost could be less than 100 divided by numofservices with the macroservices due to how resource management works and it could be less than 100 performance boost with microservices for a given service per instance due to load balancer increased network usage between services due to there being more of them overhead that comes from technologies used and so many other factors so take these values with a grain of salt.;0
h1qfot5;Reddit;2021-06-14 16:29:53;large numbers of high skill devs i would think. many microservices introduce new failures modes make the environment harder to debug and reason about this is worth it if you are faang scale and planning merging monolith updates is impractical but if you are smaller the additional complexity may not be worth it.;0
h1rv9dj;Reddit;2021-06-14 22:58:55;true. this is called resumedriven development. we're stuck in a cynical cycle of horrible developers hopping from job to job picking up the jargon and using it to get their next position. this forces everyone else to toe the line. this needs to stop. most businesses do not need microservices. the fact that nearly every single job ad has microservices on it just shows how effective propaganda is.;0
h1s8gv8;Reddit;2021-06-15 00:36:26;this has worked well and we have 4 developers managing about 20 or so services. um this seems backward. maybe you mean something different by services? although the definitions for microservices are all over the place as mentioned elsewhere one of the few common threads is splitting up large development teams so they can focus on portions of a big application and versionmanage these portions independent of other subteams and subportions. 4 devs can usually selfcoordinate a single exe executable just fine. if not fire the bstards. microservice shops tend to have hundreds of developers. note that i've seen this done without any need for a web service or json for both clientserver desktop applications and web applications. the rdbms is the common point of contact between multiple exe's. for example there may be an enduser module exe a nontech manager module and a tech manager module for the same application in a large sense of application. for instance a timesheet application has employees who enter their time time keeper administrators and a technical console for monitoring and troubleshooting. all 3 tend to share the same database tables but are different exes. however some claim microservices also means splitting up the database which may not be what microservices are about.;0
h1r36dq;Reddit;2021-06-14 19:26:37;the alternative is one application that performs all of these different processes. which i have done. right now the nba is running a windows service i built that could have been subdivided into 4 individal applications instead of one large application. i chose not to because all of those processes had to be versioned and deployed as a unit. deploying 4 applications instead of just one would have just been an annoyance for no benefit. when i was working for a bond broker it was a different story. there i regularly needed to bring down individual processes during the business day without affecting other processes. so there i used a microservices architecture. at the end of the day the question should be will deploying this functionality as a single application or multiple applications be better for my specific situation?. and i do mean specific. using or rejecting microservices because of vague notions of scalability or loose couplling only ends in heartache. if you don't know why you are using a pattern the chances of using that pattern correctly are close to nil.;0
h1sxlk5;Reddit;2021-06-15 04:12:07;when they break they break hard. i need to be able to slam the off button on a process without affecting anything else. at the bond broker that is. for the nba an hour of downtime is nothing so microservices weren't necessary.;0
h1polo6;Reddit;2021-06-14 11:22:50;i was confused as well but i think users in this case means microservice that requires access to the database.;0
h1qm2iw;Reddit;2021-06-14 17:19:42;microservices does not mean soa. you can implement soa as microservices but why would you want to? we discovered that soa was a bad idea for most companies 20 years ago. nothing has fundamentally changed since then. if you're netflix then yea soa makes sense. you can afford the extra engineering and hardware overhead because you can't allow the whole website to crash when one piece isn't working. my clients aren't netflix. every service to service call is a another failure point waiting to break. so i don't add them unless i really really need them.;0
h1sqw1o;Reddit;2021-06-15 03:13:57;and people don't understand why old fogey's like myself aren't always eager to jump on the new hotness. after you've seen the hype cycle in tech a few times you learn to be more circumspect. for example i wouldn't trust the architectural decisions of anyone who views monoliths with suspicion. anyone who thinks the monolith pattern is inherently bad or poor is probably too excited about microservices to use it in a balanced way. we're just now as an industry coming down the tail end of the microservices hype cycle. in another few years we'll have something else to take entirely too far. it's just how we are as creatures.;0
h1s64ze;Reddit;2021-06-15 00:18:59;doing it because it works for google is the point here. microservices have some good points as well. but jumping right to kubernetes for your startup is a completely foolish move.;0
h1s5isr;Reddit;2021-06-15 00:14:47;the fact that nearly every single job ad has microservices on it a phb keeps hearing about microservices and worries that hisher shop might not be ready for it when it comes whatever it is and so sticks it in the org's job ads just in case. industry is stuck in a cynical cycle yip. i'm writing a minibook on this very issue. i plan to publish it for free. it was inspired by reading warren buffett's criticism of the finance industry for it mirrored much of the hypecrap in it. kiss science and yagni have been beaten bloody and buried in the nevada hills to sell products and services using fearofobsolescence. a manager like dilbert's boss;0
h1sdgie;Reddit;2021-06-15 01:17:11;i didn't say we were doing microservices. in fact i made it a point to just say servicesoriented units. soa should absolutely establish data ownership domain boundaries and interfaces.;0
h1rfk2x;Reddit;2021-06-14 20:59:37;i will take point hits for this but functional programming fp is as overhyped as microservices. fp has been around for roughly 60 years and thus has had plenty of chances to prove its meddle in the real world but keeps failing outside of niches. the biggest problem i find is that's harder to debug and xray the pipes. procedural is just easier to divide up into an algorithmic tree stepwise refinement to be tested and debugged as parts and subparts. the anti state philosophy of fp means there is less state to analyze. an fp fan once admitted to me that fp makes it easier to write intent while procedural is easier to see what's actually happening.;0
h1shkfa;Reddit;2021-06-15 01:52:26;your post is not entirely true for a few facts it's impossible to split resources within a macroservice single process without adding to the overhead that is an inevitable sideeffect of implementing servicelevel load balancers http queues thread pools with configurated ratios and so on which you need to control resources performance growsfalls logarithmically not linearly cpus and networks tend to get slower logarithmically under increasing load. if any of the sections of your macroservice gets more traffic than anticipated it's going to affect the performance of the rest of the services scaling microservices is simply easier because they're separate processes that you can easily dedicate prioritiescpuramnetwork to without having to code it thread pools http queues yatta yatta yatta. scaling macroservices requires builtin resource management due to sheer fact that it's a single process per instance.;0
h1sslwv;Reddit;2021-06-15 03:28:50;it's self fulfilling prophecy. most developers won't join a team that is not doing microservices because that is career suicide. so hirers force the team to adopt microservices just so they can get and retain staff. one of the core characteristic of a good developer is the desire to put downward pressure on complexity and resist it unless there is a strong justification. the other is the ability to judge how much complexity is needed for a given goal. the microservices cult has just smashed both these out of the ballpark and we're living in a dystopian development future. hi does anyone need a developer? i can do microservices good. trust. i'm never going to be employed again.;0
h1srdn8;Reddit;2021-06-15 03:18:14;i read it differently. i read it as the poster trying to head off internet arguments from microservice evangelists more than them literally believing it's not scalable. which is humorous if you assume that reading is accurate because that very attempt is what got you to respond to them.;0
h1stjy3;Reddit;2021-06-15 03:37:00;scaling microservices is simply easier only if you don't include the infrastructure deployment error and transaction complexities that come along with distributed applications. scaling them independently is easier but i don't know that i would say scaling them is easier. ugrauenwolf wasn't wrong in his post. you just value different things than he does so you two are comfortable with different things. having said that i agree with grauenwolf. if it were me i'd just scale as per normal and if it ever got to a point where performance requirements were such that i truly needed to scale independently i would just pull it out into its own service and do specifically for that instance and move on.;0
h27ypbv;Reddit;2021-06-18 17:42:12;its really a case by case basis. think of it like this if you had an analytical api that gets hammered you now only have to scale that and not the entire api with it. if you know what will get more traffic you can figure it out and handle it where it has to be. i understand that most folks probably dont need microservices but in a large traffic setup you wont do well with monolithic apps. its more of an experience thing you learn the hard way. just the fact you havent seen dbs buckle is likely why you have no need for this architecture. im having to handle over 800k reqs and upwards on some of our services. now if you had a monolithic app how are you controlling traffic and now your analytics api is taking up all bandwidth for your main api. now your site goes down or slows to a crawl.;0
h1rk190;Reddit;2021-06-14 21:33:33;those are still microservices just with a lot of the cemeony stripped away. that's a rather broad definition of microservices it seems to me. as i mention somewhere here a big problem discussing them is no agreed upon clear definition of microservice. i will agree that ms's standard tooling is becoming bloated and too enterprisey for smaller or more nimble needs.;0
h1rowjr;Reddit;2021-06-14 22:09:57;that's not a scalability issue it's a prioritization issue. you want the trivial app to have a higher priority than the cpu intensive one. which is fine. if that's what your goal is then microservices might be the correct answer. but if the problem is that you need everything to go faster then microservices isn't really going to help. it may even slow you down depending on how you deploy them because they aren't efficently sharing resources. using the right terminology is important.;0
h1togvb;Reddit;2021-06-15 09:13:58;i agree completely that's the approach i'vewe've moved to after completely failing in maintaining a whole bag of microservices as a solo devsmall team. i disagreed with him because he boiled down my point to plain numbers when it wasn't about maths only and my maths was correct. i disagreed because he completely dismissed the overhead he has to implement and the complexity that comes from moving resource management from os to the process itself. it's better to grain your services further when there's need for it as opposed to graining for the sake of graining.;0
h29o4x2;Reddit;2021-06-19 01:45:37;what i would do if some part of the system is getting hammered is to move that specific data structure to nosql and put it in a set of serverless functions. then you don't even need to worry about scaling. it's all automatic. the key point is that i wouldn't do it preemptively unless i knew for sure it was going to get hammered. microservices work in the opposite way. the assumption is that you can know what's going to get hammered and what isn't ahead of time. you can't know that. breaking off a small data structure to nosql is much easier than preemptively designing a set of relational dbs to spread load. the other point here is that domains don't necessarily correspond to even load. one domain might get hammered while another lays dormant. when that's the case you're paying for resources you don't need. i've seen this problem first hand and it's a direct result of microservices concepts being applied for the wrong reasons in the wrong way.;0
h20n0ul;Reddit;2021-06-16 23:37:30;as i mention nearby microservice is illdefined or inconsistently defined. typically a nonmicroservice application is considered monolithic such that we'd first have to establish a meaning for microservices to know what a nonmicroservice is. for example if we define dark as lack of light we first have to establish what light means. as a working term for this section of the thread i consider monolithic to be one big executable. note that splitting applications into multiple executables is as old as compilers. it's such a captain obvious technique that nobody bothered to give it a special name. it's like splitting an overly large document file into multiple document files. nobody would call those microdocuments or microfiles. except for maybe marketers trying to sell a sucker on a new buzzword. i partly take that back they are sometimes called volumes.;0
h1sse9c;Reddit;2021-06-15 03:27:02;you're getting downvoted but i think what hurts the most about unotuniqueorspecial is that you could just pull that 1 endpoint out into a separate service and call it a day. it's odd that people have this weird mental block where they feel as though you must be microservices through and through with no shared data the works. to e tropical thunder you never go full microservices. seriously it's ok to pull out that 1 piece to be microserviceish just sitting on the same db as your other service. it's fine you're not suffering any disadvantages you didn't have before and if your company was ok with them then they should be ok with them now. what people don't seem to get is that microservice architecture is super complex for a lot of reasons not the least of which is that you now have a distributed app. there's real legitimate value in the architecture but if you're not getting that value then going full microservices is a mistake. it seems like an obvious thing to say but so many people don't consider that when considering if they should. that's the entire point that unullsobey was making imo. you don't have to go full microservices to get some of the advantages you can navigate the advantages and disadvantages in such a way as to minimize your cost while maximizing the value you get out of it.;0
h2b3ecg;Reddit;2021-06-19 11:24:29;there isnt any assumptions here on load when scaling at the volume im referring to. small sites dont need microservices and you may never in your career use them. scaling isnt just adding nosql and calling it good enough or serverless to save you lol.;0
h1s701i;Reddit;2021-06-15 00:25:17;if we are defining microservices by goals and results and not implementation what specifically are these goals and results? it's going to be really hard to talk about them in a coherent way unless we first at least agree to local working terms. beentheredonethat. as far as independent deployment source control and qa cycle these are generally independent issues. there are 8 combinations. which combo is microservices? should we define a term for all 8 combos?;0
h2eq6ho;Reddit;2021-06-20 10:06:21;scalability is the ability to scale up or down. scaling is the act of adding more resources when under heavy load or removing them when there is less load when you use serverless components like nosql some nosql databases scaling happens automatically without you having to do anything. the point is that moving parts of the system that bottleneck to serverless is generally a better idea than just breaking existing services in to microservices that don't automatically scale up or down.;0
h1s7hye;Reddit;2021-06-15 00:29:07;go the other direction. start with goals then patterns that may address the goals and finally debate among them which is best for the situation. debating what is or isn't a microservice is a waste of time unless you keep the definition broad and nonspecific. our industry's obsession with buzz words is our undoing.;0
h1txeqn;Reddit;2021-06-15 11:38:59;not all endpoints are the same. not all endpoints can be prioritized using os features like cpu priority. no but all rest requests are the same and if you have a fat service where you have a situation where small requests are starving out large requests you still have the much easier option of just scaling the whole big service out horizontally and then having your service locator capable of making the decision that it's going to prefer pointing lightweight requests at small servers and leave the heavyweight requests to beefier servers even though both sets of servers are actually capable of taking any request. you don't need multiple different microservices and all the headaches that having multiple separate service projects entails you just need intelligent direction of requests which is a much easier problem to solve than breaking your codebase up into pieces. and if it's not straightforward to tell lightweight requests from heavyweight requests purely by the endpoint being called then that's a problem you'd have regardless of architecture so microservices don't solve your core problem of wanting to size services to servers anyway.;0
h1szsyw;Reddit;2021-06-15 04:31:06;i think we read ugrauenwolf differently. i didn't take anything he said as you being foolish i took it as him pointing out that scaling is scaling you just threw more servers at it. he was disagreeing with the idea that larger microservices are less scalable by pointing out that you can always just throw more hardware at the problem and he's not wrong. but i don't think he would take issue with pulling that specific part out to it's own service either if the circumstances warranted it. he's just saying that larger services are still perfectly scalable.;0
h1sau1g;Reddit;2021-06-15 00:55:29;then you seem to agree with me it's almost a useless term. it could be useful with a more specific definition which may include implementation specifics. example microservices is the use of web services to split large applications and application teams into smaller units which can manage and deploy each unit relatively independently. since there are a gajillion other ways to split up applications it's better to limit it to web services. the definition i give is a general gestalt average of definitions collected from the interwebs.;0
