ID;Source;Creation Date;Content;Sentiment
su8uwe;Reddit;2022-02-16;Title:Microservices: it's because of the way our backend works, Content: https://www.youtube.com/watch?v=y8OnoxKotPQ;0

hx90rte;Reddit;2022-02-17 02:14:46;microservices are fun until you have 30 microservices each with devteststagingprod environments and log4j needs updated.;0
hx8we28;Reddit;2022-02-17 01:41:33;i've had this conversation with a product manager about why it wasn't easy to show somebody's name in some part of the system. microservices man i don't know.;0
hxddsjl;Reddit;2022-02-17 23:46:32;jonathan blow sometimes marvels at the exquisite inefficiency of big web companies. so many engineers doing so little for the end user. what went wrong? well this. not microservices specifically but this intricate yet ultimately useless web of stuff. attempts to carve programs before theyve grown enough for us to see their joints. trying to guess a future that ends up being very different from what we anticipated and now we cant change our unsuitable architecture because its to damn complex to be refactored without significant risk. complete disregard for performance except for this sacrosanct scaling where we can make sure we can throw more hardware at the problem without pausing to estimate whether we could just do it on a single server rack instead.;0
hx97dk0;Reddit;2022-02-17 03:04:04;yeah it's pretty clear microservices are only a good idea when you can't buyabiggerserver your way out of monolith also big fan of the approach where when possible you just have your app be decentralized and you run many instances of it as a way out of the can'tbuyyourwayout;0
hxatalg;Reddit;2022-02-17 13:30:20;we're migrating our microservices to single node computing. snc is revolutionary it transforms each microservice into a new kind of computing block called a function with multiple orders of magnitude faster execution. the performance and maintenance improvements are staggering. who in the world could have predicted that a single node could do so much work.;0
hxax1st;Reddit;2022-02-17 14:05:35;for my university capstone project they wanted us to change their systems over to microservices. i tried to explain why that would take more then 4 undergrads but nobody knew enough to explain it properly. microservices has legitimately traumatized me.;0
hxcljt3;Reddit;2022-02-17 20:46:39;microservices are an optimization procedure. if you're doing them before you know you need them you're doing a premature optimization.;0
hxaryx4;Reddit;2022-02-17 13:17:07;we prefer several smaller things in our backend instead of one very large one. maybe we could call them beads instead of microservices;0
hxa0rkt;Reddit;2022-02-17 07:32:06;everyone is complaining about microservices and then proceed to describe something that isnt microservice architecture.;0
hx95k7u;Reddit;2022-02-17 02:50:27;i left a corporate environment with 100s of microservices for a startup with a monorepo and i became so much more productive. now they're slowly transitioning to microservices and i'm back to taking a day and a half to patch a dependency or update one service and integration testing is a total nightmare. as a developer i hate microservices.;0
hx9plil;Reddit;2022-02-17 05:35:18;there's a bank that runs on 1600 microservices. here's a diagram httpsimages.ctfassets.netro61k101ee592bms9tvljc5eink9ylby3v992367961e649dd0343a3486616601fdimage1.png?w656q90 yeah i'd run away screaming if i had to work on that.;0
hx9u1zz;Reddit;2022-02-17 06:22:03;if that's a problem for you you need to stop treating things like pets. it should be a 30 second change. microservices are only beneficial if you're doing infrastructure and automation correctly.;0
hx9mtvs;Reddit;2022-02-17 05:08:42;i swear the microservice paradigm was created by cloud computing companies to sell more virtual hosts.;0
hxangd0;Reddit;2022-02-17 12:27:02;all smiles when the 30 microservices are in a monorepo and all have their base configuration derived from a single gradle module.;0
hxbq587;Reddit;2022-02-17 17:32:01;each of your microservices has it's own devteststagingprod environment? what's the point of microservices that never talk to one another?;0
hxckqc2;Reddit;2022-02-17 20:41:27;in my current project's mvp stage we started by doing microservices. by the end of it we had some 25 different javaee applications in our tree because spring boot wasn't going to be a widely available productionready thing for another year after our mvp deadlineversion 2 got the benefit of having spring boot being a thing that was ready for prime time and there's currently a porting effort in place to move the last pieces of our original solution that we still use over to spring boot. it was a disaster and by that point i was spending more time writing bash scripts to manage our testing environments than i was writing actual code. sure we now have something like 400 different spring boot projects now but at least we're using openshift and gitlab instead of my tarball of shell scripts being scp'ed around.;0
hx9jaq9;Reddit;2022-02-17 04:36:38;this makes no sense. every microservice that needs someones name should have it in its own database. the microservice responsible for managing users should be broadcasting events with user creations updates and deletes so other microservices can keep their dbs in sync.;0
hx9trx1;Reddit;2022-02-17 06:19:12;this comment makes 0 sense. you always run multiple instances of a monolith or at least can. microservices are about deployment operability boundaries and organizations. this decentralized thing you are saying is just not a thing it is how everything works in a monolith.;0
hxasamn;Reddit;2022-02-17 13:20:22;microservices are never really a good idea. at most you want something in the order of 34 different services of course you can run thousands of instances of each but do not split things up unnecessarily adding interfaces that need to be kept compatible between versions and that can fail due to the network literally everywhere for no good reason.;0
hxbdrim;Reddit;2022-02-17 16:11:59;everyone is complaining about microservices and then proceed to describe something that isnt microservice architecture every business has implemented in the name of microservices architecture.;0
hxcjin4;Reddit;2022-02-17 20:33:55;i've started trying to get the ball rolling on redoing our data model which was the result of people from the legacy system making unwarranted assumptions about things that turned out to be terrible ideas. i mean sql isn't even an appropriate data solution for the kinds of tasks we're doing. we're dealing mostly in transforming json and xml and only using sql for persistence. unfortunately sql sucks at being a persistence layer for our purposeswe'd get better value from a system that allows us to store documents with queryable metadata because that's the kind of data we're dealing with at every stage of the process. we've already moved away from microservices and onto a kafka solution because it does the job of sequential data fetches and transformations that much better.;0
hxaba9m;Reddit;2022-02-17 09:45:32;need to have a representative from the legal team attend all microservices planning meetings.;0
hx965l1;Reddit;2022-02-17 02:54:54;in my experience that's the way to go though. so many companies start from scratch with microservice arch and get so lost in the infrastructure that they can't build things. it's great to build that monolith first then dissect that larger service into smaller services over time. the dependency management isn't fun though would love to see improved software for it in upcoming years.;0
hx9mknm;Reddit;2022-02-17 05:06:18;another comment below says it but monorepo ! monolith and microservices can still exist.;0
hx9iftt;Reddit;2022-02-17 04:29:15;integration testing is a total nightmare. as a developer i hate microservices. doesnt sound like they are doing microservices correctly. all microservices should be independently developed and deployed.;0
hxbgp5p;Reddit;2022-02-17 16:31:42;monorepos are a totally separate concept from microservices. my current job uses a monorepo that contains all of the code for all of our microservices. i have also seen what ends up being a monolithic app split up into multiple repos for different chunks of library code that is only used in that one app.;0
hxc3s95;Reddit;2022-02-17 18:56:27;it definately makes your life harder if its just you doing everything. in many cases a monolith is the simpler and easier path. however working in a larger team a monolith becomes a pain in the ass when you have multiple people working on the same code. microservices force you into making your code modular which you can do as a solo developer but requires a lot of discipline and abstraction layer architecture i.e factories coding to interfaces etc.;0
hxcbz3h;Reddit;2022-02-17 19:46:47;through acquisitions my current company has one tech stack with lots of microservices and another tech stack with a big monorepo. the oldtimers who have worked on the monorepo love it. everybody new we hire runs away from it and moves to the microservices.;0
hxjwb3d;Reddit;2022-02-19 08:15:06;the trick is to actually create independent microservices. this process that reads from an ftp server and uploads what it finds to the database that's a real microservice. those twelve services that need to coordinate to display the home page? that's garbage in unless you work at amazon.;0
hxay5ll;Reddit;2022-02-17 14:15:13;those isolated dots are the microservices that aren't used by anything but the application doesn't work if you delete them.;0
hxarbk2;Reddit;2022-02-17 13:10:23;the opposite is true. microservices are usually hosted in containers which allows you to pack up your virtual hosts much more densely. when you have a monolith that you need to scale you almost always end up overprovisioning your nodes and have low utilisation in the end. then there are serverlessy options to host your containers like aws fargate where you pay only for timeamount of containers being run and can scale up and down aggressively often resulting in big savings.;0
hx9mjmr;Reddit;2022-02-17 05:06:02;every microservice that needs someones name should have it in its own database. because who needs normalization right? orrrrrr you could vastly simplify that architecture avoid all the pitfalls of bidirectional sync have higher performance and less developer pain.;0
hxbclp7;Reddit;2022-02-17 16:04:08;i'm not sure why you're receiving so many dislikes. what you're describing is event streaming which is not uncommon in the world of microservices. a pattern i've see is where all services subscribe to a stream of commands and decide what to do with each command. an example of a command could be changeusername. not every service needs to act on every command but if a service needs to get usernames often it can make sense to store said usernames in its own db. yes this is a lot more difficult than just having 1 service in charge of usernames but the point of microservices isn't to make things easy it's to enable organizational scaling without having teams closely coupled together.;0
hxa0lnk;Reddit;2022-02-17 07:30:15;all these downvotes are unbelievable. every downvoter has no clue what microservice architecture is.;0
hxa5mnz;Reddit;2022-02-17 08:31:03;it can work well. but it needs both the part you mention that you start from a monolith and actually know what to spin off into separate services which you cannot without having seen a monolithic app do the work and having had time to profile it and the descipline to actually stick to the parts that make sense to spin off and not run wild with the idea. of course what happens instead is that some dev realizes they can get off the ground much quicker if they create a new microservice for functionality x this gets normalized and you end up with 250300 services and massive data inconsistency everywhere.;0
hx96lox;Reddit;2022-02-17 02:58:15;fwiw some of the biggest companies in the world work entirely out of monorepos. google and facebook famously have proprietary software to provide a nice developer experience for a monorepo with 1000s of services and components within it. i'm not convinced that microservices are the right approach for anything tbh. i was part of a team developing internal tools for building testing and deploying microservices at a massive corporation and there was just never any elegant solution. everything became absurdly complicated and needlessly difficult.;0
hx9hyq5;Reddit;2022-02-17 04:25:11;so many companies start from scratch with microservice arch and get so lost in the infrastructure that they can't build things. so very truehttpsold.reddit.comrprogrammingcommentssmu3gswhenmicroservicesarenottheansweracaseforhvzis7y;0
hxa0kpg;Reddit;2022-02-17 07:29:56;all microservices should be independently developed and deployed. which is what makes them the wrong tool for most places. most split into micro services because it's cool but then all the same people work across all the services so it just creates a huge integration mess with no value gained.;0
hxc4o5d;Reddit;2022-02-17 19:01:59;in other terms you can scale up or down an individual microservice component of the application depending on the load rather than the entire application.;0
hxcwwbp;Reddit;2022-02-17 21:58:51;i have yet to see a company save money by transitioning to microservices. i have seen companies' infrastructure costs increase after transitioning to microservices. what you wrote in your comment sounds really good on paper but i have yet to actually see it happen in practice.;0
hxaosc8;Reddit;2022-02-17 12:43:09;on the other hand the network is infinitely less reliable than a single local function call. you can also do modularity without microservices. it is called libraries.;0
hxay76w;Reddit;2022-02-17 14:15:36;because who needs normalization right? no one who works on anything at high scale gets normalization. if your traffic levels are low then by all means microservices are probably not for you. microservices as a term is so overused to not mean anything anymore. breaking bigger services down was originally conceived as a way to help add a method to the madness of high scale systems. it lets you scale each component independently and at a better cost. much like nosql which is absolutely critical at high scale its not made to work outside that problem space. the overhead isnt worth the cost savings unless you are trying to scale up to the highest levels. everyone isnt in faang and the next few tiers down. the solutions that work at those levels are not designed with every usecase in the world in mind.;0
hxa0em2;Reddit;2022-02-17 07:28:03;dont take it up with me take it up with the people that came up with microservice architecture. every microservice needs its own db or at least own schema..doesnt have to be a different db processserver. microservices keep their db up to date through eventual consistency via handling events. data duplication is perfectly acceptable. there should be absolutely no synchronous communications between microservices.;0
hxa20m6;Reddit;2022-02-17 07:46:33;who cares? whether your narrow definition of microservices is correct or not youre proposing an architecture thats overly complicated and brittle.;0
hx98bww;Reddit;2022-02-17 03:11:13;monorepos and microservices are not mutually exclusive! google has tons of microservices but the definitions for their apis and such all live in the same in the same repo.;0
hx9t3ur;Reddit;2022-02-17 06:12:19;monorepo vs microservice are completely orthogonal concepts and have nothing to do with one another. you can work in a monorepo in a microservice architecture.;0
hx9uk2t;Reddit;2022-02-17 06:27:06;im confused why this thread keeps comparing monorepo to microservices.. do you really mean monolith?;0
hx97ve7;Reddit;2022-02-17 03:07:46;yeah i like the way where it's not microservices but simply decentralized and you just run many copies of the same app;0
hxavxjr;Reddit;2022-02-17 13:55:13;i'm kind of in the same boat as you. i have worked on a monolith and for the longest time thought we needed to break pieces out intomicroservices but now that i am doing that it has become just such a pain in the ass to get everything to work together.;0
hx9l13q;Reddit;2022-02-17 04:51:54;as long as the events are backward compatible and that is an axiom of microservices how could a change in another independently developed service affect another one? for events you can add fields but not remove any that keeps them backward compatible.;0
hxdq47x;Reddit;2022-02-18 01:12:33;so don't overprovision? but you better do. monoliths tend to have long worm up time plus if if they are not containerised you gotta add up the vm provisioning time on top of that. add it all together and you might have minutes to wait until the scale up succeeds. that's why it is safer bet to overprovision. with microservices and containers it can take seconds. another reason is that if you have really beefy monolith you are likely to use big instances vms so your scaling stepping can be quite steep. so if you hit 75 cpu util and want to add a new large instance this instance will immediately be underutilized and you will be overpaying. with containers being smaller instances you will overpay less. not to mention that legacy monoliths are sometimes built in a way that does not help scaling out like being stateful. and hey disclaimer i am not a fan of pointlessly high cardinality microservice architectures with all the excessive network overhead coming with it. sometimes if not often a well built monolith can do the trick. but somehow most of the time i deal with a legacy monolith it doesn't scale that well for various reasons and to make things safe the people running the system overprovision just to be sure and in the end have low avg utilisation.;0
hxboyjl;Reddit;2022-02-17 17:24:38;to be fair software engineering encompasses everything in the lifecycle not just coding. i just think the microservice pattern is an antipattern perpetuated by years of everyone talking about it. it can be useful but this video shows how bastardized it can become.;0
hxajm9p;Reddit;2022-02-17 11:37:40;the coupling is not caused by the architecture. once you realise that you will see the world a different way. the systems are coupled because they are. it doesn't matter how you slice and dice this into processes services functions modules libraries containers or whatever is the current fad. coupled systems will remain coupled because they are coupled. you can't handwave this away. decoupled systems are just pretending that coupled systems aren't and this is what causes a world of pain for developers. here's a rule i like to use if i want to add an extra field like in the video how many distinct places does this need to occur? with a monolith this might be literally just one place. maybe 23 in typical architectures 510 in the worst case with enterprise java monstrosities. with microservices you could be looking at updates in hundreds of places in the worstcase. that's not decoupled. that's worse than coupled. that's coupled with an unnecessary multiplier. coupled squared.;0
hxbbvkl;Reddit;2022-02-17 15:59:08;are you telling me that if the randomrecord microservices blindly goes and changes their api then the user microservice is fine and dandy and knows exactly what's going on? or does it have the same problem with the added bonus of indirection making the problem harder to isolate as well as making it harder to test and prevent from happening in the first place?;0
hxb1n72;Reddit;2022-02-17 14:44:04;no one who works on anything at high scale gets normalization. to the extreme of a contact table just contains the names and has a foreign key to a separate postaladdress table agreed. i've had one system where that was a good approach as it made sense for the client's requirements but almost invariably it's complex and hard to scale. microservices as a term is so overused to not mean anything anymore. breaking bigger services down was originally conceived as a way to help add a method to the madness of high scale systems. it lets you scale each component independently and at a better cost. agreed. everyone isnt in faang and the next few tiers down. exactly.;0
hxfv439;Reddit;2022-02-18 13:55:53;i love how every advocate of microservices i read eventually says something that tells me if they saw what my company is doing under then name microservies they'd be screaming oh hell no. it is turning out to be a lot like agile. you know that perfect system that somehow no one can actually get right.;0
hxartqu;Reddit;2022-02-17 13:15:39;microservices keep their db up to date through eventual consistency via handling events. data duplication is perfectly acceptable. you are setting up yourself of a disaster of data getting out of sync and never knowing when it happened and why. how are you continuously verifying coherency and consistency between the services? what is the source of truth? and most importantly what advantages are you getting with copying everything around?;0
hxakqcj;Reddit;2022-02-17 11:52:15;take it up with the people that came up with microservice architecture. its just a hype term not some kind of standardized spec. the people who like to hear themselves talk a lot arent necessarily the best people to ask how to design a software architecture. every microservice needs its own db thatll often be so but i see no reason its a steadfast rule. there should be absolutely no synchronous communications between microservices. how do you do an auth microservices asynchronously? sounds painful. i guess you could preallocate tokens? but why?;0
hxd868h;Reddit;2022-02-17 23:09:46;note that there are insane companies out there like mine that set up build and deployment processes expecting basically one release artifact per repository or at least a set of artifacts all sharing the same version and are built at the same time and you break things if you defy this process. i suspect monorepo monolith many repo microservice might be more true than you would expect.;0
hxaqy9z;Reddit;2022-02-17 13:06:32;and its very nice to do so because microservice dependencies can be a pain. i like cdk construct libraries in a mono repo that i can compose into deployed services and pipelines however i need with deployment pipelines in the same repo as just another construct library. does wonders to a dev stack when i can deploy a microservice and any subset of its dependency graph in one go;0
hx9in22;Reddit;2022-02-17 04:30:59;that doesnt even remotely sound like a microservice architecture.;0
hxfsogb;Reddit;2022-02-18 13:32:24;and so not only do you have 50 microservices you are running 8 different versions of each one...;0
hxdugbj;Reddit;2022-02-18 01:44:28;plus if if they are not containerised you gotta add up the vm provisioning time on top of that either you're running on a platform where hosts are abstracted from you and you can run your monolith in a container or you care about host utilization and presumably you needed to add another node because the existing one is reaching capacity so you'd need to spin up a new host to run the microservice container too. so if you hit 75 cpu util and want to add a new large instance this instance will immediately be underutilized and you will be overpaying. with containers being smaller instances you will overpay less. so then use small instances? the primary difference from a technical standpoint seems to be that you have a large application router instead of lots of small routers and your modules can directly invoke each other instead of needing to make network requests. you may also not need as much functionality exposed at the route level because that functionality would be an internal service. everything else you're talking about is just making an application keep persistent state in persistent stores e.g. a database which is an unrelated good practice. i can spin up another copy of a server that handles 100 routes even though only a handful are handling the bulk of the traffic. the extra time spent by having a bigger router is going to be dwarfed by the time it'd take to perform a network request by splitting that into separate services. regardless of what traffic it's serving the server will automatically devote whatever resources it has to those requests. you don't need to give it more resources to handle request type a relative to how many resources you want to devote to b c and d it'll just do that because that's what most of the requests are.;0
hxa2oow;Reddit;2022-02-17 07:54:30;i dont see anything absurd at all. the microservice has all the information it needs in its own database. you are using a message queue to keep the data in sync. development is selfcontained and simple. that is what microservice architecture is. so dont take it up with me take it up with the people that came up with the architecture. the problem is most people dont understand microservice architecture and it has become a meaningless generic term to cover whatever it is that they are actually doing. what is absurd is to break apart a monolith that has super fast and reliable inmemory function calls and replace it with a bunch of services that communicate via slow and error prone network communication. it is now a couple of orders of magnitude slower. unfortunately this is what most people do and then say they have a microservice architecture. they do not. there should be no synchronous communications between microservices.;0
hxa3vqs;Reddit;2022-02-17 08:09:08;many times you need to make transactional requests between services. then either the application isn't suitable for microservice architecture or the problem domain hasn't been split correctly.;0
hxdu4rm;Reddit;2022-02-18 01:42:05;yes i agree when that happens that is stupid. the performance gains of microservices exist in theory and not usually in practice ime. people dont understand how to divide up data and its something where you either need to get very lucky or where your domain is particularly suited for it. otherwise you need to have all kinds of read models everywhere to actually pull together all the data you need to present a coherent api which means jumping all over the network grabbing data out of a bunch of services. latency becomes an issue. unless youre cool with breaking read after write semantics.;0
hx9lzls;Reddit;2022-02-17 05:00:52;microservices are just dlls over ip. gps post totally fits.;0
hxaciyx;Reddit;2022-02-17 10:02:18;microservice rules dictate that you deploy a v2 api endpoint or a new microservice version until no other service depends on the old version anymore.;0
hxas1cm;Reddit;2022-02-17 13:17:48;so my user changes a name and now there is a cascade of updates in 50 microservices and their databases? and then how do i know that they all succeeded? this sounds like hell...;0
hxb8o3a;Reddit;2022-02-17 15:36:48;using them the way i envision them there's potential use cases. for the kind of stuff we do for example an authentication microservice. can be built by a separate team and used by multiple apps and doesn't have frequent breaking changes so easy to deploy separately. also relatively easy to scale separately too. a calculationreporting microservice. generate pdfs etc. no database required even if you feed all inputs to the api deterministically. cpuheavy unlike a lot of stuff. scales nicely. they're certainly overhyped although that's already waning. what some people in this thread have said microservices supposedly are or need to be? i can't see the use for that.;0
hxabhi6;Reddit;2022-02-17 09:48:14;google also literally has tens of thousands of developers. microservices work if you have teams dedicated to 1 any specific microservice 2 tooling and infra for 1. if you have 100 devs and 10 microservices you're ok. if you have 10 devs and 100 microservices you're fucked. microservices are an organizational tool. they allow huge companies to split out their work into tiny teams and avoid expensive crossteam coordination. if you're doing it with a single team it's very likely a mistake.;0
hx9kjp8;Reddit;2022-02-17 04:47:38;we call them via public apis the fact you are mentioning rpc when talking about microservices is concerning to me. are these public apis http or otherwise synchronous?;0
hxa16yd;Reddit;2022-02-17 07:36:59;microservices are most certainly not that. in actual microservice architecture there should be no synchronous communications between microservices.;0
hxajzle;Reddit;2022-02-17 11:42:42;and who goes back to modify the 10 other microservices that depend on your new v2 microservice? if v1 has to be around until noone depends on it then what is the impetus to get a random service from another team updated to use your new v2? pretty please update? seems like huge tech debt waiting to happen.;0
hxbppnk;Reddit;2022-02-17 17:29:21;everybody thinks contact info is straightforward until they have to deal with some bullshit complication like power of attorney legal guardian gdpr or worst of all a corporate merger. that doesn't excuse apparently insane information routing problems due to rat kings of microservices accumulated over the years but there really is a real fundamental problem of a moving design target in the middle of it all.;0
hxb5bbg;Reddit;2022-02-17 15:12:12;from your response i can tell you have no clue what microservice architecture is. i suggest you pick up a book on the topic. if you do you will see i am correctly describing microservice architecture.;0
hxcteun;Reddit;2022-02-17 21:36:42;yes those use cases definitely make sense. maybe i should have said that nothing about the way microservices have been used by tech bros make sense.;0
hxen4by;Reddit;2022-02-18 05:26:02;that is true but design decisions can lead to tighter or looser coupling. it also doesn't hurt when people have to hop through hoops in order to create tighter coupling almost like a forcing function against ones perseverance! lol that said you can result in tight coupling no matter what and microservices is definitely not a silver bullet by any means. i've seen microservices work fantastically with 400 microservices and i've also seen a system with 2 microservices step all over its toes and create insanely tight coupling. such is life!;0
hxcxw1e;Reddit;2022-02-17 22:05:07;what about 1 dev and 10 microservices?;0
hxa04zn;Reddit;2022-02-17 07:25:05;what you are describing is not microservice architecture.;0
hxbx404;Reddit;2022-02-17 18:15:32;there is no owner of the whole system. the whole system is fundamentally too large for any individual to grep. that doesnt matter if its a monolith or a web of microservices. you cant control the entire system so you have to give up control to autonomous components who can maintain their own service and handle their own failures. that is the point of microservice architecture.;0
hxc0p69;Reddit;2022-02-17 18:37:29;there is no owner of the whole system. you can live in this delusion until you have regulatorsauditors knocking on your door asking unpleasant questions. the person answering them will be crowned the owner of the whole system. the whole system is fundamentally too large for any individual to grep. now we are getting to the most important part. if you have a system that is trully ungreppable by a highly qualified individual doing this full time then of course the only way to run the show is to split into multiple services. no argument here. the question is whether we need 15 microservices between 5 developers for a system 3 years old and having 10 000 infrequent users.;0
hxbqt9u;Reddit;2022-02-17 17:36:14;there is no additional burden placed on testing the dependencies of that application over any other monolith. there's a great deal of extra code that needs to run for the communication. even ignoring things like different versions of serdes libraries that may have different bugs you need to either set up api client generation additional work or test that your consumers correctly defined things. even if they do that correctly someone can make backward incompatible changes. this is all more work and room for errors that you'd otherwise have a compiler check. if you're really into the micro part of microservices this becomes a significant portion of your code despite none of it needing to exist in the first place. you can have an organization where different teams own modules in the same codebase that gets compiled to a single artifact. adding an http or kafka or whatever boundary doesn't help enforce contracts anymore than a compiler and in fact does a worse job. it doesn't enforce separation of concerns either if you were going to have a bad architecture with a monolith chances are your soa will be a distributed monolith too. if you were going to have a good soa you could just do that with packagesmodules.;0
