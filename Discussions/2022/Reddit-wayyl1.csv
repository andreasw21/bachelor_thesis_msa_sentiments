ID;Source;Creation Date;Content;Sentiment
wayyl1;Reddit;2022-07-29;Title:You Don‚Äôt Need Microservices, Content: https://medium.com/@msaspence/you-dont-need-microservices-2ad8508b9e27?source=friends_link&sk=3359ea9e4a54c2ea11711621d2be6d51;0

ii40uo2;Reddit;2022-07-29 12:48:59;microservices dont ensure good modularization totally agreed with this. if you work with microservices enough you'll probably build or borrow some decent tooling to make communication between your services easy. but then if you're not careful you end up with a tightly coupled monolithofmicroservices except with lots of http calls at every function and versioning to deal with.;0
ii3tcnh;Reddit;2022-07-29 11:14:47;agree with this article whole heartedly. in our particular scenario from 5 or so years ago it was a microservice that got turned in to a monolith solving all sorts of headaches. we weren't amazon.;0
ii4cspz;Reddit;2022-07-29 14:44:43;perhaps i'm misunderstanding this but i think the article undersells the benefit of the independently deployable aspect of microservices. i've worked on massive monoliths and repeatedly having to deploy a huge app due to bugs becomes really painful quite quickly. simply being able to fix and redeploy the affected portion really takes a lot of grief out of the process.;0
ii3zomz;Reddit;2022-07-29 12:35:30;microservices are fine as long as your system needs variable scaling and they represent a complete vertical slice. i work with a quite complex domain where several different needs are met for different customers based on which parts of the product theyre paying for. being able to ramp up a module independently of the others is quite useful but only because it serves our specific needs for processing large data inputs in several different ways. no services have hard dependencies on any other services deeper in the pipeline so its a very flexible setup for us. if a request needs to go through the network layer several times before its served back to the user youre on the wrong track.;0
ii4moq9;Reddit;2022-07-29 16:00:19;ive seen monoliths that became too big for anyone to effectively build and manage and ive seen an app with so many microservices that many on the team didnt know a portion of them even existed. ive always found serviceoriented architecture to be the happy medium. split up into multiple services based on business function but dont be dogmatic and enforce a new service for a new endpoint. you typically still get the scalability and deployability of microservices but some of the development ease of monoliths.;0
ii47rfl;Reddit;2022-07-29 14:00:20;there are plenty of use cases where it's beneficial to have multiple smaller services instead of one big service but whether it should be taken into extreme is another matter. i think if your services are going to be talking just with each other there's not a lot of good reasons to jump into full 100 decoupled microservice world.;0
ii3tynp;Reddit;2022-07-29 11:23:03;the choice isn't between microservices and monoliths. most organizations would be better served by plain old services.;0
ii3rvaz;Reddit;2022-07-29 10:54:38;build a monolith app with microservices in mind and then if you need to start to break it up into smaller services...;0
ii3v69a;Reddit;2022-07-29 11:38:58;sometimes i i think projects reflect the values of an organisation not the values they say they promote but they actual do and how they operate. how they are built what gets fixed and changed how easy it is to test. microservice vs monolith are just design patterns and it is a case of pick your poison. there are problems challenges and benefits to both of them.;0
ii4wyn6;Reddit;2022-07-29 17:08:59;the title is unfortunate even if the sentiment is correct. author is trying to address 99 of developers out there where monolith first would be a better phrasing. httpsmartinfowler.comblikimonolithfirst.html there is a place for microservices but you should not jump there out of the gate until you have identified a need for them.;0
ii589wj;Reddit;2022-07-29 18:21:23;do libraries right. then go for interfaces. do interfaces right then go for microservices. can't make a good monolith? what makes you think you'll be great at microservices?;0
ii4k0gb;Reddit;2022-07-29 15:41:04;i use microservices for agpl code;0
ii54wb1;Reddit;2022-07-29 17:59:53;i guess microservices fool a lot of people who assume that anything micro is good as it implies simplicity. should have been called something like extremely distributed async systems or whatever to scare off the naive;0
ii6g4cz;Reddit;2022-07-29 23:11:56;i love this article. ive worked in both environments one with a giant monolith and one with micro services everywhere. i was always catching myself thinking why arent we just using a monolith??. lots of issues could have been avoided if we havent tried to be like facebook and uber. i think a lot of companies tend to forget about survivorship bias. they focus on the things that worked for massive companies and apply them to their medium company but ignore all the reasons why they did it and what problems they had to solve with doing it. great article üèº this is kinda what got us thinking when we created wundergraph. turn all your services into a monolith. no need for microservices everywhere.;0
ii595fv;Reddit;2022-07-29 18:26:58;it's fun to watch the pendulum swing between models over the decades as people forget the problems with each extreme and reach for the promise of the other and apply lessons outside their domain of applicability. it used to be mainframe vs. distributed then monolithic vs. microservices. the fads shift over the years and at some point you have to arm yourself with but if we do too much it will cause against either extreme. then figure out what makes sense for your actual problem space.;0
ii3v0h5;Reddit;2022-07-29 11:36:49;yes. the scaling benefits is so massively overblown. and most companies do microservices because they came to the issue that many people working on the same repo was causing to many issues. there are standard tools and methods around this. makes things so massively complicated. makes me have to define the same interfaces in 3 different levels and abstractions ending in some horrible yaml syntax.;0
ii44c4k;Reddit;2022-07-29 13:26:47;microservices are not to solve a technical problem. they are the result of structuring your code after your organization.;0
ii4p7qa;Reddit;2022-07-29 16:17:52;i attended a large devops conference last year which had someone talk on a very similar topic titled microservices make no sense. i should have stuck with the monolith which actually pulled a switcheroo on us. at the qa part of the talk somebody asked the speaker that if microservices makes no sense when was the last time they delivered a monolith. speaker answered with about couple of years ago. not sure what to make out of it but if the author answered the same thing they probably have no say on making sweeping headlines like it. interestingly the author's company is from the same city where that conference was held too.;0
ii5vyzt;Reddit;2022-07-29 20:55:34;most microservice implementations can be better described as distributed monolith. that's why it often doesn't work. it doesn't take advantage of the pros and brings along all the cons;0
ii7nb7j;Reddit;2022-07-30 04:44:01;there are a large number of highprofile practitioners and proponents of the microservice architecture. facebook uber groupon klarna amazon netflix ebay comcast and more. you are probably not these companies. which is to say your team probably doesnt look anything like these companies teams. you probably arent facing the same problems they are. if you are but you probably arent stop reading. you might need microservices. i would argue that even big companies don't actually need microservices. twitter and facebook famously has thousands of developers that are not obviously producing anything. you can argue they are doing some work behind the scenes but remember we are not talking about 20 developers or a 100 developers. we are talking about thousands of developers. whatever you think facebook is doing behind the scenes probably does not require more than 100 developers at most specially if you combine this with the claims that modern programming best practices increase productivity several orders of magnitude compared to dinasour technologies from 20 years ago. now given this bit of information it seems to me very likely that microservices is one of the reason for this stupendous lack of productivity. it also seems pretty obvious that most of the modern programming best practices are not good practices let alone best.;0
ii4b0e7;Reddit;2022-07-29 14:29:35;this blog really reads like enforce on your monolith codebase everything that microservices provides while increasing build times and complicating cicd.;0
ii4pyjz;Reddit;2022-07-29 16:22:50;yes i do but i'm not building the kind of soa hell that menu of you think is required for microservices. when i build a microservice it's an independent worker process that shares nothing but the database and maybe a message queue. basically this you can also pull asynchronous tasks into background jobs with independently scalable queues. ensure that you have enough queues to give you the granularity of control over the number of boxes necessary to keep your queues down and your infrastructure costs reasonable. that screams to me use microservices here. here's a test can you turn off one service in you system for a period of time without breaking all the other services? if the answer is no you have a distributed monolith a.k.a. soa hell. if the answer is yes but it may take awhile to catch up when it turns back on then you're doing it the right way. another valid answer is yes but specific panels or pages of the website won't work. graceful degradation is also an acceptable use.;0
ii5amwg;Reddit;2022-07-29 18:36:23;i maintained a couple of microservices that are strictly single purpose. my life was never been easier than when i was maintaining a monolithic service. its great as long as you have the discipline to keep it single purpose. also you have a sizeable engineering team. if you are less than team of 10 devs never do a microservice;0
ii5h375;Reddit;2022-07-29 19:17:54;the only thing microservices help with deploying infrastructure which cannot live together and have significantly different hardware or availability needs deploying code changes in a more agile way when teams are working on different services and tend to interfere in their deployments there are other cases but this is really a large company thing. any startup investing in microservices without real infrastructure requirements is just adding massive overhead on devops and sacrificing product agility;0
ii5puwh;Reddit;2022-07-29 20:15:10;i briefly worked for a team that broke their monolithic application into tightlycoupled microservices specifically because the team collaboration was bad and they wanted to give everyone their own service to work on independently of course the better solution would have been to fire the two toxic individuals who controlled the repo and blocked everyone's prs for unexplained reasons but then management would have had to explain why they let the team get to that state in the first place and we can't have that. i'll let you imagine how that worked out;0
ii4kwqd;Reddit;2022-07-29 15:47:36;that's a very naive perspective. microservices are an architecture decision with tangible technical proscons relative to the alternatives. not all apps need microservices but you don't need microservices is a bullshit clickbait headline. maybe you don't need microservices but some people certainly do.;0
ii53mux;Reddit;2022-07-29 17:51:48;right now my team owns a bit of a monolith and a microservice. every team member prefers to work on the microservice except the one guy who has been in the monolith exclusively for 10 years. it's night and day. i get that maybe our circumstance is unique but i don't think so. working on a monolith can be miserable tedious needlessly complicated work. a microservice allows for greater encapsulation of concerns.;0
ii5j1ac;Reddit;2022-07-29 19:30:26;what a useless title. we have a highly distributed system end to end. components are large ranging from ui backend api postgres click house redis ml models model integration platform and many more. as engineering manager i would be wrong if i said no to microservices. so like everything else in life it depends.;0
ii4q6z0;Reddit;2022-07-29 16:24:25;bit of a shitpost the author clearly has had bad experiences with microservices and wanted to vent their frustration. they don't provide any examples numbers facts or bits of data to support any of their arguments or claims which is usually a sign that it's a personal opinion piece and isn't based on actual information or statistics.;0
ii58mg9;Reddit;2022-07-29 18:23:36;microservices describe more of an organisation design than a system one. too many places dive into ms without understanding that it requires working in a way that traditional it organisation designs prohibit and wonder why they didn't end up with the ivory tower architected dream of a module system.;0
ii5dikh;Reddit;2022-07-29 18:54:50;i had about a dozen docker containers four of which were far too tightly coupled. so i collapsed them together into a more monolithic structure and eliminated about half of the code it was all just chatter code. now my routes are so much easier to understand... the rest of the app definitely needs microservices though.;0
ii61qnh;Reddit;2022-07-29 21:33:59;yeah in most cases microservices bring more headaches than benefits. there are really good use cases but they are few. at least 80 of the projects don't need microservices. i am a big fan of splitting big monoliths into 2 3 or 4 independent monoliths. it will need serious refactor if your code is tightly coupled but it still a lot more manageable than starting again with microservices. one benefit of this approach is that you can work in parallel and once you extracted your first independent service you just plug it into your monolith.;0
ii75isv;Reddit;2022-07-30 02:20:58;team topology microservices every programmer has cognitive limitations and ability limitations. it is impossible for a programmer to take care of too much code and work overtime. the cognitive ceiling requires the accumulation of quantity to make a qualitative breakthrough;0
ii8txju;Reddit;2022-07-30 13:05:37;i dislike articles like this that make it sound like a binary decision. there are times microservices are what you should be doing. then there are times they are not.;0
ii5dil4;Reddit;2022-07-29 18:54:50;my problem with articles like this is that they always have a they can use it but you shouldn't edge case because microservices are the right solution to real monolithshttpsblog.philliptaylor.netmicroservicesaretherightsolutionfortruemonoliths. if you work in a company with 50 developers you probably should be writing microservices and not letting someone talk you out of it. where people draw the line is the art but they apply far more widely than the author claims. working in governments working in education finance large ecommerce platforms and many other places can all benefit from microservices. it's also a good way to build your way out of poor technical choices.;0
ii56960;Reddit;2022-07-29 18:08:31;i've been saying this for a couple of years and always get moderated to hell by microservice fans. seems they invested their career in it and are protecting their wallet. i keep asking for specific scenarios and when provided there are traditional ways to handle almost every one. while there are a few edge cases where microservices may shine they are relatively rare in practice. your app does not have to be one big exe. you can split it if need be and often the rdbms is a great way to communicate between the apps since logging of transactions is usually needed anyhow for real businesses. if your product is cat videos maybe it doesn't matter if some get lost in the shuffle but not every biz sells social penny lint. and a lot of it seems to be hatred of dba's. it's true some dba's get carried away with power but letting programmers overdictate the data models also has downsides. sometimes it's throwing technology at a people problem. get better dba's if that's the real problem not reinvent database concerns in app code they don't belong there. our architect added microservices to our stack and it's a friggen mess. fortunately the baard left to ruin a different company. i sold my stock in his destination.;0
ii4352c;Reddit;2022-07-29 13:14:18;modular monolith and practices described in the post can get you very far. but sometimes you still outgrow it even if you are not facebook or amazon. but even then you probably not need microservices but just regular services with welldefined boundaries. as someone told me many years ago microservices is something you grow into not decide upfront.;0
ii4d3k5;Reddit;2022-07-29 14:47:15;yes finally some cold shower. you don't need microservices everywhere. you don't need 100500 repos. what a nice feeling when some motherlover instead of breaking production has compilation errors and failing tests. this is 100500 times harder to achieve if your code spread in tiny bits without qny interconnections.;0
ii4dcv6;Reddit;2022-07-29 14:49:21;for nodejs backends i've been really enjoying nestjshttpsnestjs.com. i'm able to easily modularize my different service domains and features even use different approaches rest graphql security methods and then have all those modules run on the same server. if i need to move a module to separate microservice i can easily enough.;0
ii4kgqr;Reddit;2022-07-29 15:44:22;microservices makes a lot of sense in a much broader picture than just it architecture those include organization teams awareness proper modularity and so on. monoliths makes bigger systems enterprise grade so difficult to maintain develop test and so on that is the fact but vast majority or projects are not that big. always suggested people to not get into microservices just because it seems cool since those are great but for the specific projects and organizations only. right now there are a lot of modern tools for cicd testing api discovery etc so that once problematic but now properly planned soa becomes great solution or even monoliths.;0
ii4kqg1;Reddit;2022-07-29 15:46:19;i skimmed the article. i can't tell if its good or bad for the past few months every time i hear about microservices are not neededhardbad it reminds me how i heard threads are very difficult in c. turns out it's a load of shit and requires a new skillset. i wonder writing a microservice is dead simple but requires a new skill;0
ii4ixfy;Reddit;2022-07-29 15:33:03;i know i'm going to get hatemail for this but i don't see why microservices exist as a concept. it's just breaking down a program into multiple pieces. i do that all the time with unix pipes and flexbison. then i can test each piece individually and connect them together. does connecting the pipes to netcat change something?;0
ii53r18;Reddit;2022-07-29 17:52:32;microservices are supposed to follow the organisational structure. each microservice is owned by a small team. it wraps some state that is reasonably independent from some other state that is wrapped by another microservice. a small team should own say up to five microservices. if there are more then it's bad. if a team finds itself changing code in multiple microservices that it doesn't own then it's bad. i for one do not like working on monolithic large codebases. in theory code should modular but in practice there's spaghetti.;0
ii57agi;Reddit;2022-07-29 18:15:12;microservices increase boilerplate in a distributed fashion. i like libraries and a good playground for dependency management.;0
ii5d5bu;Reddit;2022-07-29 18:52:27;does this article comes after my post? https thanks for sharing op;0
ii67div;Reddit;2022-07-29 22:11:59;you don't need microservices it is not costeffective to restructure your whole architecture. proceeds to list all kinds of timeconsuming ways in which you can restructure your architecture instead;0
ii6raxg;Reddit;2022-07-30 00:31:35;ho look its the weekly rprogramming build a monolith and fuck microservices article lol. i hate the word micro personally because yes some people have gone full retard making services way too small. we have a couple main services working fully independently from eachothers and using pubsub messaging to alert the other parts of the system about meaningful events. each services has its own independent database but the databases are also replicated in a datawarehouse for analytics and audits. the thing about going through with a service based architecture is 99 of the time if you have never done it before you shouldn't try to just do it yourself after reading a couple blog posts. get people who have experience doing it to lay down the foundations otherwise you will fuck yourself.;0
ii6rfen;Reddit;2022-07-30 00:32:31;seems like microservices are a great way to solve team organisation modularity challenges. just a shame that requires runtime socket calls.;0
ii701oh;Reddit;2022-07-30 01:37:37;i think the general consensus has evolved to basically be whether or not you build microservices or a monolith the service based structure works and the code minus the infrastructure should basically look about the same between the two.;0
ii73f11;Reddit;2022-07-30 02:04:11;i think it's healthy to use all the tools at your disposal it's not a one or the other proposition you can combine monoliths microservices and even lambdas in your architecture depending on what you're building the scope of it and your team size. if you're a very small team though i think monoliths improve manageability and reduce complexity. there are trade offs to that but i think in most cases the trade offs are worth it for a very small team;0
ii7h3te;Reddit;2022-07-30 03:53:16;i go by the principle of anticipating the critical areas for bottlenecks in missioncritical features login payments etc. during the design phase to decide if microservices are beneficial. login which is the publicfacing portion of any website is a feature where breaking it into many microservices would benefit ifwhen one of the services gets hacked especially those facing port 80443 the attacker would need to hack a string of other connected services before loggedin or internal access to the site and user content. one of the best features of microservices is that they are easy to scale by adjusting to the volume needed. a company that runs an ad during the super bowl with its website will generate hundreds of thousands if not millions of accounts in a day. a microservice will quickly scale login servers to customer demand when using standard cloud services by amazon and google.;0
ii7n2q5;Reddit;2022-07-30 04:42:01;you solve most of these issues with microservices by using an api gatewaymanagement and versioning your apis.;0
ii7ncae;Reddit;2022-07-30 04:44:16;ive worked at both the largest microservices tech company in the world and one of the largest monolith tech company in the world i much prefer microservices personally;0
ii8d4b9;Reddit;2022-07-30 09:15:14;feels like the article boils down to 'well designed systems are well designed poorly designed systems are poorly designed. the rest is window dressing.' which.... yeah. i will say it feels a bit reactionary but at the end of the day microservices aren't always a good thing having been on both sides of the argument.;0
ii8dkd6;Reddit;2022-07-30 09:21:01;tbf i've worked in multiple bigdata highratedata companies through my career that are none of those companies but certainly did deal with massive amounts of data where every byte counted. fintech telecom streaming to name a few industries. of course the fintech being very old had already figured out the value of lowoverhead data formats and transmission and didn't need microservices either at least not until they started doing webbased delivery.;0
inl08r4;Reddit;2022-09-08 14:58:40;the global microservices architecture market size is projected to reach 8073 million by 2026. check out the technology stack for microserviceshttps;0
ii51trq;Reddit;2022-07-29 17:40:19;i suppose this is what happens when you dial the microservices up to eleven avoiding microservice megadisastershttpsyoutu.begfhvctwmw8. you get a 10 minute waiting time while the microservices all refer to each other and clog up your network while doing so. my current project is developing azurebased microservices and i must say it is unpleasant at times. with a monolith i could fire up the whole application through my ide and debug it locally. now i need to spin up multiple other services in order to get access to the microservices i rely on or i have to connect to azure itself. the latter is needed because microsoft has limited what azure components can be emulated by visual studio.;0
ii4emgm;Reddit;2022-07-29 14:59:38;probably build or borrow some decent tooling to make communication between your services easy. this makes no sense in microservice architecture your services dont communicate directly. they just broadcast events and listen for events they care about to keep their database in sync.;0
ii7f0da;Reddit;2022-07-30 03:36:14;this happened to my team before i joined. so many things that could be in one place and losing performance by making intermediary rest calls to a service that just calls another rest or soap endpoint. thankfully a lot of the microservices did stick to 'i only do one thing' so fixing the orchestration layer hasn't been as bad as it could be;0
ii9mynn;Reddit;2022-07-30 17:29:04;but then if you're not careful you end up with a tightly coupled monolithofmicroservices except with lots of http calls at every function and versioning to deal with. it's remote ejbs from 19992000 all over again. this happened exactly there. every ejb needed to do one thing and do that well. and everything had to be remote since well uhhh.. network transparence and such. so you ended up with tons and tons of rmi calls totally saturating networks.;0
ii4yxhh;Reddit;2022-07-29 17:21:45;yeah i think author confuses bad design and encapsulation with microservices. the decoupling between teams and workflows is the biggest value in a services approach and it can be insanely valuable if done properly.;0
ii4sx7y;Reddit;2022-07-29 16:42:34;imo the article over simplies the view to a very black and white full monolith vs full microservices. i truly think most things could benefit more from just a service oriented architecture with maybe some of the services being dicomposed more into microservices. we're looking at things like a platform we might have microservices services or even an app that is a monolith. it all depends on the specific cases.;0
ii5bdff;Reddit;2022-07-29 18:41:06;i guess that really depends on how big and heavy your monolith is and where most of the bootup time comes from and also where the issue you're fixing comes from. if it comes from some universal resource like a database or parts of it referenced by all microservices then a microservice architecture won't help.;0
ii6o1oa;Reddit;2022-07-30 00:07:45;yeah it's all tradeoffs. i'd argue that if the question is should we do microservices or not you don't have a clue what problem you're actually trying to solve. fix that first. often the solution will be obvious once you know the right question to ask.;0
ii5oltl;Reddit;2022-07-29 20:06:47;yeah but the negatives of that are additional servers to maintain and pay for and additional points of failure. having one big deployment process that everyone can know and support can be a lot better than a dozen different deployments that only one or two people know how to do. then what happens when the changes in your microservices need to be accounted for in the main app? not only are you deploying everything all at once anyway you need to coordinate that they are done at the same time or spend extra time coding to support multiple versions. it's all a balancing act. it depends on the project requirements complexity and the size of the team. on one of our projects the microservices have great value on another all they do is slow development time.;0
ii6d9pm;Reddit;2022-07-29 22:52:10;large monoliths aren't necessarily painful or slow to deploy. a monolith simply means a single app code base. a monolith can be deployed to multiple servers each which can be redeployed to separately resulting in zero downtime. a monolith doesn't mean that app necessarily must be single instance. a monolith need not have a slow startup time that's dependent on the libraries frameworks and architecture. a large monolith could theoretically startup in a few seconds. maybe you are conflating monoliths with architectures and frameworks often used to make monoliths like .net entity jee or hibernate. those are often used by convention not by necessity. for example i could write a monolith in java on the graalvm using the spark framework instead of spring mvc jooq instead of hibernate and dagger instead of spring core resulting in a startup time of probably less than 5 seconds. graalvm would make it possible to package the app as a singlefile native x86 executable. if people are going to switch from monoliths to microservices they should take the time to understand the true differences of the concepts not the differences that occur due to conventional usage.;0
ii6wai9;Reddit;2022-07-30 01:08:46;i don't think this is related to a monolith or a microservice but rather a team's maturity with regard to a deployment process. the reality is if a team cannot reliably deploy a monolithic service there isn't a chance in hell they're going to reliably deploy a collection of microservices. i currently work in a monolithic application 1m sloc. the deploy is exceptionally good and reliable. we've deployed on a two week cadence for 5 years like clockwork. we acquired a startup that dove headfirst into the short end of the microservices pool. their deploy is an absolute nightmare despite the overall codebase being about a quarter of the larger product.;0
ii5cwyu;Reddit;2022-07-29 18:50:58;we need microservices because our b2b model includes an enterprise tier that allows us to design a custom micro service designed for the clients needs. when the contract is up we remove the service from our system. that way our code base is not polluted with custom code for clients. we usually take on about 20 or so micro services a year which is a huge revenue stream for us. it also allows us to partition teams based on custom and core development. i would also add were not at amazon or facebook scale but doing this as a monolith would be crazy as this article suggest we should.;0
ii6obou;Reddit;2022-07-30 00:09:48;yes. this whole microservices or not debate to me makes no sense. usually the solution is quite obvious. something like you're describing. it's a solved problem from my perspective.;0
ii4f5fn;Reddit;2022-07-29 15:03:50;think if your services are going to be talking just with each other there's not a lot of good reasons to jump into full 100 decoupled microservice world microservices shouldnt have any synchronous communication with each other. if they do that isnt microservice architecture that is a distributed monolith.;0
ii3ytmz;Reddit;2022-07-29 12:25:13;this... after screwing up with the whole choose your own tech and microservices for the last 7 years reasonable sized services using shared foundations and the same tech stacks seems to be the happy medium.;0
ii4niw1;Reddit;2022-07-29 16:06:12;i think the key is modularization in general and avoid interdependencies. when all of your files are in one massive solution no matter how careful you are you end up with unintended coupling or operation order. i've built several smaller systems lately where we started with one simple application. trying our best to isolate into separate projects logically. every one of them when the time came to start splitting out behavior was not so easy to decouple because of these unintentional dependencies. it was by no means a herculean effort but it wasn't a simple split along project lines like we thought it would be. frankly i think that's ok! i'm a huge fan of iterative development and don't built it until you need it. as additional functionality builds out and we see a clear separation then you just have to take the time to start separating the behavior. in my opinion it's very similar to refactoring. build modularly use proper principles solid dry etc... and allow the time to refactor or in this case splitting. to me it's all part of iterating and growing your system. no one architectural pattern microservice etc... is going to fix good coding practices and iterative approaches.;0
ii4e9vh;Reddit;2022-07-29 14:56:47;its difficult to split a database up after the fact especially if your app is deployed by clients onprem. microservice architecture is easier if you start out with it.;0
ii4cliz;Reddit;2022-07-29 14:43:02;or build a microservice with a monolith in mind and then if you need to start to merge them into larger services?;0
ii42xpy;Reddit;2022-07-29 13:12:05;microservices can be an effective way of aligning with domains when you have multiple teams working on various parts of a cohesive application. at the same time they can be a symptom of bad organisational practices like bad management and poor communication. but also they can be a good way of isolating your team or your domain from those wider problems. the more you think about them beyond just the code level you start to see pros and cons. often a bad organisation is going to blindly end up implementing more of the cons while a good organisation is probably going to consciously decide to implement the pros. there's a lot to think about.;0
ii63rxj;Reddit;2022-07-29 21:47:41;the thing is that most of the codebases are shit and every day i would choose a shitty monolith over a shitty microservices project.;0
ii6x1xc;Reddit;2022-07-30 01:14:35;i'd take a well organized monolith any day. microservices are straight up dumb.;0
ii8itwb;Reddit;2022-07-30 10:33:03;this is really the crux of it. the cases where microservices are implemented well are incredibly rare and the vast vast majority of companies would be better off just not doing it and saving themselves all the headaches.;0
ii9ew4s;Reddit;2022-07-30 16:27:30;have you worked with monoliths though? because scalability is not the only benefit that microservices offer. i prefer good old services though not too big not too small.;0
ii48z4k;Reddit;2022-07-29 14:11:38;and most companies do microservices because they came to the issue that many people working on the same repo was causing to many issues. there are standard tools and methods around this. the same thing is currently happening at my company right now. can you share some of the tools and methods to overcome this issue?;0
ii6x6fw;Reddit;2022-07-30 01:15:32;all of the benefits are overblown imo and the downsides are glossed over and there are many. microservices are a cargo cult programming fad.;0
ii4g48r;Reddit;2022-07-29 15:11:31;yep. and then you have n microservices and suddenly n2 infrastructure concerns. it's never been a good idea in my experience. it allows people to write worse code because the code is small and contained and people don't really care and many bugs are lifted to infrastructure concerns which aren't tested validated or ever really checked. it's like fp. sure it's good and i am a huge fp fan! i write exclusively fp code. but referential transparency can only go so far. if you can't write good nonreferentially transparent code how are you going to write good rt code on a shared server? all code and sideeffects will be comingling at runtime the ability to reason about it at compile time doesn't help if the entire structure and logic is a heaping pile of shit. screw you jake you are a bad developer and knowing the fp words doesn't change that.;0
ii4bjgu;Reddit;2022-07-29 14:34:09;microservices was popularised by netflix who used it to solve scaling problems.;0
ii5g5dg;Reddit;2022-07-29 19:11:47;if microservices makes no sense when was the last time they delivered a monolith. speaker answered with about couple of years ago. couldnt that be because management preferred micro services;0
ii8h2hc;Reddit;2022-07-30 10:08:23;not sure what to make out of it but if the author answered the same thing they probably have no say on making sweeping headlines like it. who else but somebody who has been made to code in microservices for a long time would be qualified to discuss the steep pitfalls of the design? i mean in the opposite scenario you'd be here typing out but the author has no clue how to do microservices as they've never done it they probably have no say on making sweeping headlines like it! no? it's like me and scrum scrum is cool by me 10 years have shown me that agileÔ∏è and the inevitable scrum that comes with it is just not an upside. have i done anything else for the past 10 years? nope. do i still think it's terrible and what we had before was factually better? yep.;0
ii4m8aw;Reddit;2022-07-29 15:57:04;cicd is drastically simpler to implement maintain in a monolith. if its microservices even if its a monorepo god help you if its not youll have to duplicate your configs across all your microservices if you want standardized formattingstylingtest entry pointsdeployment patterns etc. it may increase build times certainly but youll have fewer deployments since you wont have to do any upstream integration test builds. or you just never refactorintroduce breaking changes at which point its good luck in the battle against tech debt.;0
ii5g5it;Reddit;2022-07-29 19:11:49;yep. the services parts of our org have been relatively successful. would i have done things differently? possibly. conways law is always waiting. but the microservices folks just made everyones life harder. and this is on a project that has had request tracing for as long as its been a thing people wrote about. as long as the first time i argued for it on another project.;0
ii4lta1;Reddit;2022-07-29 15:54:04;right? funny thing is most microservices literature specifically tell you dont do microservices unless you really need all of the benefits of them. sometimes a monolith or micromonolith is good enough.;0
iicmm42;Reddit;2022-07-31 07:48:10;the real issue actually is that we lack experts that have the knowledge to craft microservices. we try to think about microservuces in a way that we have been thinking in the past 40 years monoshts which are clumsy ugly written code chunks that are no good for anything else than scrapping right now. those projects are being held on life support systems just because of the last couple of revenues the product is going to deliver to the already desperate business management. you know that people also thought that taking a bath kills you eventually but today you are taking a bath sometimes 2 times a day.;0
ii5f4dw;Reddit;2022-07-29 19:05:05;does this guy not know how a successful business grows and changes? do you? large successful systems grow out of small successful systems. ive seen many people try to grow their way out of problems. all ended in failure. yagniy is very important early on. you have to leave things out in a way that allows you to add them later. you aint gonna need it yet with microservices. what you need is for requests to be answerable without session affinity. once you have that you can do a lot of things with traffic shaping that look superficially like microservices. if it works then you can extract micro services when the multipliers get big like 51 instead of 53. and even then are you really sure you need this asymmetry?;0
ii68ps2;Reddit;2022-07-29 22:21:05;imo dbas are a terrible place with which to put the data model mgmt concerns. they dont even implement usages why would they understand the data model? i hate microservices with a passion for anything betterserved with a monolith but if youre wanting to couple apps vi the database yea that should be microservice time. two different apps should almost never target the same database ime. its impossible to reason about the state while coding let alone to try and coordinate changes.;0
ii4mh5z;Reddit;2022-07-29 15:58:49;im not entirely sure theres a worthwhile distinction between microservices and services do you see one? i think even fowler said theres no real distinction to be made its just newfangled soap without the xml.;0
ii50zpx;Reddit;2022-07-29 17:34:59;so much this. when i first learned about microservices i took it as a pattern for an entire organization or massive system. not a single application or at least not a smallmedium sized application. but like a mother of all systems applicationui.;0
ii67j19;Reddit;2022-07-29 22:13:03;yes of course if you have 12k unit tests you may want to consider microservices. but i bet you can probably improve your ci pipeline which is stupidly blocking the dev process to run every single test for a one line change. you make the fallacy here of making a general statement you all probably do need micro services off a specificallyconstructed example. i can make anything seem valid if i get to choose the anecdote by which its judged. if you are waiting 20minutes on every line change because its running every single unit tests you dont have an architectural problem you have a stupidci problem. why would you be running every single unit test when you only changed one unit? thats the worst possible ci mistake you could make. even blocking dev to run every single integration test would be very dumb. and even worse than that tests are only meant to slow you down before deployment not during development. blocking dev for tests is an insane ci system. theres no reason longrunning tests cant just run in the background while you continue working on the problem.;0
ii6846v;Reddit;2022-07-29 22:17:01;why would you have 5 microservices for a team if its supposed to be teamaligned? if thats the point then each topicfocused team should have just one microservice.;0
ii61dwe;Reddit;2022-07-29 21:31:38;if your services are too chatty perhaps they shouldn't be different services depends. let's say you have two for lack of a better term services. service a and service b. they are highly chatty. now if either service a or service b going down creates a sev1 incident meaning business critical drop everything this is a firedrill then yes combine them assuming you have hardware that can handle the combined set. but you've put more reliance on a single set of hardware service b could bring down service a!. yes. so what? if i have two sets of hardware and either set going down yields the same result from a business perspective shit's broke to an unacceptable degree i haven't created any resiliency just because i split things up. however now let's say that service a is business critical but service b can be down for awhile and no one would really care. well in that case you should split them apart because service b having an issue won't take service a down with it as well. i feel like everyone completely forgot one of the main original points of microservices which was to keep the lights running when some tier2 api has an issue and instead decided everything must be its own thing just 'cause.;0
ii55w3s;Reddit;2022-07-29 18:06:11;if your services are too chatty this microservices are a good solution when they don't talk to each other.;0
ii92mql;Reddit;2022-07-30 14:40:39;now i need to spin up multiple other services in order to get access to the microservices i rely on sounds like your services are tightly coupled which doesn't fit well in a soa.;0
ii4krpq;Reddit;2022-07-29 15:46:35;often enough microservices leverage messaging but your statement is completely ignorant and incorrect.;0
ii7riiv;Reddit;2022-07-30 05:20:00;yep this was a beginners introduction that was massively simplified to make a point no architecture decisions are that straightforward. there is a whole world of gray between monolith and microservice.;0
ii78ulb;Reddit;2022-07-30 02:47:12;yeah there's a certain sliding scale to it. i tend to be very antimicroservice and one of my hallmark examples is a company i worked for that had a team spend 34 years building a microserviceoriented project that ultimately was burdensome to deploy performed poorly and internally ddosed critical infrastructure. it was basically an unsellable multimillion dollar project. our team came in rewrote the thing as monolithic as possible and was a major success story for the company. however in a broad sense from a certain frame of reference the service we built could probably be considered a microservice. we had a welldefined scope and relied on regular imports from a centralized system. we did daily file imports but we could've slapped kafka or some sort of webhook or whatever and gotten similar results with few modifications to the software itself. however what we did not do is say one service for seeing sales history! one service for seeing deals! one service for seeing your balance! the important thing is that our service was internally consistent as a monolith and coordination between external systems was kept to an absolute minimum because coordination interfaces are complex and fragile. microservice patterns where every other function call is a coordination pattern whether it's synchronous api calls or async event drops quickly leads to madness.;0
ii6bskt;Reddit;2022-07-29 22:42:03;got to remember that the people who work there are first of all just people and not genius devs secondly they use the term as loosely as anyone else it's like businesses saying they are agile businesses say they are using microservices tdd the lot. it's all an interpretation of the term and usually the actual implementation is different to the ideal;0
ii5c9al;Reddit;2022-07-29 18:46:45;referenced by all microservices i think the idea behind microservices is that there are no such components not even a shared database. all dependencies are bundled together into a single deployable component.;0
ii8h6k6;Reddit;2022-07-30 10:09:59;you end up with huge chunks of code that all teamsmodules are using within the monolith that don't have an active owner. surely they just have shared ownership? better than a project you depend on that some team fiercely defends and refuses to change. updating versions is difficult i think that's easier with a monolith surely? plus tests taking forever not exactly an issue with monorepos. it's an issue with build systems that don't enforce dependencies which to be fair is all of them except bazel and derivatives. don't do a big monolith unless you have a build system that has infallible dependency tracking. deploys being slow that seems like a genuine issue. also the inability to scale different parts of the system independently. but i would still say the alternative to a monolith is a few services not a billion microservices.;0
ii5i9ed;Reddit;2022-07-29 19:25:27;because if you want to deploy a monolith then everybody knows that everything needs to be tested and that takes time. if you only change one microservice then you can lie to yourself that only this microservice needs to be tested which is a huge timesaver. s although i'm not sure that the s should really should go here.;0
ii4id80;Reddit;2022-07-29 15:28:46;yeah it's a distributed monolith and that's ok. it can get pretty ugly when someone tries to do real microservice architecture in such a setting. suddenly you're writing a shitload of tests which would be completely useless if you just used a common package in two services.;0
ii62y67;Reddit;2022-07-29 21:42:06;i think the key is modularization in general and avoid interdependencies. i mean every microservice implementation i've ever seen of sufficient age fails at this as well...;0
ii51u07;Reddit;2022-07-29 17:40:22;but it's useless to start with a microservice architecture because it's more complex from an engineering perspective and the vast majority of companies never reach the scale needed to use microservices. time to market matters so much more for a new company than having things in the best possible setup just in case they hit it big. always better to start with a monolith and break it up later if scaling becomes a problem.;0
ii6wtmf;Reddit;2022-07-30 01:12:48;it isn't necessarily hard to split a database up after the fact and it also isn't clear that dividing the database would be the right way to spin out a microservice anyway. also there are other ways to handle dividing load besides breaking apart a database into microservices.;0
ii44lwq;Reddit;2022-07-29 13:29:35;completely agree with you i read once that some people try to use microservices as a technical solutions to fix organisational problems. dont totally agree with it as there are microservice evangelists out there as well.;0
ii5jqmm;Reddit;2022-07-29 19:34:58;our auth microservice is up to 10 minutes and 1k tests. and it is legitimately only auth. microservices are no guarantee of fast test cycles.;0
ii4mc6o;Reddit;2022-07-29 15:57:49;modularizing and versioning correctly are the first things. a good microservice architecture also does api versioning. people will argue that your code's too dependent on each other. microservices do not solve this this is solved by good design. microservices force you to make those choices in modularizing but it adds complexity and now you're communication through multiple layers of abstraction example c grpc kubernetes configs etc. instead of it just being a versioned package c c and forces your developers to do tedious overhead. you now got rid of the monorepo without having microservices. you can also actually keep the monorepo with stuff like httpsrushjs.io apparently? but i have no experience with that. i've been at 2 companies that do microservices and one still had a dbmodels package that basically meant if you used a database you used that package. this isn't microservices. the other had a tiny microservices where each service had its own mongodb database. this was better but they also overshot in microservices and it just became extremely tedious adding simple operations. i also think mongodb is just bad.;0
ii4l2zw;Reddit;2022-07-29 15:48:51;good use of git version control systems trunk based development ci automation test guarded feature work preferably e2e tests refactoring etc. the only advantage microservices have for modularity is that they force you to breakup files at a certain path since they of course need to be different files to be independently deployable ok not technically true but effectively so. you can of course although some dev teams have terrible habits simply use modules to break up your code and make it more intelligible for everyone. modules have been around for a long time in most programming languages. thats an obvious thing to say but it has to be said since i still see 5k line mega files with intricated concerned as if import doesnt exist. im not saying every file has to be a single function theres a middle ground but many people do not pay it enough careful thought.;0
ii530el;Reddit;2022-07-29 17:47:53;you shouldnt be shipping your repo structure the decision for microservices shouldnt be driven by poor build or git tooling. what problems are you running into where your repo isnt scaling?;0
ii5vk2b;Reddit;2022-07-29 20:52:48;i work in retail and we had a funny thought experiment considering what a microservice really is. especially what micro and service really means. so if we had one store a single piece software on a single server probably would be fine. now you're growing you add more stores you have more customers and transactions and so on and you can't grow vertically anymore or whatever. now you would for instance extract the inventory system the thing that tracks all the movements of articles sales incoming goods write offs and so on. that would be a microservice right? but our company's inventory system tracking billions of movements and provides real time data is basically a huge arse monolith. ... and if you look at it this way our company's retail it system is really a microservice infrastructure which consists mostly of large monoliths as service some systems consist of microservices themselves. registers logistics manpower planning sales reporting promotion planning ecommerce all dedicated systems with a dedicated team that is responsible for it. so yes microservices for us is really about conway's law or the teamsandtheirresponsibilitiesboundaries...;0
ii4kc45;Reddit;2022-07-29 15:43:26;fault isolation yeah but then you have to add a ton of tooling to identify where in your network the fault is and which one of your clusters nodes pods instances etc are experiencing the error. you need elk or splunk or something to be able to find where your error is you may even introduce a dangerous autoscaling edge case that's more difficult to test. all of these capabilities log aggregation monitoring autohealing scaling are all good things to have regardless. i think the rub with microservices are that you have to have all this tooling to get back to the observability and control of a monolith. just by going down the microservices path you've inherited all this necessary baggage. there's been a ton of these blog posts so i was loathe to read it but essentially the gist of all of them is microservices should not be your default architecture. that said it feels like in my circles if you're not proposing a microservices design or planning to move to it you're a foolish old dinosaur... which is unfortunate because microservices requires your teams to know and understand so many more technologies and requires a bigger team to implement small to medium size applications. there is a tradeoff tipping point where that makes sense but there are tons of examples where teams are well behind that tipping point. that said i agree. it's very hard to transition once you reach that tipping point unless you've been planning for it the entire time but there are some good architectures and design patterns that can help.;0
ii4fjca;Reddit;2022-07-29 15:06:55;event driven architecture can cause eventual consistency. synchronous microservice calls are immediately consistent.;0
ii4fx14;Reddit;2022-07-29 15:09:57;microservices predate netflix by some time.;0
ii4omhd;Reddit;2022-07-29 16:13:50;not according to what the author was suggesting. to handle some of the issues that microservices address he was specifically talking about multiple deployments from a single monolith. that makes your cicd much more complicated.;0
ii4naal;Reddit;2022-07-29 16:04:32;yes that's how you build apis you don't do breaking changes you create a new version and switch over. that's also a good exercise in general to not ever do any breaking changes and always have a migration path x200b working with at least 70 microservices on a daily basis;0
ii65lju;Reddit;2022-07-29 22:00:00;also its so much easier to go to a microservice from monolith than the other way around. its that conversion cost asymmetry that wins the argument for which one you should start with first.;0
ii4vpe0;Reddit;2022-07-29 17:00:46;at our company we struggle with having common terminology. to one person microservice is just another service. to someone else it means a tiny service with its own isolated data storage. to another person it has to be 50 lines or less of functional code. i've taken to just not using the term especially because what we really want is to just break our monolith up into services. how big or small or if they have storage is all dependant on the individual use cases.;0
ii8lmya;Reddit;2022-07-30 11:12:30;worthwhile distinction i don't think so. but microservices have a micro component in the name which leads to misunderstandings. people tend to understand that microservice really should have on responsibility so i've seen a separate microservices to handle registration form separate for basket in ecommerce etc. that's why i prefere the name service a cluster of distinc functionality separated from other functionalities like a bounded context in ddd.;0
ii5e9mx;Reddit;2022-07-29 18:59:39;the design error can be introduced later as well. i just shut down a microservice that grew into a problem only to hear the original authors complain about having to roll out a change to three modules at once. seems not much personal growth has come between the two projects.;0
iidvalx;Reddit;2022-07-31 16:24:57;up to five notice i didn't say it has to be five just no more than five. that's because developers working in a team will be required to solve various problems over their tenure. some of these problems may be unrelated and better off implemented as an independent microservice. depending on the domain it will be evident to know whether a new service is the best way to go about it so i won't give any examples. software needs to be maintained. it is not desirable to overburden a team of programmers with too many production services to own maintain and troubleshoot. hence from experience it seems to me that five services owned by a small team is the ceiling before quality declines.;0
ii5dvug;Reddit;2022-07-29 18:57:13;the number of hours of my life wasted arguing about dragging that metaphorical slider back and forth. but now it's not really a microservice! okay it's a service. the directive from on high is that we must use microservices. then let's call it a microservice but really it's just a service. but then how do we stop it from getting too heavy? pete you ignorant slut just write the damn service and if there aren't performance issues it isn't too heavy!;0
ii6enjt;Reddit;2022-07-29 23:01:40;the azure service bus is one of the components i cannot emulate locally. the microservices use this to exchange information. the other microservices i can run locally but i need to spin up a few docker containers since they're springboot apps.;0
ii99wge;Reddit;2022-07-30 15:46:22;i'd say you are correct it is like a number of microservices wearing a trenchcoat and acting like a monolith.;0
ii6e3d9;Reddit;2022-07-29 22:57:52;yeah it depends on your product. the biggest benefit i found was when something goes down it was easier to remove it and bring it back up. with a monolith there are a lot of dependencies. it does add an additional overhead in development but overall i felt our speed improved when we introduced microservices. i agree with a lot of points in the article too. it can be over engineering.;0
ii5ebtv;Reddit;2022-07-29 19:00:02;that's not always possible or at best creates insane redundancy to accommodate. i see this in businesses that have different services that operate on a shared data pool and they want to turn each individual module into it's own microservice. at best you can make the front end as separate modulesservices but the back end should stay a monolith if it relies on such shared resources.;0
ii940v1;Reddit;2022-07-30 14:54:02;service vs microservice i think the term microservice has evolved and no longer means what it used to mean in normal conversation. when the average software engineer refers to microservices they're really just referring to services. shared ownership shared ownership always falls apart. reorgs happen and teams change and since ownership is shared you end up in a situation where every team just assumes another team will handle it. i've seen it happen again and again. it's a form of tragedy of the commons. version updates updating versions is definitely more difficult with a monolith. with smaller services you have less code depending on each dependency and only need a single team's signoff. for a monolith you need every team's signoff. monorepo monorepos can be useful for certain things and yeah if modularized properly you can get away with having fast running tests quicker deploys etc. but i would say that's no longer a monolith but instead a set of service living under 1 repo. those are my thoughts. everyone's going to have different experiences but in mine once you reach a certain company scale monoliths fall apart or become exceedingly difficult to work with. the lack of ownership of certain portions always eventually becomes an issue and causes big incidents. maybe somewhere has done it properly but i haven't seen or heard of it.;0
ii4yjiq;Reddit;2022-07-29 17:19:15;it's one of those things about scalability. are you a small program used internally for max 1000 users? have your monolith. is this something that is sent to 30k 100k users and any change has a change request with corporate it because if something goes down lawyers get involved and start calculating revenue lost by downturns in revenue and need to validate contractual obligations? i'll have my microservice to fix the one api call plz.;0
ii4n51u;Reddit;2022-07-29 16:03:30;i mean poor testing is something i prefer to fix rather than work around. monoliths can benefit from static type safety and comprehensive testing.. microservices can't.;0
ii4nyvb;Reddit;2022-07-29 16:09:19;microservices throw errors and effectively have downtime when a component is being deployed you just don't notice because the errors are happening on someone else's service. you can have truly seamless deployment but it requires that you design the application to handle transitional states when both old and new nodes are simultaneously present. this requires effort though regardless of whether you're building a microservice or a monolith.;0
ii4wjo5;Reddit;2022-07-29 17:06:17;ansible should be the perfect tool for deploying noncontainerized monoliths if it can't do that then either your devops team is incompetent or more likely your monolith has huge architectural flaws. i've successfully deployed some pretty dang huge monoliths with some pretty dang huge yet reliable ansible playbooks. either way microservices are mostly unrelated to the issue a big architectural change shouldwould fix your monolith's flaws regardless of whether you end up centering on microservices.;0
ii5jxkr;Reddit;2022-07-29 19:36:12;that's basically the argument most of the microservice proponents are making.. like i can think of good reasons to use microservices but deployingquickly and safely is not one of them;0
iiaa1zr;Reddit;2022-07-30 20:18:37;we use to do that but it became way too complex to manage. for example a feature might take 3 sprints to implement but a custom piece might take 1. it became impossible to promote part of the application to production while leaving the other parts in staging. then we looked into automated dynamic composition based on tested packages by the qa team to be promoted to production but we werent able to find tooling designed for that problem. besides that automated dynamic composition is microservices with code instead of infrastructure. why reinvent the wheel?;0
ii46elt;Reddit;2022-07-29 13:47:28;definitely. but the always tempting thing to do in a modular monolith is to let service boundaries within that monolith get too mashed together to meet some immediate business need because restructuring can be more costly. over time you end up with a big ball of mud without sufficient discipline. there is nothing inherently wrong with a modular monolith. its just easier to violate the single responsibility principle at a module level in a monolith than in a microservice architecture. not to say that it isnt impossible to have poorly designed decoupled services that cross those boundaries too. the reality is that there is a ton of overhead to building and maintaining microservices infrastructure integration maintenance maintaining backwards compatibility between services during an update and cost although can be a cost saving measure if scaling is implemented properly for example. there are a lot of benefits you get from it outside of general architecture benefits another architectural benefit that isnt talked about enough is that it naturally lends itself well to conways law dont fight it but most of the time that doesnt mean you need a micro service. my biggest problem in my current infrastructure is that i want to scale a particular module in my monolith horizontally for performance and redundancy requirements that the rest of my architecture doesnt have. this is a perfect opportunity to separate that modular into its own service. but we dont have available cycles to do the heavy lifting to make that happen a thing that often happens for large restructuring problems. it comes up whenever there is a performance problem or outage and we remind management that it gets deprioritized days later after every incident. if we had have written our architecture from the beginning as several services instead of a modular monolith this would be easier. but we couldnt anticipate which modules would have been better served as services at the time and would have spent many cycles developing services that increased complexity for no real long term gain. its an art. edit fixing autocorrect.;0
ii4ylyr;Reddit;2022-07-29 17:19:41;mono repo ! monolith you can have a microservice architecture with a mono repo.;0
ii4ment;Reddit;2022-07-29 15:58:18;yeah but then you have to add a ton of tooling to identify where in your network the fault is and which one of your clusters nodes pods instances etc are experiencing the error. you'll want that tooling either way but i agree that if you start with microservices you will want it sooner. but with concurrent code threads network requests to any external services etc you always want some ability to trace paths. i think the rub with microservices are that you have to have all this tooling to get back to the observability and control of a monolith. i think we probably agree on this. with a monolith you can push a lot of this work off for a while. maybe that's a good thing sometimes i'd argue that it's a bad thing at least sometimes. thankfully control planes and container orchestration services have made a lot of this simpler. you get a lot out of the box if you use hashicorp nomad for example which is what i'm most familiar with. there's been a ton of these blog posts so i was loathe to read it but essentially the gist of all of them is microservices should not be your default architecture. i think the nice part of this blog post is that it says maybe they are maybe they aren't. it really depends on the project. people like to say you're not google but that's a silly straw man everyone knows they're not google otherwise... they'd be working for google. the intent behind the phrase is your scale doesn't justify this which is this silly thing where devs on the internet think that everyone is just building crud apps. many people are building those simple apps and a monolith is likely their best option. many people myself included and most of my colleagues biased by my work deal with extremely high load realtime and batch analytical work. we aren't google duh but yeah we have to handle a lot of hard problems. as with most things there is no objectively best pattern for all software. anyone saying microservices are always the best is an idiot anyone saying microservices are always the worst is an idiot. the nuance is the interesting bit but people seem unwilling to delve into that.;0
ii65981;Reddit;2022-07-29 21:57:40;yea ok but you say that like version changes and migrations and deployment plans are trivial without cost. this is part of my point. why have a whole friggin version change coordination plan deprecation notices version string stringency specifications deployment coordinations fourstate newold combinatorialisms test specs qa review meetings tickets and on and on when you could just have a commit that reads change database field name crappyname moreaccuratename and some tests that fire to make sure you ran your regex correctly? microservices architectures are so resistant to change when you do them correctly its maddening.;0
ii7dhmp;Reddit;2022-07-30 03:24:03;its not free. there are no panaceas. if you have coworkers who are fond of coupling it can be downright painful. but some people think microservices will prevent people with a coupling addiction from getting up to no good. if only that were true. people can write fortran in any language and people can do coupling in any architecture.;0
ii6669o;Reddit;2022-07-29 22:03:53;i also avoid the buzz word and just go with services a standard term of art. sometimes i feel like the microservices fanfare we saw spike some years ago came from developers who were parts of massive bloated poorly integrated teams in megacorps which wanted to convince their superiors to let them do some much needed refactoring that put the codebase organization in line with that of the companys organization.;0
ii4nsv2;Reddit;2022-07-29 16:08:09;no one says that microservices or services in general are a good design for every possible application obviously for a desktop tool they're not. but imagine you need to parse petabytes of data and you know it can be easily chunked and processed in parallel over multiple machines. so you might want to separate the parser piece and deploy on n nodes to handle this particular operation. from a different point of view maybe you have some operation that is common for many different applications. for example some kind of can user x access resource y. this feature is used by a hundred different programs. it makes sense to make a separate service instead of duplicating this logic everywhere.;0
l5xjs6u;Reddit;2024-05-27 22:32:03;that's why first i don't give a shit about what they do second as soon as i see design microservices in the job offer i switch i read the next one. most of the times this is because an architect wanted to flex or to make the whole architecture so difficult to understand and develop that he's the only one the only heroe ressource that understand it.;0
ii5n1xm;Reddit;2022-07-29 19:56:32;oh lord i had a coworker go ham on microservices. the messed up part was that she dug up a blog post with a half dozen principles of micro services and treated it like holy writ. next place was far more chill there isn't really a strong definition;0
ii55bv4;Reddit;2022-07-29 18:02:35;other commenter has a point though microservices should be eventmessagedriven and not merely asynchronous.;0
ii5225j;Reddit;2022-07-29 17:41:47;thank you for saying this. you can have containerization continuous integration and delivery dependency configuration injection programmatic datastore versioning and updates etc without microservices and having to deal with services meshes http retry configurations eventual consistency and all the other stuff that comes with microservices. there absolutely is a point where microservices solve more problems than they introduce and that's the point of every one of these articles is that if you take the principles of automation and source controlled configuration as code etc and apply them to monoliths then it makes that transition to microservices easier when the benefits outweigh the new issues they introduce.;0
ii60k4z;Reddit;2022-07-29 21:26:09;so how would you scale it proportionally? we have around 200 microservices. some of our services handle 100k requests per second some a few dozen. i cannot imagine having all of this in a monolith it would be impossible to scale. i am well aware of the downsides of microservices but i often feel that people here who are proposing monolith solutions as the best option don't really have experience working on a complex platform with huge amounts of traffic.;0
ii55p02;Reddit;2022-07-29 18:04:56;i think you're missing the whole intention. a micro service isn't magic you can implement 26 services in a bad way nothing prevents you from doing that. but if you add modular code in no matter the form stand alone independently deployable configurable and maintainable then you don't have the multiplier problem. i've seen places where they have 40 microservices with strong dependencies and absolutely no container deployment pipeline automation. essentially what was created was a monolith just split out in 40 different spots with no automation. no one concept in my opinion is magic. bad code is bad code.;0
ii4jrq5;Reddit;2022-07-29 15:39:19;microservices was never just about imposing clean architectural design but instead about easing the resistance between teams by letting each team own and control its own infrastructure and resources rather than sharing resources across the whole backend. the idea is that sharing resources prevents horizontal scaling of teams due to the increased overhead of communication. you don't really need microservices until you need to scale to several teams. most products don't ever need to reach that size and complexity. the way i see it now is that it's far easier to keep the product focused and streamlined and then build microservices around it to provide larger features that are outside of the original product scope. when you're at that point the features don't get into multilevel microservices until you absolutely have to. don't architect any solutions that require more than one microservice to be created either approach each problem individually create the services individually. trying to build two solutions at once or build a service that depends on a service that doesn't exist yet is a recipe for integration disaster and will frequently take longer than if you just built one service.;0
ii4cwyi;Reddit;2022-07-29 14:45:42;i wish developers would stop pointing at every term and saying buzzword. yes words for things are chosen to be appealing that is not surprising it doesn't make the thing inherently bad. crypto is a buzzword. that isn't why it's bad. microservices is a buzzword that doesn't make it bad. it just means people use the term in stupid ways to convey value without demonstrating value. the reality is that microservices takes soa which was already a very promising architectural pattern and provides architectural patterns that answer a lot of the open soa questions eg when do i split a service up how do services communicate etc.;0
ii4iws7;Reddit;2022-07-29 15:32:55;i'm not talking about only the act of splitting vs merging the service rather the practicality of starting with a monolith and splitting it later. it makes no sense to start with all the extra complexity and overhead of microservices to reap any scaling benefits before you know you need them as well as delaying getting your features out. it's much more practical for an organisation to keep things simple not have code have to cross processnetwork boundaries and deal with eventual consistency prove what you're building is viable and if you run into scaling concerns and need to split do so after instead of starting complex and slowing you down and simplifying later.;0
ii4zqqx;Reddit;2022-07-29 17:26:58;totally! from my experience a monolith is where your backend and frontend are all the same app. think the same process rendering a page via jsp is handing doing database stuff. i like uber's approach with domain oriented microservices httpseng.uber.commicroservicearchitecture focus on the domain concepts used define a domain language and keep stable interfaces to the outside. so good d;0
ii4ikic;Reddit;2022-07-29 15:30:19;this is just false youre being too theoretical. when you split out services youll have tons of business use cases for synchronous calls. ive worked in a 100 microservice environment not everything canshould be an event.;0
ii4lgvu;Reddit;2022-07-29 15:51:36;this is a false clarification microservices have been talked about way before eventdriven architectures were talked about. the dominant bridge had always been http and i believe it still is. event queues are even harder to get right to make the complexity overhead worth it.;0
ii4w458;Reddit;2022-07-29 17:03:27;perhaps to you. but small independent groups of services are not a new concepthttps and there were many companies making use of them before netflix regardless of what they were called.;0
ii5ibhk;Reddit;2022-07-29 19:25:50;where tech is concerned we are doubly damned. tech changes. if youre a young developer you can play roulette by attaching yourself to unproven or more typically notrecentlydisproven tech and if your gamble pays off you will have just as much experience in three years as people with ten years industry experience or so you think. once you get out of your precocious phase you find that either you learned a lot of additional tangential things along the way as i was damned lucky to do or that people call you out for being too thin on the ground not that i am immune either. for me i took a distributed computing class at a time when those were rare. so i knew about ideas that were tried in the 80s and 90s that didnt pan out any why. we still keep trying some of those ideas. microservices are just one of the latest.;0
ii4oad5;Reddit;2022-07-29 16:11:32;so microservices are for a rare complex design problem that i have not encountered and if i did encounter it the specifics of the problem would be near impossible to force into a design pattern. so they just call it microservices?;0
iinimtz;Reddit;2022-08-02 17:19:49;in my experience no more than four people sometimes even just one. in my previous job i was responsible for four services as one lone programmer. nobody else did much with that code. each service had between a few thousand and a few tens of thousands of lines of code. i was not technically part of a team because two or more people are needed for that. i qualify the services that i was responsible for as microservices. i did coding maintenance deployment and operations. my services were provided as http apis as opposed to libraries or packages to deploy elsewhere. i've seen critics of microservices write that if it is larger than say five hundred lines of code then it isn't really a microservice but something bigger. i don't know where that comes from. it's a strawman. microservices are as large as the problem domain requires them to be. what they are is not tightly coupled to other microservices.;0
ii69s3z;Reddit;2022-07-29 22:28:19;this is why i say services instead of microservices. people know what services are pretty generally understand that microservices are services and we don't have to waste any time discussing what a microservice is. unless you have that one kid on your team who just has to call them microservices because they want to be able to post on hacker news about how they're using microservices because all the best developers use microservices;0
ii5v084;Reddit;2022-07-29 20:49:12;example a basic web backend. you need to assemble data from various microservices to show on a page. this is inherently synchronous.;0
ii5g5ei;Reddit;2022-07-29 19:11:48;with a monolith any bug in any piece of code will block a deployment. when other teams need to get something out the whole organization has to stop what they are doing and work on complex hotfixes and extra rounds of regression testing. you're talking about a change in one piece of code exposing a bug in another. i fail to see how microservices could prevent this. in fact it sounds like microservices would only change how you find out that the bug exists. instead of predeployment tests failing you find out that the bug exists when you deploy and production breaks. that's uh significantly worse.;0
ii5xrfc;Reddit;2022-07-29 21:07:27;with a monolith any bug in any piece of code will block a deployment. when other teams need to get something out the whole organization has to stop what they are doing and work on complex hotfixes and extra rounds of regression testing. i wasn't implying the other problems of sharing a code base that becomes a single runnable are not problems. however i disagree that monoliths will block all deployment. i have literally deployed thousands of times the same monolith for a certain part of the infrastructure where it was safe to do so. it isn't the best idea and requires tooling or oversight but it possible. consistency in data is a data modeling and ownership problem. it has nothing to do with system architecture. even with monoliths having two teams mucking about in the database creates plenty of conflicts and necessitates someone to step in and serve a dba gatekeeping role. a service architecture just formalizes this arrangement. a microservice architecture just lets them scale out and manage the services. anyone who rails against this is just railing against best practices that apply in monoliths but are far more difficult to implement effectively. when you have bad design surfacing itself in a microservice you're talking about teams that would be equally incapable of solving the problem in a monolith. that is not true from what i have been preached to about microservice. most microservices experts preach separate repositories for every service and thus most microservices are inherently very much eventual consistency since it is very difficult to span transactions across multiple instances and thus require other external type locking. when you have bad design surfacing itself in a microservice you're talking about teams that would be equally incapable of solving the problem in a monolith. maybe. i'm not sure i agree. i do know rpc like apis are inherently more complicated than local apis. there are for more things that can go wrong e.g. the server is down... should we just drop this message... do we retry.... they are harder to debug and again there is the consistency issue. anyway there are lots of folks that still preach that monoliths are ok like dhhhttpsm.signalvnoise.comthemajesticmonolith. that being said i generally prefer more microservice approach. however how granular should you go is another question? like should every route be its own microservice? probably not. that is i think it is a continuum and there is some happy medium. for some that medium might just be one app.;0
ii587gu;Reddit;2022-07-29 18:20:58;but this just drives the actual hard parts of monolithic designs into the forefront. one repo to rule them all and in the darkness bind them. you have this massive code base that takes forever to compile youre constantly rebasing because everyone has to commit to this repo to do any work. when someone else fucks up youll deal with broken trunk builds constantly and this is statistically guaranteed to happen to a code base as you scale the number of engineers committing code to it. reactionary measures like moving away from cd into we deploy on tuesday so that we can determine if its broken by the weekend are so common its not funny. it takes that long to test because theres so much to test in one deployment you have no idea what can break in any one of them because theyre all in the same artifact. and because you dont have a hard network boundary theres basically zero ways to enforce an architecture design on any one piece of code other than be that angry guy that wont approve everyones prs. ive worked at places where i wrote post build scripts to detect that you werent fucking up the architecture and they fucking reflected into the types to do what i was looking for. i wrote a compiler plugin after that because i was so tired of people trying to do exactly the one thing i didnt want them to do and none of it would have been necessary if it was just a proper microservice with proper network boundaries in between code so that its literally not possible to reach into the abstractions between code modules. ok but we have five engineers all that sounds like a big company problem. how do you think every monolith took shape? it wasnt willed into being at a few million lines of code. it was started with five engineers and added onto over years and years until its an unwieldy beast thats impossible to deal with. try upgrading a common api shared by all modules. or even worse a language version. a company i worked for was still using java 5 in 2020 when i quit. they had tried and failed 3 times to break up their monolith. its literally impossible to boil the ocean in a monolith. take any microservice design and its easy you just do one service at a time. by the time you physically make the required code changes in a monolith 80 conflicting commits will have taken place and youll need to go rework it. the only way i could do a really simple logging upgrade was to lock the code base to read only for a week. i had to plan it for four months. nobody will be allowed to commit this week. no exceptions. plan accordingly. a complicated upgrade basically requires rewriting the code base. best of luck with that.;0
ii5vmy4;Reddit;2022-07-29 20:53:21;indeed that is how we do it for both our mono and microservices parts of our platform. this is largely because we use java. so there isn't an executable with all the deps like go lang. at one point we were shading the apps to a single jar so each app could not share dependencies but this was a waste in both build time and space.;0
ii4saea;Reddit;2022-07-29 16:38:26;so you don't test your microservices?;0
ii4w435;Reddit;2022-07-29 17:03:27;these checks are all automated though. thats part of zero downtime deploys whether is monolith or microservice.;0
iibiaam;Reddit;2022-07-31 01:52:02;microservices can degrade just as fast. this is a disciple issue not an architecture issue.;0
ii8j64u;Reddit;2022-07-30 10:37:43;but i often feel that people here who are proposing monolith solutions as the best option don't really have experience working on a complex platform with huge amounts of traffic. in a way that is what lies at the core of the issue. if you have a complex platform with huge amount of traffic then a microservices approach may make sense for you. but the kicker is that few of us are really in the position. as we say you are not netflix. most of us would be much better off with a single application which is doing crud to a database backend and not much more. most of us don't have multiple devs teams either. microservices have been pushed as a one size fits all solution or as being modern architecture and may places have paid the price for little gain.;0
ii4mur8;Reddit;2022-07-29 16:01:29;microservices was never just about imposing clean architectural design yeah i agree that's why above i listed several benefits to them that was just one of them. but instead about easing the resistance between teams by letting each team own and control its own infrastructure and resources rather than sharing resources across the whole backend. i also listed this but i disagree that this was even the primary benefit. when i mentioned conway's law this is pretty much what i was talking about. if we want to talk about what the primary benefit is in my opinion it's the business need. the driver for any significant complexity and overhead almost always has to be that you have to. and yeah you mention that here don't get into multilevel microservices until you absolutely have to. but what does that mean? does it mean it's because your teams are hindered in development because they keep stepping on each others toes? again i'll reiterate that that is not a great primary reason because you can definitely step on each others toes or hold up development for each other indefinitely by having strict team separation on loosely coupled services. trying to build two solutions at once or build a service that depends on a service that doesn't exist yet is a recipe for integration disaster and will frequently take longer than if you just built one service. unfortunately building a service with the intent that it will serve a future other service without doing so in conjunction with the team building the other service or end product is a recipe for an integration disaster as well. so many times i've seen services developed in a vacuum with the long term goal of being useful to multiple other teams that end up serving none of their needs. integration is inherently a socialcommunity endeavour that requires codevelopment and iteration.;0
ii4pq25;Reddit;2022-07-29 16:21:14;so microservices are for a rare complex design problem that i have not encountered not sure if it's so unusual. lots of services on the internet have to handle substantial traffic for example. others want to ensure relatively low latency and thus want to have application available from datacenters in different geographical locations. also from your description of the development process i'm under the impression you're working alone? it's a bit different when product is being developed by dozens of people and you want to have some clear separation so people are not stepping on each other's toes. if i did encounter it the specifics of the problem would be near impossible to force into a design pattern depends what patterns you have in mind. we're talking about system architecture not implementation details. there are patterns for that but it's closer to enterprise integration patterns than it is to those lowlevel gof design patterns.;0
ii7606j;Reddit;2022-07-30 02:24:47;there were two solutions i mentioned. the delay or check if you can see the service at startup. ideologically you shouldnt be adding an arbitrary delay. you should instead have a proper fix. i.e. the server waits for a service to be available before starting. for example if the second solution was added later then people would forget to remove the delay. since its totally separate. incidentally you couldnt write a comment next to the delay in the config to explain why its there. as ideologically some there believed all code should be self documenting. no comments. no exceptions. so solving it properly is the better approach. however they were against that too. as microservices should be independent. i.e. if they are reliant on a service and it goes down it should still run in some form and gracefully work around a down service. to be fair there is a death spiral issue with tying it to a service at startup. however this can also be worked around. quite easily. both of those positions were ideologically correct. its also just flat dumb to leave a bug in production. when you can fix it in 10 minutes. with a one line change to a config delay startup by an extra 30 seconds. we spent much more time debating the issue than just fixing it. ideology has its place for where we should be aiming for. clean code. small simple projects. clean independent architectures. modularity. dry. modern tooling. yada yada. its only a problem when it takes over engineering and becomes the primary goal. which it had at this place and there were plenty more examples.;0
ii5t4ue;Reddit;2022-07-29 20:36:49;oh sure and stuff like mockito makes the testing super easy. but that's not a microservice thing so much as it is a component based architecture where you can essentially write a contract for each component and then rely on known behavior;0
ii5elvl;Reddit;2022-07-29 19:01:46;maybe i'm wrong but i consider sync vs async mainly the idea that you are not blocking or in an invalid state while you wait for a response. but in a proper microservice architecture we shouldn't wait for a response at all. the message concept conveys that well whether they represent events or commands or whether they are handled immediately or not irrelevant to the sender. i don't disagree with you. i think it's mostly the meaning of asynchronous at the architecture level feels ambiguous since in my mind it means waiting for a reply like email being an asynchronous form of communication.;0
ii68w4i;Reddit;2022-07-29 22:22:15;i have literally deployed thousands of times the same monolith for a certain part of the infrastructure where it was safe to do so. it isn't the best idea and requires tooling or oversight but it possible. this is an unholy worstofallworlds scenario. kill it with fire. i am very familiar with it. i had to do this at google turn a 120gb jar file into several different microservices by flipping different modules on or off. a single build and deploy took about 14 hours and the oncall engineer had to do this once a day for 2 weeks. is it possible? sure totally possible. holding your breath for 25 minutes straight is also possible and in my mind more appealing. that is not true from what i have been preached to about microservice. most microservices experts preach separate repositories for every service and thus most microservices are inherently very much eventual consistency since it is very difficult to span transactions across multiple instances and thus require other external type locking. aside from this appeal to the anonymous authority of some kind of religious experts even if that were the case it is totally irrelevant. what you have is an ownership problem. when you have data that requires strong consistency then this data needs to be fully owned by a single team that delivers a single source of truth to everyone else. in monoliths any conceptualization of ownership is inherently arbitrary and muddled. so most monolith engineers simply don't understand it and can't recognize when a system has correctly defined ownership or something completely insane.;0
ii5lu3i;Reddit;2022-07-29 19:48:32;i don't disagree with your sentiment that it is hard to fix a monolith once it is big but you don't necessarily need microservice boundaries particularly traditional http rest to make it work. you can use things like actors or really strong modularization tools languages. you have this massive code base that takes forever to compile youre constantly rebasing because everyone has to commit to this repo to do any work. when someone else fucks up youll deal with broken trunk builds constantly and this is statistically guaranteed to happen to a code base as you scale the number of engineers committing code to it. java compiles fast. really fucking fast especially the more modular your application is e.g. sub projects. for us the compiling isn't wasn't the problem. it is how long the app takes to startup. and because you dont have a hard network boundary theres basically zero ways to enforce an architecture design on any one piece of code other than be that angry guy that wont approve everyones prs. yeah i totally agree with this. i have had the exact plight you have had as well. however there are scenarios where this happens with microservice as well where some team changes their api constantly or just keeps reintroducing other apis etc. or goes from grpc back to rest then to graphql. you can somewhat mitigate this with api gateways but that adds more infrastructure. take any microservice design and its easy you just do one service at a time. by the time you physically make the required code changes in a monolith 80 conflicting commits will have taken place and youll need to go rework it. again they can force you to use grpc... speaking of dependencies have you seen how many grpc requires for say java? ditto for graphql. so it can be not easy. so i mostly agree with you but microservices does not necessarily safe guard you from shitty design and you should still write intra services code as modular as possibly. that is basically what software engineering is is figuring out where the boundaries and separation are and to try to do it as often as possibly to minimize coupling and increase cohesion.;0
iia0w7w;Reddit;2022-07-30 19:12:03;microservices don't solve database or ui backward compatibility either so it's not really an argument either way.;0
ii5l8wz;Reddit;2022-07-29 19:44:42;lack of failure isolation. a bad rollout is significantly more impactful. you absolutely need rolling deployments or the entire product goes down even with rolling deployments it's much higher risk. in a microservice system only the features relying on that service will go down with or without rolling deployments.;0
ii5wjys;Reddit;2022-07-29 20:59:30;don't get into multilevel microservices until you absolutely have to. by multilevel microservices i mean a dependency tree of services that has more than 2 levels you have multiple levels of inner connections within your architecture. if you're designing a microservices architecture like this you're probably overengineering things and you will create a lot more time sinks than you save. unfortunately building a service with the intent that it will serve a future other service without doing so in conjunction with the team building the other service or end product is a recipe for an integration disaster as well. that's why i said not to design your architecture like that. if your design calls for services that don't exist to talk to each other it's a terrible design because that integration will become a huge time sink. if you need to build multiple interdependent features to a deadline either build one first and start the other later or build them into the same service.;0
ii4sjz4;Reddit;2022-07-29 16:40:10;i'm sorry but this reads like if you do this one simple thing then merging is easy! well yes. except i've never seen anyone be able to keep all of their code operating similarly enough that merging was easy. to go back to the original question how could it ever be easier to split a service vs merging it? in every realworld situation i've been in during my career splitting was easier. because with nontrivial sized teams they don't hold the code consistent enough to make merging possible without mostly rewriting it. if you're a solo dev or a 5 man shop sure maybe you can manage the consistency required. but then why are you writing microservices to begin with?;0
ii72b9w;Reddit;2022-07-30 01:55:28;i disagree as seemingly does the greater software architecture ethos. supporting documentation in software engineering a monolithic application describes a singletiered software application in which the user interface and data access code are combined into a single program from a single platform. httpsen.wikipedia.orgwikimonolithicapplication the application handles requests http requests and messages by executing business logic accessing a database exchanging messages with other systems and returning a htmljsonxml response. httpsmicroservices.iopatternsmonolithic.html look at diagram here https see also relatively older discussion here httpsmartinfowler.comblikimonolithfirst.html;0
ii4oh1u;Reddit;2022-07-29 16:12:48;so independently deployed apis that serve one business use case are not microservices? at this point were just arguing terminology but the industry and i disagree with you.;0
iiwh6vc;Reddit;2022-08-04 13:15:21;the services live in different repositories plus i maintain a client library that allows multiple other services to speak to the main one which is open source not extremely businessspecific has very few dependencies and its own state. the set of services are somewhat related forming a hierarchy there are a few open source services with few dependencies at the bottom which provide data to businessspecific services above. as you climb the hierarchy the services are more idiosyncratic get arbitrarily complex and have more dependencies with other services. they contain arcane business logic such as email and notification templates and other logic that requires access to customer configuration from internal databases for example. the higherlevel services often go obsolete and get replaced by different services when the business decides that they'll do things in a different way in the future. the lowlevel services remain foundational since they are more generic and stable. this sort of separation avoids polluting stable foundational stuff with arbitrary often poorquality mercurial business logic. that sort of architecture is what i consider a microservices. it should probably be called hierarchical or interdependent services. it seems that the micro prefix to microservices give people an idea that this is going to be like exposing a basic simple tool like grep or sort as a service. the services are often beefy. those that are foundational have many endpoints to query their state in multiple ways. one of the services has an inprocess database that is almost a terabyte. these are micro in the sense that they own their own state and have a defined area of competence not that they are necessarily tiny in size.;0
ii86tqs;Reddit;2022-07-30 07:56:18;you remove dependence on a microservice in the event of it's death if you just have a 30s timeout on waiting for it... both solutions together.;0
ii746e2;Reddit;2022-07-30 02:10:16;okay that makes sense if microservices are independent of each otherbut i was under the impression that they're not independent but talk to and depend on each other and therefore any one of them breaking will bring down all other microservices that depend on it. i take it i'm somehow mistaken?;0
ii75mbr;Reddit;2022-07-30 02:21:43;this is an unholy worstofallworlds scenario. kill it with fire. i am very familiar with it. i had to do this at google turn a 120gb jar file into several different microservices by flipping different modules on or off. yes but that is basically the whole point of this article im not google and neither are several others. our legacy monolith is 15 years old. i dont have resources to kill the fire. also our monolith is a mere 200mb not 120gb i seriously hope you were exaggerating but dont deny it. i and others are the long tail. we are not google compiling with c. btw we also have a microservice part of our platform so i know both well. both have their problems. it is vastly fucking harder to train people on the new microservices model. it requires knowing lots of non domain specific knowledge like k8s docker various queues like kafka or rabbitmq etc oh and that is just a small tip of the fucking gigantic iceberg of stuff you need to know for proper microservices.;0
ii5mwe3;Reddit;2022-07-29 19:55:31;you can spin up microservices however you like. raw tcp. http. json. protobuf. custom rpc schemes. as long as it goes over a socket and theres absolutely no way to break the abstraction then it doesnt matter. and if your dependency is having an issue thats a quite separate concern from ok just stick it all into a monolith i am sure that will make everything better. you think people dont change apis in code? lol. and java has that startup issue as well. i worked in c so for me is compiling. nothing safeguards you from shitty design. microservices make it possible to enforce the design you intended.;0
iibiloq;Reddit;2022-07-31 01:54:35;you can run the checks for the parts of the code that were changed. or you need to run all the checks for the microservices because you don't know what bugs lie in the interdependencies.;0
ii8t2wj;Reddit;2022-07-30 12:54:47;big yikes. i can't imagine a team without all those checks taking on microservices;0
ii5g72w;Reddit;2022-07-29 19:12:07;the one thing you have to do is not use different programming languages. just like a monolith. so it's hardly an extra requirement. also yeah microservices have to be done right just like modular monoliths. fundamentally i think that 1. taking two decoupled systems and merging them is easy 2. taking a coupled system and splitting it is hard i don't see how that's controversial. i don't really understand the problem you're describing with merging. you're saying the code isn't consistent enough? what does that mean? like you are literally running into merge conflicts? can you elaborate on the issues other than two different programming languages you've faced? i've done this many times and i feel like it's common sense that merging is easier.;0
ii79pnq;Reddit;2022-07-30 02:53:58;ing a wikipedia article and martin fowler doesnt make it so. the meaning has changed the word hasnt. you dont suddenly get a microservice architecture just by moving the backend to an http call. i dont think ive ever spoken to another engineer that used monolith in such a narrow fashion nor have i ever hear of someone call a monolithic backend a microservice because it doesnt spit out ui. but i guess well have to agree to disagree on this one.;0
ii5o5gk;Reddit;2022-07-29 20:03:49;nothing safeguards you from shitty design. microservices make it possible to enforce the design you intended. that is my point is it really doesn't unless you have complete control over the team. believe me i have to integrate all the time with third party providers and it is a bitch. they make shitty api all the time. with compiling a single codebase you have lots of invariants going on like consistency easier to understand errors compilation errors if some ones does change api etc. and yeah you can use api generation from say open api aka swagger but talking about slow compilation... for some reason it is very slow. also there literally tons of other industries that make applications that are designed well without microservices for example video games unity os kernels micro kernels etc. like i said you can make barriers just like it without microservices. edit btw since we do have a microservice code base and monolithic code base the compiling is much slower than the monolithic especially given we have to do multiple repositories and tell github to go build downstream repositories that depend on stuff. then there is integration testing. it takes time to boot up a k8s cluster. so while our streamlined microservice apps individually boot up fast to load the whole cluster takes longer than our monolith sometimes.;0
ii5bim0;Reddit;2022-07-29 18:42:01;i mean thats just a monolith. theres a great deal of difference between those two. i dont even agree with your argument on its face. there are two layers of monoliths. code and artifact. because youre focused on code ill talk about that but artifact isnt any better. code has all the problems i talked about above. and yes physically being in the same repo means you are a monolith. no theres not an argument there. theres no way to manage that from a cicd perspective that doesnt entirely resemble yup thats a monolith because it is in fact a monolith lol. whats the git hash of your commit? oh right same repo crazy that. who knew. ok what happens when that shared tooling youre likely depending on needs to be upgraded? especially if its breaking. get fucked lol because its in the same repo you cant do it piecemeal. if i somehow check in broken code does that fuck over everyone committing code in another component? it sure does. hope you didnt need to submit that code today lol. those components are just directories. theres nothing fancy about them. people can abuse the shit out of code in other folders and they definitely will because thats how people are. if its not even in the same repository the behavior changes. its not just a yeah just import this its i need to actually validate that my dependency supports this behavior. i get that people wish that we lived in a world with responsible adults who could be trusted to do the right thing but engineers are still people at the end of the day and it only takes one to fuck it up for everyone else. a microservice poly repo design is impossible to fuck up like this.;0
ii4xeyy;Reddit;2022-07-29 17:11:57;i think you have a lot of misconceptions on what a monolith is.. generally speaking you break your application into libraries. downstream applications can import these libraries. if one library can't function without another you have a dependency no big deal. if you can't separate into a hierarchy then you have a mutual dependency meaning you have to refactor. you might only have one actual application but these librariesmodules are developed and tested independently. if you have one big ball of code then it means you designed it poorly. microservices don't prevent bad engineering from happening they just make the consequences more painful.;0
iibrel5;Reddit;2022-07-31 03:05:48;not the way i use microservices. rest style servers are trivially scalable. and internally each controller can act as it's own application. so there is no reason to use microservices with them. where i use microservices is with independent stateful services. the kind where you need to be able to shut down process a without affecting process b. i connect microservices with message queues or shared database tables. rarely do i use synchronous calls.;0
ii5d2g3;Reddit;2022-07-29 18:51:57;i appreciate your perspective but i've certainly seen people fuck up in polyrepos as well. straight up copypasting rather than using dependency mechanisms because that's extra work to produce an artifact that can be declared as a dependency or less bad but still bad directly embedding other repos as git submodules and creating monolithsineffect except now there's no visibility as to where the clients of your code are. there are some huge and competent shops that have even led the path on microservice architectures that use monorepos. if i had good data that one way really did lead to fewer problems than another way i'd be there but i really only see an abundance of anecdotes and no way to make a concrete decision other than mixing that through personal experience. both styles need to be actively managed by someone with an eye towards avoiding pitfalls and problems.;0
ii5pmcg;Reddit;2022-07-29 20:13:34;i mean just because i disagree doesn't mean you have to downvote. lol ive worked in gaming and kernels. it seems like you have done everything. i was under the impression that unity was well designed. sure the individual games might be like you said but the engines and libraries. and kernels create dudes like linus torvalds. unless you want that kind of stress exhaustion and constantly dealing with people trying to break your shit you stay away from monolithic code bases because the barrier is you. not all operating systems are linux. btw i never disagree with you that high barriers of separation are not a good thing. i just don't think it always needs microservices to do it. but you seem very dogmatic and perhaps deservedly so given your swagger i mean i am no neophyte either but i have never worked in the game industry.;0
ii5s8bp;Reddit;2022-07-29 20:30:48;poly repos are just better. like unequivocally. but you can have monoliths that use poly repos and dependency management our legacy one in fact does. and yeah i hate monorepo as well. im not dogmatic. i have a lot of personal painful experience with monoliths. i firmly believe theyre always the wrong choice for software you intend to keep around more than five minutes. and i do as well but it is the question of which part of the mono is the bad part and imo it is the data sharing that is bad. that is where you get into trouble. it is sort of the same problems with mutable oop and i have some of similar feelings you have w microservices with mutable oop. for example if our mono repository didn't use an orm never again will i use one and mutating data all over the place w transactions then it would be much much easier to micro it out. after all each public http request can be separated out so long as the data repository can be separated out. but we can't do that easily. so your right in some respects that it is almost best to start over but before you do that i start separating out the mono based on cohesive business routes and then monitor them to see what parts are low hanging fruit to pull out as a separate service. i have done the above like 5 times for various companies including my own. so it isn't impossible to convert mono to micro but yeah it sucks especially especially if mutable data is shared.;0
ii66ddl;Reddit;2022-07-29 22:05:11;yes but the problem i have already experienced and i'm curious on your insight is microservices can become practically monoliths themselves. developers get lazy and they just keep putting the shit in one service. that is because it is easy. so you are back again to managing the bad developers. i guess at what point do you consider it a monolith? to my very very original point is that it is about data sharing and consistency. i'm obviously not going to make just one table per service but where do you stop? because at the end of the day its fucking data that matters. if consistency is your goal microservices are much harder to go do that with and i think that is often how you end up with micros becoming more macro.;0
