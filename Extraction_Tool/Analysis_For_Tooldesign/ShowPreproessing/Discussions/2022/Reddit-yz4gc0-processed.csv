ID;Source;Creation Date;Content;Sentiment
yz4gc0;Reddit;2022-11-19;Title:Microservices: it's because of the way our backend works, Content: https://www.youtube.com/watch?v=y8OnoxKotPQ;0

iwy93bs;Reddit;2022-11-19 08:13:29;i must be getting old because i still haven't figured out why i should be creating microservices even in a large environment full of millions of lines of code. divide by honesttogod servers with perhaps some neato strict api layers inside them to keep things modular. i write servers used by millions of people and microservices are nonexistent in our architecture and i've never once wished we had even one. that said i'm officially old by software engineering standards which i guess means anyone over thirty and i'm willing to be proven wrong by someone with a badass use case that really makes microservices shine. also that's my favorite programmingrelated video of all time. krazam is stier edit thanks everyone for genuinely interestinghelpful responses! jury's still out for me but part of good engineering is entertaining many different possible solutions.;0
iwz3ik1;Reddit;2022-11-19 14:56:20;context i'm a senior software engineer with both monoliths and microservices experience. oh boy some comments here are so wrong that they manged to get me out of lurking httpsxkcd.com386httpsxkcd.com386 both microservices and monoliths are a design choice. if you don't know why to choose a monolith vs a microservice then you shouldn't make that choice . microservices were born not because of somebody deciding they needed more complexity but because of the pattern that emerged with monoliths. as we all know our software cannot scale forever vertically featurewise which means that if you're going to grow you're going to need to confine some features to a specialized group of servers fleet. next step was hey i know i'm going to need to scale this beyond 1 server per featureset let's design this as a separate service. congratulations you have your first microservice. i've seen folks here argue about monoliths with some features enabled per deploy i hate to bring that to you but those are effectively microservices. next you're going to complain that you need to deploy too often when other components change monoliths are fine when the scale is small to mediumsize. but don't expect to grow to twitter scale with that architecture. microservices are useful for small scale only when you want to use a separate technology for something. tldr monoliths are fine. microservices are fine. choose wisely when to use them.;0
iwy42i9;Reddit;2022-11-19 07:08:51;i wonder how much these convoluted microservice architectures are a consequence of the easy capital environment of the last 10 years. my observation is that finegrained service architectures favor grow at any cost business models with high capex headcounts and turnover. huge vc backed firms set the trends and smaller businesses followed. a tighter capital environment should change the economics of development to prefer higher efficiency over lower coupling.;0
iwynuwk;Reddit;2022-11-19 11:50:13;only one question is needed when people try to tell you about their microservice architecture what happen when one of those services dies? also gotta love when most of those services depend on the same database server.;0
iwz38m0;Reddit;2022-11-19 14:53:47;this is so great im on the camp of microservices ok if you need it. otherwise its too complex. monoliths work fine. and you can still split monoliths on concerns if they arnt overly complex in coms relianing on a microservice to execute say a payment in a real time fincial transaction system shouldnt need to talk to 3 things. a monolith can scale this sql server becomes your first bottleneck mongo db really helped us with this. its a change in mindset in how you store data joins are a no no but you can modify the doc so that it has enough information of what the join would have contained. extra space is the downside the upside is no locking across tables to pull data from various tables;0
iwyqlhp;Reddit;2022-11-19 12:29:32;its as good as this javascript one httpsm.youtube.comwatch?vuo3cl4nrgok it would be awesome if that guy did one on microservices.;0
ix0v1eu;Reddit;2022-11-19 22:46:01;oh by the way there shouldn't be any microservice named galactus because it's an antipatternhttpsen.wikipedia.orgwikigodobject;0
iwyeisr;Reddit;2022-11-19 09:30:33;i think they had a microservice for 2factor auth? seems too micro to me.;0
iwymr80;Reddit;2022-11-19 11:33:38;having worked on bad monoliths good monoliths fat services and microservices my considered opinion is that the main reason is conway's law the organisation creates systems which reflect the structure of the organisation. i.e. how do you get 100 developers split into 20 development teams to work together on the same system? answer you split it into 20 services. the secondary reason is specific to tech megacorps when you're netflix very specific parts of your architecture need to be scaled at different times to meet different loads e.g. it's 6pm in us east so 50m people are logging in to look for something to watch better scale your login services in us east. doing that with a monolith is doable but wasteful as you need to deploy the whole thing multiple times. and wasteful at netflix scale doesn't mean an extra 20 p.a. on hosting oversized instances it means an extra 20m or even an extra 200m. if you aren't working at manga and you don't have many teams working on many systems you have no business doing microservices. i know of one startup i worked with recently who ultimately went bust and one of the contributing factors was they reached straight for microservices when they had a tiny engineering team. they couldn't cope with the additional complexity of the architecture and couldn't resolve the problems they faced.;0
iwyg6gw;Reddit;2022-11-19 09:54:40;we have several pretty clear boundaries in our systems. in the old days of shipping the code for the customer to run themselves on dedicated hardware we had three main teams all handing their own monolith that did a specific part of it. integration to third parties processing and user interaction. now those teams are split into subconcerns each creating 13 microservices to deal with their concerns. it makes sense in our case. and my favourite part of a microservice architecture is probably the upgrade process. we have no downtime for upgrades and can push updates to a single seevice by just scaling up the instance count of the old version and adding in a single node with the new version. then we observe the new version for a while to ensure it works well with maybe a tenth of the traffic. if everything is green add in more nodes of the new version and start to tear down the old one.;0
iwym9lo;Reddit;2022-11-19 11:26:04;i have been developing probably as long as you and have built software that also handled millions of users going back as far in the day as when perl and cgi were a thing. i still maintain older environments but also new ones and i think one of the big advantages of microservices is that you can take advantage of priceperformance improvements more granularly. one example i can think of is with s3. file storage costs in the cloud have dropped so dramatically over the years and one environment had things like user uploading of images and media in it's own service. we were able to lift that to the cloud and save a bunch of money and increase performance with less risk. in the monolith approach you have to really work hard to make sure you don't break other things. it makes it less likely it's cost or risk effective to do the analysis and testing required to make certain changes. but if the environment had been designed from the beginning that media uploading was it's own service you know nothing in your core is going to break if it's changed as long as the api remains the same. you can also more easily do things like rolling out an updated service to 5 of your userbase with extra monitoring and benchmarking because you only are slowing down 5 of one service versus adding bloat into one application.;0
iwyly6y;Reddit;2022-11-19 11:21:25;the goto conferences youtube channel has recently released a 3video series on microservices and distributed systems when they are useful when they are not by martin fowler that pretty much answers all these questions;0
iwyk552;Reddit;2022-11-19 10:54:06;absolutely right encapsulation is the thing. break an api contract and you'll cause problems in a monolithic architecture or working with microservices. ü§∑‚Äç‚ôÄÔ∏è i'd say there's some benefit to scaling some components independently but sort of splitting hairs. anyway ... love this video. perennial classic;0
iwyavng;Reddit;2022-11-19 08:38:24;mostly better for resiliency and fault isolation scalability more granular observability and easierfaster issue detection. being able to do things like isolateseparate specific functions or even duplicate microservices pools for different clients so that revenue impactingcustomer facing client pool a isnt mixed with calls from super high traffic but lesser importance batch pool b. in a nut shell you arent hitting 4 9s availability with monoliths in any kind of large scale application.;0
iwyqtd2;Reddit;2022-11-19 12:32:33;microservices are not an engineering problem it's a business problem. well thought out business architecture is a great template for microservice architecture. just because consultants push for it and businesses with monolithic business architecture try to force a block through a circular hole doesn't mean microservices are bad. and sometimes the criticism towards microservices is because people are forced to use them when they should not. and don't use microservice patterns if you feel uncomfortable. but if you can and business enables it then microservice architecture really is great and i'd not build business flow automation any other way.;0
iwytvn5;Reddit;2022-11-19 13:13:06;as many things in software development the theory behind microservices is architecturally sound but the way many people understand and implement it is fundamentally flawed. no microservices does not mean adding as much network latency as possible. it does not mean having as much deployables as possible. it's just old fashioned incapsulation repackaged. and yes sometimes it's good to run in a different process or have a different release cycle. but that is not what microservices is about. this kind of shit is just overengineering in general. it's offering solutions without thinking what the problem is or if there's even a problem.;0
iwz4twu;Reddit;2022-11-19 15:08:29;old? jeez im nearly 40 i guess i share alot of your skeptisims of microservices. if a monolith does the job do it kiss all the way. only do microservices if its needed and it needs to be a good one.;0
iwz7xmu;Reddit;2022-11-19 15:35:35;iteration speed. the bigger the system the less likely it is you can deploy new features every day or even every week you need to integrate the changes build the release run the whole suite of tests and then find a service window to deploy. none of these challenges are insurmountable in a monolith. but some of the challenges can't be solved by the engineers alone in a monolith you can't deploy the changes to the credit scoring model without manual uat because you fucked up the rollout last year and the cio agreed to uat for these features the dude who is authorized to sign off the uat is on vacation your other critical feature in this release is based on the new credit scoring model code you can't just backport it breaking the system into microservices introduces a lot of technical complexity but removes organizational complexity. how do i reconcile or prioritize features from multiple owners? your backlog has a single owner how do i avoid manual uat? make rollouts and rollbacks quick and painless how do i avoid breaking other people's code? api. if you make a breaking change you have to support the old api version for n months;0
iwzodta;Reddit;2022-11-19 17:41:40;microservices are really just repeating standard good practices at the infrastructure level. the same reason you don't want a god class you don't want a monolith. i think a lot of people who have or haven't worked with microservices simply haven't had to own them for any significant length of time. to realize the benefits one had to experience how software evolves over time.;0
iwztup6;Reddit;2022-11-19 18:21:04;others have already chimed in but for us we've enjoyed them the past few years for separation of concerns independent deployments and smaller chunks of code that are easier to manage and less likely to have to deal with merge conflicts. the biggest is just the deployments. being able to deploy one service without taking down the whole app has been very helpful to making our teams not collide and qa not to be blocked because another team had a critical fix to deploy. that said i would say our microservices are less micro and more just services we only have about 15 of them for our platform to run. i don't know exactly how micro they need to be but for us we've found a pretty good balance of the benefits above against the additional work to maintain several separate services.;0
iwzqu3g;Reddit;2022-11-19 17:59:20;a benefit i havent seen mentioned is that micro service architectures moves a lot of the boilerplate code to pipe operations together out to the cloud providerinfrastructure. this allows much faster dev time on new features with far less resources. the monolith way you have to spend months of new dev time wading through the whole pile of shit that is the monolith most of which is pointless boilerplate that connects stuff together in special ad hoc sort of ways i might add in comparison in a microservice architecture new feature can be as small as one dev just standing up a single lambdaazure function and then it gets plumbed into the application using well known ifrastucture as code tools marshaling standard connectivity that is maintained by the cloud provider. micro services tend to have far less useless boiler plate. that said obviously it trades much of the complexity that used to be hidden in the boilerplate for marshaling complexity. i think its a winning trade though as the real bottlenecks in development is actually the code that does the work. if you can build code that does work you can always figure out a way to glue it all together after the fact;0
iwy9922;Reddit;2022-11-19 08:15:41;exactly don't use microservices. i use monoliths all day every day. if i want to change something i'm gonna just...change it not go through eight rounds of bullshit like in the video.;0
ix0l2k1;Reddit;2022-11-19 21:33:56;the microservice idea is great if you have a self contained query. a box that takes in y and spits out x based on a formula. if it's simple enough that box can use a cache to be faster and support multiple servers while just being itself. it can also be switched out on its own if the formula changes. how about having 100 game servers that pummel the database? instead have a microservice that connects to the db and pulls the users table for everyone. the problem is how people do them microservices needs microservices and the formulas for most of this stuff has been made to simplistic that there's no reason for them. also microservice are a good idea for laege distributed cloud machines but very few people work on scale that big. if you have a single server or a single location you can probably ignore that efficiency and just make a server that works.;0
ix06ley;Reddit;2022-11-19 19:50:52;in my experience microservices are harder to develop and maintain than just adding onto a monolith. there are times when i do think a microservice makes sense but my experience has taught me microservices should not be the default and should only be used if there is really good reason for a new one. i start with monolith as the default and will entertain microservices if the value outweighs the additional costs.;0
ix03zzc;Reddit;2022-11-19 19:32:24;it's not just about scale either btw the design will have a bearing on the speedlatency of the system. it's going to be faster to call procedures inside the same monolith than a separate microservice.;0
iwz03v9;Reddit;2022-11-19 14:23:11;typically you'd want each microservice to have it's own database.;0
iwzfb0h;Reddit;2022-11-19 16:34:26;the thing is it makes sense at amazon because they wanted these services to be useful to other external people and thus microservices are a revenue stream. 99 of everyone else who copied what aws does are doing cargo cult programming. if aws did it it must be good it doesn't matter why we need to copy aws goddammit! microservices are almost always the wrong answer to a monolithic service.;0
iwzg3tu;Reddit;2022-11-19 16:40:27;it's like the perfect thing to be a microservice.;0
iwz7f8x;Reddit;2022-11-19 15:31:14;you think each individual microservice should define a separate way for users to do 2fa?;0
iwzkjxu;Reddit;2022-11-19 17:13:21;i would not be surprised to find a microservice for the echo protocol. ... and i am not surprised. java gradle helm. httpsgithub.comdemo4echoechobe it's the isodd from npm writ silly.;0
iwz647v;Reddit;2022-11-19 15:19:58;i worked on a monolith for 6 years. now i work at a massive not manga tho tech company doing microservices. one of my interview questions was if i could would i make my old codebase microservice based? i gave a definitive no. i guess they agreed with my reasoning because they still hired me haha.;0
ix1myda;Reddit;2022-11-20 02:24:21;ah gotcha. yeah we break things down into manageable teams and the software architecture definitely reflects that. maybe it's all microservices standing on each other's shoulders in a trenchcoat thanks for taking the time to respond in depth.;0
iwyuivl;Reddit;2022-11-19 13:21:14;this is it exactly. we had a monolith and one team. great. add another team. still works ok. another team? all hell breaks loose. the communication and synchronization requirements between teams seems like it's an exponential growth kind of thing. we're at six teams now so not huge by any stretch but not enough to constantly step on toes of we're in a monolith. compare that with microservices and each team owns their own codebase. the codebases are smaller not to mention each codebase is split as much as possible along conceptual domain lines so if we are onboarding someone we can share our focus much easier. the microservice we work on does x instead of insert all the things our company does. that all said don't start with microservices unless you're starting with a large team welldefined separable domains and lots of money.;0
iwznxno;Reddit;2022-11-19 17:38:29;yeah that's definitely never been why microservices are a thing. it's just a byproduct.;0
ix5ml91;Reddit;2022-11-20 23:48:11;monolith that needs to send emails batch service that needs to send emails x200b create an email service that scales separately to the monolith.. boom you have a microservice nothing to do with teams;0
iwyeydv;Reddit;2022-11-19 09:36:48;yes but we can already do that with say different dlls or the facade pattern or principled inexecutable apis or just modular design that everyone follows. even if we split things into say multiple git repos we can still have carefullyorchestrated tight coupling where needed for say shared utility libraries inlined code or ultralow latency api calls. i guess it comes down to what people call a microservice to me simply having an internal api and completely separated code i.e. the client of an api and the api provider do not share any code doesn't make for a microservice but i suppose according to some people that could still be considered one. that said maybe there's something i've never hit. i'm used to big old software developed by dozens of people and never once felt it needed to be decomposed because everyone respected the modularity that was present and was cooperative where there were conflicts.;0
iwz0k9o;Reddit;2022-11-19 14:27:49;over 50 checking in. learning microservice development after many years of sql development.;0
ix1o38v;Reddit;2022-11-20 02:33:35;interesting take. i'm still upset about the problems of distributed debuggingtry debugging uncommented fortran 77 code on a hundred different windows 2000 machinesbut maybe if there are enough tests it's fine. i had a huge problem with something that is probably technically a microservice at work despite having like internal apis with more functions than win32 and it was about impossible to debug because http2 adds so much stuff. turns out major rust libraries aren't as great as they claim but if we had a single codebase in a single language that didn't require wireshark to debug we'd have found the problem instantly. but yeah makes sense in certain business contexts though maybe i'm overthinking it and it's just decompose your servers when it makes sense and keep the external apis simple which is what i tend to do even in monolithic applications because nothing else scales to hundreds of thousands of lines of code.;0
ix1mrir;Reddit;2022-11-20 02:22:48;yeah i use open service mesh at my current job. it's a doubleedged sword as i don't have to deal with https directly thank god! and all the keys etc with it. or service discovery etc. however it adds complexity and we're theoretically a lowlatency service people care about 3050 ms latency increases for whatever reason and osm means we can't use fancy things like grpc over quic don't ask why we're using grpc every time i've tried to turn to something that fits our communications pattern i was shut down by management because that is how we do things. i'm suspicious of this sort of complicated stuff getting in the way of a performant server but if performance isn't the gating factor for the product or the deployment scenarios aren't known during dev time or understood by the devs or changing configuration after the fact or for different scenarios is important then i can see this. likewise i enjoy amazon lambda and azure functions for things that really should be their own function because they are so cheap and easily contained! i don't do business logic or whatever everything i work on is a giant mess of huge data structures and fancy math so i rarely have to deal with a problem that's so seperable. that said my biggest problem is that with a monolith i don't have to set up a fancy test environment with kubernetes doing weird stuff i don't know about in the background. i know what the behavior is going to be moreorless because it's baked into my codebase not some cool fancy cloud thing. but maybe like you said cool fancy cloud thing will let the people using what i write do more cool fancy stuff that delights our customers? also the more i talk to y'all who are knowledgeable about this the more i'm convinced that what i work on is moreorless a microservice despite being internally very complicated. it's a thin highlyconcurrent interface to an ml model that adapts a simple network protocol to the needs of the model and handles workload generation multiplexing and demultiplexing etc. from the outside the only two operations are here's some data to shove in the model and ping but the interface for the former isn't exactly tiny even if it is single purpose. and we need to run on fancy expensive gpu servers and will peg the gpu at max usage and nearly max memoryit's something like a third of a million dollars per year to run a single instance of our software because these models are so computationally expensive. so it feels weird to call it a microservice but maybe that's exactly what it is. thanks for shedding some light on this! you deserve more upvotes!;0
iwybjyp;Reddit;2022-11-19 08:48:10;in my experience it's not so much about scaling on the user side as it is about scaling on the development side. working on a monolithic code base starts to become pretty unmanageable with hundreds or thousands of developers and nightmarish when you get to the kind of developer workforce that places like google and facebook have. one developer can easily fuck up an entire workday or even work week for thousands of others and while technically that might be possible to avoid if everyone always knew exactly who it was and exactly what they did that kind of omniscient knowledge transfer and communication in an organization is itself an incredibly difficult task. and the challenge of keeping everyone up to date on changes and documentation is likewise nearly impossible. microservices is one way of partitioning away a lot of that risk and allowing developers of less critical systems to have less responsibility and lowering some of the change control burden. it still requires proper management and architecture though and it's easy to fuck that part up and then heap all the blame on microservices. like most things in software development it's not a panacea or a silver bullet it's just a tool that you can try to use when there's a need.;0
iwy9xrb;Reddit;2022-11-19 08:25:05;i'm not against microservices as a valuable tool in someone's toolbox. i just... can't imagine taking it out of the box. who has the kind of problem that needs that tool? can someone please please explain to a highperformance backend maniac what we need metric buttloads of rpcs or expensive network transactions to accomplish that we can't do with a smaller number of carefully decomposed monolithic servers? say something on the order of 520 contributors each or the like?;0
iwynmt3;Reddit;2022-11-19 11:46:50;right! people forget all these are just tools! you use them if appropriate. people often get infatuated with the latest and greatest or become paradigm zealots we have now these reactive functional microservices nosql this language that language library 1 library 101 etc. and everyone forgets the bottom line just do what you need no more no less don't complicate your life. there are no silverbullets only tradeoffs. i hate my job because of colleagues that don't realize this and try to pull everyone else into their newandshiny bs wearing everyone down.;0
iwyficq;Reddit;2022-11-19 09:44:52;the team i worked on for 8 years was disciplined and no one added so much as a single module without oversight. it was a huge project and started in the midnineties but it's still kicking around today and is used by tens of millions of people. adding new features wasn't fun but the internal modularity was never the issue. this software has over a thousand integration tests based on developer input researcher input and realworld deployment scenarios as well as a ton of diagnostic code only run on internal builds. if we didn't have all of that it'd probably be a giant mess but we do and while it's slow to adapt it works well and the releases have very few bugs reported from dowstream customers for something in such an unsafe language c with most of a million lines of code. it's possible that this is an aberration and perhaps i shouldn't generalize my experience. we work in a very mathintensive field that's focused around data structures math and ai etc it might be an ineffective strategy for something that's mostly business logic as with your example above. i don't have much experience with business logic as it's not really my thing so maybe i'm missing out on how microservices help there.;0
ix13myk;Reddit;2022-11-19 23:51:14;the limit as the commenter above pointed out is more in feature growth scaling constraints than traffic growth. if your tech stack only does a few specific things you can scale a monolith damn near indefinitely to serve as much traffic as you want. where it gets complicated is if your company starts adding new divisions that do something completely different with completely different traffic patterns and resource constraints. at a certain point too many different competing concerns and use cases will introduce scaling constraints not on the service itself but on the effectiveness of how your teams can develop in it. if you've got 20 disparate divisions all trying to run in the same monolith and they have varying requirements on scaling and resource utilization you're probably going to start deploying separate instances of your monolith for the different divisions to prevent resource contention between their usage. you'll need to design your infra to either deploy those monoliths with different features enabled or disabled or figure out ways to make the code behave properly for each divisions needs. now you're paying the overhead for longer build times more complex deployment and more development friction on a codebase while your deployed instances all have a bunch of apis that aren't in use because that particular shard is for division y that doesn't need z api like division x does. well then why not just split out the code for division x and y into separate codebases and deploy those services separately to simplify your process? and now you've arrived at microservices. that's really the thing when people talk about scale with micro services. it's not about scale of traffic. it's about scale of the company's organization.;0
iwz9hfg;Reddit;2022-11-19 15:48:32;if two microservices share a database they should probably be one microservice. split microservices by bounded context problem domain if you have one db you chose the wrong system boundary.;0
iwz9qqn;Reddit;2022-11-19 15:50:41;microservices can be tied to their own database perhaps for managing internallocal state but it seems impractical for each microservice to replicate large datasets with billions of rows?;0
iwzpr92;Reddit;2022-11-19 17:51:33;borderline impossible to design an architecture that can segregate data like that. all the microservices need to share some data which means duplication or some other coupling nonsense. which is really why its super hard to design something like that. a situation where a microservice can be completely isolated is extremely rare;0
iwyzhd6;Reddit;2022-11-19 14:16:48;i've heard from other companies like ericsson they they actually have a microservice naming board lol;0
ix00ngs;Reddit;2022-11-19 19:09:04;it mostly depends on your company size and whether your products are interconnected. microservices weren't really convenient possible without the advent of containers and virtualization. both types of ecosystems are evolving right now. 10 years ago it was mostly microservices as startups are smaller companies and larger companies were mostly stuck in legacy technologies. the larger companies have been changing that for the past 10 years. now we are seeing the results of that effort from big companies.;0
ix0zhep;Reddit;2022-11-19 23:19:26;has this event spawned chats at everyone else's work about monolith vs microservices? it's actually created some important discussions with mine.;0
iwz9wj0;Reddit;2022-11-19 15:51:59;one question i always ask when im interviewing people is what they think of microservices. experienced people can and will mention both upsides and downsides sometimes extremely specific downsides and junior people will just say something like its nice and there are no downsides. oh my sweet summer child.;0
ix0su09;Reddit;2022-11-19 22:29:49;i have worked with a monolith with hundred of developers and the development process worked relatively well. the real issues where caused by supporting numerous version in parallel and merging together later. we had architects that where responsible for both the logical architecture and the functionalities of various parts of the monolith. their responsibilities where split by functional domains. later the company was bought and the new owner wanted to us to work their way with a lot of independents teams and to split the software into smaller units i would not call them microservices. the architects responsibilities where changed and the lost the role of overlord above the software. the quality slowly decreased overtime there was conflict bugs part of the applications that conflicted between themselves. this was caused by the team not communicating between them and not being aware of what the others were doing. sometime part of a functionality were even forgotten because the teams a thought that it was done by team b and team b by team a and there was no one to have a high level view. i'm not really sure that microservices solve anything by themselves. to be successful with a complex software the communication and company culture is a lot more important than the architectures or the developments processes.;0
iwz78pf;Reddit;2022-11-19 15:29:40;glad it works for you guys seriously. if you can find work life balance with that setup its great. no approach is best in all situations. with thousands of developers monoliths became an issue for us a long time ago and we started splitting into a really early version of microservices about 1819 years ago just generally splitting up the unified builds into different groups based on functionality. team a causing a memory leak that brought down services for team b was an all too common problem and people got sick of it. build cycles and site deployments were every two weeks now we have teams rolling out daily or as often as they need. restarting servers daily or every couple days was the norm to keep things healthy. i wouldnt go back. depends on how youre measuring availability too i guess and what management wants to include in the measurement haha.;0
iwynjzk;Reddit;2022-11-19 11:45:43;aren't you just describing microservices that have a bunch of superfluous code deployed on them?;0
iwyxd8o;Reddit;2022-11-19 13:54:07;this is a fantastic answer thank you so much! too bad literally nothing he said is true d he's just repeating talking points from evangelists. some of the points he made are absolutely backwards. microservices are absolutely terrible for issue detection and debugging. it's a nightmare.;0
iwyg3dl;Reddit;2022-11-19 09:53:23;i can easily believe that. easier debugging? imagine debugging 20 microservices talking to each other. mother of god.;0
ix2uti2;Reddit;2022-11-20 10:00:10;the benefit of microservices are a plenty including scaling a single service as opposed to the whole stack. it also allows a better understanding what is happening with the big picture if done well. to understand the monolith you have to understand the code and frameworks. to understand distributed microservice architecture you have to understand the flow of data. if complexity becomes too big bpms such as camunda and flowable are an option for the bigbig picture. which was sort of the lesson learned by netflix guys after doing microservices.;0
ix0cjyb;Reddit;2022-11-19 20:33:20;yes however most companies are not hundreds or thousands of developers and even then companies still use monoliths google famously has a 2 billion line monolith same with microsoft and any companies that use rails like github. microservices can be useful however they're overkill for most use cases not at that scale. a startup should not be using microservices they're just cargo culting at that point.;0
iwya3wv;Reddit;2022-11-19 08:27:31;that said maybe i'm making a microservice and don't even know it? we have four contributors and our server does exactly one thing. it's a rather complex and messy thing but it's just one. and it's not huge. maybe the real microservice is the code we made along the way?;0
ix04t41;Reddit;2022-11-19 19:38:09;1000 this. the irony of this entire comment chain is some poor dev who is learning programming js gonna waste unseen amounts of time trying to maintain and deploy a microservice architecture for their next fun project. i honestly feel like only the largest most complex and highly staffed saas projects should opt for microservices. the real problem is every tech ceo wants this crap for all the wrong reasons.;0
iwz6qcm;Reddit;2022-11-19 15:25:14;there's also extra benefits for teams looking for flexibility. for example where i work we have 3 languages that we use in the backend. we use rails for anywhere where we're serving html pages out of the backend for our lean n mean apis which are hit by the web frontend we grab elixir as it's incredibly fast. where we're doing heavy data transformations and running finance reports we grab scala as that's what our data guys know how to use. i've found microservices to be incredibly useful for situations where your team wants to be experimenting with new languages or frameworks because you can take an existing piece rewrite it in the new language and then get real world performance data from it running in your stack. that's basically why we went microservices we started with a rails monolith and found ruby to be slow in places so we ripped those places out rewrote them in elixirscala and got orders of magnitude more performance without needing the overhead of rebuilding the whole platform in a new language.;0
iwygsur;Reddit;2022-11-19 10:03:57;the team i worked on for 8 years was disciplined and no one added so much as a single module without oversight i think you just answered your own question. not all teams can be like that. even if three quarters of all software developers were disciplined and careful about what they write you'd still have teams that just don't have enough of that. microservices allow you to be resilient in the face of less disciplined workforces.;0
iwyhec6;Reddit;2022-11-19 10:12:46;i think you put forward a great point that you have to have a disciple of modularity in your code if you start with monolithic. but its difficult to do that when you have plethora of developers working on same code and management wants asap deliveries. huge integration test and even unit test to let developer know that they might be breaking some contract of code is something which i have seen very less in projects. the world wants fast delivery and less error prone and thats where microservices plays the role. plus i am yet to decide if its easier to maintain or difficult but microservices has benefits in terms of scaling and maintaining at development side. you know the conways law that your code is reflection of your org migrating to microservice is reverse conway that way of code is organising the corporates in separated of concerns and clear boundaries. i respect you that you were able to manage that application without much worries but i will rant here that because of code monkeys and lot of junior devs around it become difficult. even in microservices world having that disciple is difficult.;0
iwyflo6;Reddit;2022-11-19 09:46:10;what counts as actual scale in your opinion? i generally work on projects used by tens or hundreds of millions of users at a large software company without anything i'd call a microservice. it's entirely possible that i'm wrong about what constitutes a microservice in this context however.;0
ix1p7xv;Reddit;2022-11-20 02:42:35;at that point i don't think you're talking about microservices anymore. they're just services or even separate applications.;0
iwz4k59;Reddit;2022-11-19 15:06:02;rpc call architecture isnt new microservices is just the latest iteration. you could do this with com components. microservices are worse because of the tcp method of rpc coms be it sync api or async queue. not to say that rpc pattern downesnt have downfalls. it does. microservices just adds way more;0
ix182e0;Reddit;2022-11-20 00:25:23;hmm ok i'm not saying i disagree but out of curiosity how then do you handle user lookup? like say you have a search service a display service and a recommended product service but all need to get user information maybe about the user itself or maybe about users across org? i can see there being a few instances of shared databases across microservices.;0
iwzeol1;Reddit;2022-11-19 16:29:39;obviously speaking in the abstract here but it seems like generally you'd want a service in charge of owning those large data sets and things that need to take action on them should go through that service. using microservices is about segregation of responsibility and communication through contracts partially because at a certain scale the overhead this adds is dwarfed by the savings you get by being able to pinpoint the malfunctioning service and call on its experts to help and having different microservices use the same databases and tables is generally antithetical of that. it's like if you had multiple procedures sharing the same area of ram or multiple threads readingmodifying the same instances of objects at once there are ways to do it properly but it's costly to do it without introducing problems so you try to avoid it if you can. it's generally antithetical in that when people talk about sharing database objects it seems to be done out of convenience rather than design hey we both kinda care about this same data let's share this table and ignore the risk that our needs will grow in contradictory ways!. if for some reason you need to do communication between services and decide that a shared table is the best way and you treat that table specifically as a welldefined data contract between the parts i don't think that would be against the spirit of microservices.;0
ix06ri8;Reddit;2022-11-19 19:52:03;you'd use some message broker like rabbitmq to facilitate comms between services that rely on data from each other. and yes it's very difficult to design and maintain which is why 99 of the time you don't actually need microservices.;0
ix0m9eb;Reddit;2022-11-19 21:42:22;that isn't a problem with microservices though. that's a problem with failing to be able to test changes like that before pushing them out. for example places that don't codify their infrastructure settings and don't deploy it to a staging environment first to ensure it works.;0
ix140ve;Reddit;2022-11-19 23:54:10;no instead your entire tech stack goes down when you misconfigure the firewall and your monolith stops serving traffic entirely. your example is pointless. neither architecture is resilient to a networking misconfiguration. arguably microservices are more resilient since the blast radius of a misconfigured network config is some specific aspect of the tech stack going down instead of the entire thing.;0
iwzm038;Reddit;2022-11-19 17:24:04;att has naming standards for all cloud based infrastructure microservices etc;0
iwzujlg;Reddit;2022-11-19 18:26:01;now hiring tolkien lore expert to resolve disputes on proper naming of microservices.;0
ix02wsz;Reddit;2022-11-19 19:24:53;obviously but i think i confused what you were talking about now. now i think you were talking about having an auth microservice and a separate 2fa auth microservice. i thought you were talking about having a microservice for auth including 2fa and couldn't figure out why you thought that was too micro lol.;0
iwyyomz;Reddit;2022-11-19 14:08:19;yeah i don't disagree. it's possible to have 100 teams working on a monolith as long as there are clear delineations. the problem when you're working in a startup that has radically morphed in direction scope and scale clear delineations are not abundant. there are far more omegastars than there should be in the code and it's kinda lovely to say hey billing team... set up a microservice pull code out of the monolith and own it. the cognitive complexity of the monolith gets smaller and the simplicity of the microservice is itself a valuable thing. we have clear ownership from a business domain perspective and it makes it much easier for our operations people to build relationships with engineers that know the hell out of their space. previously what would happen ops folks would talk amongst themselves when there was a problem. who's the best engineer to talk to regarding xy and z? well i don't know about xyz but scabusaurusrex helped me with abc. ask them. i end up helping them and reinforce the pipeline of ops talking to me about problems. pretty soon i can't get any work done and start burning the candle at both ends. then i start abusing drugs because all the cool engineers are. and then i'm looking for a bridge to throw myself off of after my marriage falls apart. long story short microservices save engineer lives. lol. i shouldn't have to say it but satire at end.;0
iwywyyf;Reddit;2022-11-19 13:49:49;if one of your teams is full of oop zealots and another is full of functional zealots a distributed architecture nips that problem right in the bud because they never have to see or interact with each other's code. holy shit if you allow different teams to write their microservices in a completely different way you are insane. you still want 100 same guidelines and architecture or you get complete and utter clusterfuck.;0
iwzgb8u;Reddit;2022-11-19 16:42:01;microservices allow you to address the unique performance requirements of each part of a pipeline individually and prevents bottlenecks that way.;0
iwzdulf;Reddit;2022-11-19 16:23:16;this is the only real benefit of microservices i've ever heard. although... how many different services have different scaling requirements? it's probably an argument for a few separate services not microservices. e.g. i wouldn't expect youtube to have the video compression happening on the same servers as the web servers. but i also wouldn't expect them to have separate comment service thumbnail service subtitle service and so on.;0
iwyhkpm;Reddit;2022-11-19 10:15:24;sure but only if those services are using a ton of resources. to me a microservice should be well micro. if it's using an entire vm it's not micro that's just called a server. ...but maybe that's just me?;0
ix1qv4c;Reddit;2022-11-20 02:55:37;ah so i think part of my misunderstanding is that i'm talking about large codebases with complex apis not necessarily a lot of developers. so the surface area is often huge but the teams are not. our codebase probably does i dunno a hundred different things but we package it up into a neat little server that only does a few things and has a simple interface. so most of a thousand internal functions between different dlls sometimes written in different languages but externally something an intern could call if you gave them a few days to code something up. microservices didn't used to be something anyone talked about and yet there was plenty of software that doesn't really fit that category only made by a few devs. i just don't know what to think anymore but thanks for your response.;0
iwz64sb;Reddit;2022-11-19 15:20:07;ive been doing this for 23 years and have been on all sides of the table qa ops pd.. ive watched my current platform grow from unified monolith builds on ibm hs20 bare metals to microservices container deployments with federated kubernetes on custom hardware skus. your mileage may vary for us its way better now than it used to be. we run 100x the scale we used to with 14 the ops team and we generally measure outages in terms of secondsminutes instead of hoursdays. in terms of code and change velocity alone we are easily 10x just in the last few years. just because youve had a bad experience doesnt make me a liar.;0
iwyiqoh;Reddit;2022-11-19 10:32:51;the idea of microservices is that you don't need to debug 20 of them talking to each other. you debug 1 because the other 19 have well defined apis which you know work because each one has a test harness. in my experience coding testing and debugging microservices isn't the issue deployments and configuration are the issue. releasing 30 microservices because of a spring update which addresses a security vulnerability is painful;0
ix19jhu;Reddit;2022-11-20 00:36:51;i'm wondering the same thing for an banking application written in cobol on which i used to work. let's say that i wanted to make a external api to encode wire transfer. i created a routine in cobol with a well defined and documented api that was exposed to the world. in this i called other routines through their well defined api to retrieve or update the necessary data. once it was build i had to add this routine to a container. the build system then automatically build it with only the part of the code needed to run the various api exposed by this container. so i could create a container with only the code for my wire transfer service if i wanted. then these containers were deployed on x servers and they number could scale automatically on each of these servers. their was a load balancer on front these servers to divide the call. however these container were all connected to the sames databases because we needed acid. in my mind this is a monolith only one big shared source code you can call anyone from anywhere a request execution is fully done by on process the possibility to build custom containers for various api and independently scale them is only a server detail but reading the comment make me thing that for a lot of people the last point custom containers and separate scalability by api is already a big step in the microservices world and isn't possible with a monolith. i'm really wondering if most developers even known this kind of architectures and that they are possibles. if for them their are only two possible architectures a big application that do everything and that can't be scaled or micro services. that the old soa architectures with bigger services don't existe if the old applications communicating through file exchanges don't exists and so one...;0
ix1bqu1;Reddit;2022-11-20 00:54:11;its just one level of growth beyond that. accounting might have a service for handling generating the payment reports that get sent to employees one that handles tracking payroll hours and the reports service would communicate to the time tracking service to generate its data and so on. its basically once your service has enough features with separate needs to outgrow a single system and you would have multiple teams maintaining those separate features anyway. i used the larger scale business domains as a toy example to show how the monolith pattern leads naturally to the microservice pattern but in reality its usually happening much more granularly once you really scale up.;0
ix1pmh3;Reddit;2022-11-20 02:45:47;thats the definition of a microservice architecture though. splitting out disparate concerns into multiple services to comprise a greater whole.;0
ix0ra4w;Reddit;2022-11-19 22:18:30;good then proponents of microservices need to stop that shit and present some actual pros to their case.;0
ix0r7k4;Reddit;2022-11-19 22:17:58;that isn't a problem with microservices though. if it's a problem that happens only in microservice architecture it's a microservice problem.;0
ix2xmdx;Reddit;2022-11-20 10:40:41;there comes a point where you cant avoid the too many cooks problem. microservices provide a nice way of standardizing the solution is all. it's still too much overhead for anything but monster companies who can eat the cost.;0
ix2dsvf;Reddit;2022-11-20 06:21:03;heres an article i found that explains the differences between soa and micro services. in a nutshell its all about the scope of the service that you want to provide. im an soa you build a service thats not targeted to a specific application so it can be reused throughout the enterprise. with micro services you make services that are targeted to a specific application. if i had to build a large scale web app i think micro services are the way to go. especially if the app has complex regional requirements. httpsmedium.commicroticamicroservicesvssoaisthereanydifferenceatall2a1e3b66e1be;0
iwymz98;Reddit;2022-11-19 11:37:03;a server can host several services. you can technically have a microservice architecture with only one physical server. micronanonormal services are just marketing. a service can be a single process as it can also be a pool of servers and processes.;0
iwypfw0;Reddit;2022-11-19 12:13:07;have you actually written and deployed microservices? i don't think you have.;0
iwyv75z;Reddit;2022-11-19 13:29:24;microservices usually run in docker containers on something like kubernetes. where you get the benefits of elastic scaling and fault tolerance.;0
ix129i9;Reddit;2022-11-19 23:40:40;micro refers to the scope of responsibility not to the size of the hardware it runs on or the scale it operates at. you can have a microservice that has one responsibility but serves 10000 tps distributed across a dozen vms behind a load balancer and it's still a microservice if its job is only to serve that one specific role as a part of the company's greater architecture. that's all microservice architecture is. distribution of distinct concerns across separate deployed units.;0
iwypcs7;Reddit;2022-11-19 12:11:56;i've been working on a microservice based app for the past two years and i don't know how to answer your question since i don't know what the over the top complexity is.;0
ix127ei;Reddit;2022-11-19 23:40:13;i'll play the devil avocate there. how do you know that it's due to the microservices architecture and not the change of organisationprocessescompany culturetooling that had to come at the same time ? in other word is the reason of the success the architecture itself or the changes that were forced to come with it ? if it's the changes then how can we guarantee that'll generally apply to other that make the shift ?;0
ix16ltu;Reddit;2022-11-20 00:14:08;you debug 1 because the other 19 have well defined apis in theory. it's easy to correctly define the technical interface and the data format but it's hard for the actual functional behaviour of these contrats. i have never done microservices but i have worked with other soa. the bugs caused by a false assumption made by the caller of a service where numerous. you can refine your documentations and tests to reduce them but they will never disappear completely .;0
ix1j2qj;Reddit;2022-11-20 01:52:49;whoa dude where are your upvotes? this is great reading! no idea what i'd call that... maybe a chameleon monolith? or maybe the services are micro but the code isn't? i mean you can still build and release a bunch of microservices in the same repo on the same release cycle right? i suspect you'll get a bunch of answers to this question if anyone bothers to read it. thanks again for your insight. also cobol eh? i've been meaning to ask a cobol programmer what algorithm they use to determine optimal placement of their second house.;0
ix1ttsd;Reddit;2022-11-20 03:19:59;speaking to that last point if you find yourself thinking you need a microservice architecture to facilitate business needs that screams to me that business has gone way out of scope for the product. one is actually indicative of the other.;0
ixb3vrq;Reddit;2022-11-22 03:49:29;a properly designed monolith is just as easy to version scale and release as a well designed microservice. well architected monoliths are easier to design than a well architected microservice solution but microservices are somewhat easier to manage from an organizational leadership point of view than a monolith. there is a lot of koolaid being drank on both sides though which is obvious from your last paragraph.;0
iwyj379;Reddit;2022-11-19 10:38:08;ah i'm used to working on products with a few hundred people working on them but with individual teams small enough that even a large complex application is still neatly delineated from the rest of things. the sheer size of the apis makes it hard for me to classify the components as microservices especially as they generally don't involve network connections but we definitely have our share of hard api barriers.;0
ix1n7ia;Reddit;2022-11-20 02:26:24;of course and we typically do throw more than one service on a single server when we can but i work in a very computationally demanding field ml at scale yay! so often that kills latency. i guess for me part of it is api complexity though i'm starting to realize that we have a lot of internal api complexity but our external network apis typically aren't complex at all. perhaps the microservice is made up of a bunch of insanely complicated software that's released internally as monoliths but given enough makeup to look like a microservice to the rest of the world?;0
ix1nf1r;Reddit;2022-11-20 02:28:06;i honestly can't tell. simple api does a single thing though that thing is really complex internally and involves multiple different components written in 4 different programming languages. maybe that's still a microservice?;0
iwzbrb7;Reddit;2022-11-19 16:07:07;i guarantee you most of the people here saying they don't see the value in microservices have no idea what kubernetes even does.;0
ix1kcrg;Reddit;2022-11-20 02:03:08;wikipedia defines a microservice as an architectural pattern that arranges an application as a collection of looselycoupled finegrained services communicating through lightweight protocols. that matches what you said and while not in line with my intuition makes sense the way you put it where are your upvotes?. i am wondering if the server i architected at work is accidentally a microservice despite being necessarily a huge resource hog. it does exactly one thing processing an ml workload which has a ton of inputsoutputs and the api is simple in that there's really only a single operation process some input data and get the output of the ml op. so i guess that is a microservice despite requiring super expensive servers just to run a single instance?;0
ix14tga;Reddit;2022-11-20 00:00:18;you need to use some data from another class or even program? oh well let's throw in a direct reference and just access it. that's the real sin of monolith. strangely it also seems to come from object oriented languages. if your only way to access the data is to call a well defined api you'll do it. that this is done through a remote call to another process or through a function that is executed in the same process is only a detail. what's important is that the api is a black box for the caller and that you can't mess with it. if the interfaces are respected it even become possible to generate executables that only contains the code necessary for a specific external api from your big monolith stack of code. you can just say to your build system create make a container for the external api x and it'll automatically create an executable with the code for the api x and all the internal api called by it. i have seen it done in the wild. i have the impression that for many people a monolith is automatically a big ball of mud and that the using microservices helps solving this issue by forcing the use of well defined interfaces. so for the few of us that have worked with monoliths that were not a big ball of mud the advantage of microservices become less clear and seems mainly linked to heavy scalability matters that we don't encounter often we are no all working in faang;0
ix0joch;Reddit;2022-11-19 21:24:04;if they didnt test in a microservice they werent going to test in a monolith either.;0
iwyti1a;Reddit;2022-11-19 13:08:19;there is a lot of confusion over microservices because there is no standard definition but imo you are describing the esense of the idea behind them. in my most simplified view possible there are two reasons to split something into microservices naturally being simplified there are innumerable exceptions to this 1. organisational. when you want to give separate teams absolute autonomy. complete autonomy over style language release cadence etc. 2. performance. for example if you have module a doing some queue processing task and module b providing some http api. it might make sense to split them so that module as queue being especially busy does not starve module b of resources. there is a crapload of nuance to it of course. it is very easy to get it wrong and make more problems for yourself.;0
ix0vum1;Reddit;2022-11-19 22:52:01;all of the complexity of microservices with none of the benefits... at that point you would be better off with a nondistributed monolith.;0
ix6mkvr;Reddit;2022-11-21 04:28:57;i mean i don't have to imagine i work at a large company known for the scale at which it operates. i guess for me monolith doesn't mean the entire product is a single repo but rather significant complex pieces of the project have not been decomposed into separate projects. none of the custom pieces have more than 20 people working on them. some of the infrastructure stuff does but i don't work with that. in any case i think my idea of micro is the stumbling block for me here. i don't want 10000 devs working on the same codebase but i have no problem with having a single codebase worked on by say 10 devs that's a million lines of code and has thousands of files etc. i'm all for decomposing things at the product level but i don't see what's wrong with having large complex services that are made up of multiple projects within them that have nontrivial interdependencies between them as long as the number of devs that have to work together at any one time is kept manageable. so strong carefully designed api barriers between large pieces of the product sure but once you've broken teams down small enough having complex interfaces between them is totally feasible if they are managed well e.g. an onionlayer model around a carefully designed core where each layer is welldefined and coordinated. maybe call each partition a microservice because it looks that way externally but inside it's made of individual projects that are complex and involve a lot of complex interactions? kind of like how in large companies a person tends to interact with many people inside their business division and few who are outside with notable exceptions where their job is to perform that interfacing.;0
iwz3nkw;Reddit;2022-11-19 14:57:39;there is a lot of nuance to performance. its efficient and nice when you can scale up one component without having to scale everything else. but in my experience there is an overall performance penalty to microservices due to loose coupling and serializationdeserialization. still we dont often care because its more maintainable and that saves more money than extra hardware costs.;0
ix1ou2o;Reddit;2022-11-20 02:39:27;we don't have hundreds of people working on that one specific project just a lot of people over 25 years and a hell of a lot of code. it's internally very complex sadly by necessity the domain is very complex and it's an internal toolkit with a very complex api. but i guess we really are making microservices that combine a bunch of really complicated things together probably most of a thousand functions in the internal apis between different projects but using a very simple network api that anyone could throw together a client for in maybe two days if that. it doesn't feel micro to me because the internal stuff is over a million lines of code in multiple languages but i guess from a systems point of view it's been really neatly abstracted from everything else and can plug into things like docker and kubernetes and openservicemesh and anything else that can handle things like grpc. we're talking maybe 50some people on the product and it's very neatly divided by responsibility so maybe no one calls it microservices but they really are? hard for me to imagine a million lines of code being micro but i don't deal with systems at this level anymore so i don't keep up with the jargon as well as i should...;0
ix1p3gc;Reddit;2022-11-20 02:41:33;one reason it's hard for me to think about it that way is that our individual pieces of software have ridiculously complicated apis for some of their stuff. but they are put behind a network fa√ßade that's quite simple. so maybe it's externally a microservice but internally several monoliths that have strong interdependencies despite being written in multiple languages.;0
ix90l78;Reddit;2022-11-21 18:54:04;imagine you have a reverse proxy sitting in front of your application. you need to add a simple temporary rule to do a 301 redirect to some other page lets say a maintenance page. in a monolith you have many ways to handle this. the simplest would be to use your favourite editor add a line in a file restart service. please tell me that no one allows you within 100 miles of a production deployment. i can't think of a more efficient way for you to say that you don't really understand this than to imply that an appropriate way to update something in production is to just have someone a developer maybe? just open up a file on a prod machine in their favorite editor and make changes. i mean there are probably early in career folks who might think this is ok because they are just learning. it is the job of everyone around them to teach them that this is not ok. the fact that you know that deployment pipelines exist tells me that you do know enough to know that this is ok but for some reason you just admitted to the world that you think it is ok. just a few reasons why this is insane... first who has write access to prod? do they always have write access to prod? how is this change implemented? do we just trust this person to not make any mistakes? do you at least make them share their screen so that someone watches them? is this change committed to any source control? do we just trust them to commit this change later? what does this imply for how the environment is built in the first place? is any of this automated? if some of it is why isn't all of it automated? what if there are multiple instances of the monolith? do we just tell this person to make the same change to all 15 or 200 instances of the monolith that are deployed? do we have any sort of quality checks other than just praying that the person doesn't make some mistake when editing and saving these files? what if some disaster occurs and we need to rebuild the production environment? does this person just have to be available 24 hoursday so they can make the same manual updates when redeploying the dr environment? do we intentionally choose not to make this update to uat or qa? does qa or any other user get a chance to verify that the change we are making is really what they want?. i could go on for days as to why what you describe as a simple change is insane and should never be considered acceptable. perhaps this answer explains why you think that deploying microservices is infinitely more complex that deploying a monolist.;0
ix9tjad;Reddit;2022-11-21 22:03:55;i provided an extremely high level example architecture and youre focusing on unnecessary details. the problem is that you didn't choose a high level example you chose a nonsense example. you said that a monolith isn't complicated because a monolith allows you to do something that you would never do and that for some unknown reason you technically cannot do with a microservice i also think you don't understand that using containers is an implementation decision and not a requirement for using microservices. and i'm not sure i even understand why you've made those assumptions and without understanding that i cannot even begin to say why you're wrong. i mean if you are going to do crazy things why wouldn't you allow someone to do something crazy with the microservice that controls 302 redirects? why have you even already decided that i'm using kubernetes? you can easily deploy instances of a monolith as containers orchestrated by kubernetes. you can also deploy them as containers orchestrated by something else. organizational processes surrounding change management release management operations etc were left out by design. of course because that is the only way that the 'simple' example could ever be considered. but in reality no one would ever do that. so the make believe scenario might be simple but so what? hopefully my response will be useful for someone else trying to understand what challenges one may see architecturally and why a lot of containers introduce new challenges for organizations. i don't see how. containerization has little to do with the discussion at hand. containerization is not something people just decide to do. it is always done in response to some need i need an orchestration service like k8s to manage how my application scales for example. that has nothing to do with microservices vs. a monolith. again it feels like you really don't understand this and your attempts to explain it make that seem more certain.;0
