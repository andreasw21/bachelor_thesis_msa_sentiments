ID;Source;Creation Date;Content;Sentiment
kpwsizg;Reddit;2024-02-11 11:14:15;i have a problem. i will solve it with microservices! i now have two problems.;0
kpx8slr;Reddit;2024-02-11 14:00:55;call your cto insane and demand it be broken down into at least 10 microservices minimum. where's your config server!? your notification service!?;-1
kpxfdm1;Reddit;2024-02-11 14:49:57;microservices are a solution to an organisational problem more than a technical one.;0
kpx0qxz;Reddit;2024-02-11 12:42:38;oh damn. youre me in another world. i had to go through this with my team too and their entire architecture revolves around microservices. im playing techlead so i do have some say. in the end now were doing fitness functions to gauge when to split services.;-1
kpx1ldz;Reddit;2024-02-11 12:51:36;i have not fallen for the microservice meme;-1
kpxb7lu;Reddit;2024-02-11 14:19:35;i think you only need micro when you're trying to divide work between multiple teams or trying to limit blast radius. if it doesn't have a new team to take it on you probably don't need another microservice.;0
kpxmoxe;Reddit;2024-02-11 15:39:02;is the same team in charge of developing the services? if so you risk ending up with a distributed monolith. microservices solve an organisational problem.;0
kpxxt88;Reddit;2024-02-11 16:44:39;the cto initially said to do it in 3 microservices load parse send this is insane. load the data in one microservice then have the parsing microservice load it from the first microservice to parse it then send it to the sending microservice to send it?;-1
kpycoyh;Reddit;2024-02-11 18:07:12;if scaling is not a concern... why use microservices?;0
kpyqu62;Reddit;2024-02-11 19:23:52;seems like a use case for workflow orchestration not microservices.;0
kpywjj3;Reddit;2024-02-11 19:54:51;oh theres a whole class of shitty experts who see microservices as their holy grail theyre an abomination. but hey its a turf war and youre on his turf. good luck!;-1
kq0m0sf;Reddit;2024-02-12 02:05:15;i'd do it in zero microservices if the load is super low. roll it into an existing service.;0
kq1dxke;Reddit;2024-02-12 05:10:58;none of these requires or needs microservices.;0
kq2et2b;Reddit;2024-02-12 11:49:28;pack them all into one. if neither of them must fail or the pipeline breaks they are not microservices in that sense they are one service with three dependent stages.;0
kqh0a74;Reddit;2024-02-15 02:31:19;what is your thought process when designing microservices? what are the requirements?;0
kpwskyv;Reddit;2024-02-11 11:14:48;1 cto doesn't have a clue about what problems microservices solve.;-1
kpyhm60;Reddit;2024-02-11 18:33:52;and then what if you decide to use regular expressions in those microservices?;0
kq0uer1;Reddit;2024-02-12 02:59:43;cto is literally interchanging functions with microservices.;0
kpy15c4;Reddit;2024-02-11 17:03:33;we recently moved from a poorly coupled set of microservices to a monorepo and life has gotten so much better;1
kqccbfo;Reddit;2024-02-14 05:27:36;any articles on this? i need to convince someone else that scaling a monolith is viable and that we don't need a crap ton of microservices for every functionality.;0
kpx3f0r;Reddit;2024-02-11 13:10:44;it is a valuable attribute of microservices but it's something that can be achieved within a modular monolith. what you describe is more of an organisational problem solving it with microservices is akin to using a nuclear bomb to mow your lawn.;0
kpxm07j;Reddit;2024-02-11 15:34:47;no you just don't get it true simplicity lies in 14 different microservices each behind 12 load balancers hosted in different azs replicated in 12 different k8s clusters!;0
kpxmimz;Reddit;2024-02-11 15:37:57;what you describe is more of an organisational problem one of the prime use cases of microservices is to solve organizational problems.;0
kpxso6z;Reddit;2024-02-11 16:15:02;to all the less experienced devs reading this. yea microservices are a dumb cargo cult for most teams. you are not netflix. until you have a headcount big enough where each microservice has its own team dont even bother thinking about it;-1
ksqm26o;Reddit;2024-02-29 20:23:55;modular monoliths may be a compromise. if done right later on itll be easier to migrate to microservices. each bounded context is its own project with mostly everything scoped to internal with an interface that is public.;0
ksrmkqa;Reddit;2024-02-29 23:44:23;the first indication that someone does not understand the benefits and costs of microservices is the generic scalability response. they simply don't understand that in many cases for a single team monoliths scale far better.;0
ksrq4li;Reddit;2024-03-01 00:05:25;send him some articles on distributed monoliths. any time one feature requires changes across multiple microservices that's a smell that you have a distributed monolith. and yes the answer is to combine services until you have high cohesion low coupling. things that change together should live together.;0
ksqffzj;Reddit;2024-02-29 19:47:44;ask which company he's applying to. x200b source am quietly pushing for microservices knowing it's not the right solution just to add to my resume because my current employer pays like shit.;-1
ksqk5gv;Reddit;2024-02-29 20:13:29;have you proposed a solution of modular monolith? his argument if scalability wont work because modular monolith would allow to change for fullblown microservice ar architecture in the future while maintaining simplicity of monolithic architecture with clear defined boundaries and decoupling;0
ksqvao4;Reddit;2024-02-29 21:14:06;gergerly from the pragmatic engineer newsletter just explained how microservices make less sense in a postzirp world. you need microservices to manage hypergrowth. with interest rates where they're at you won't see hypergrowth.;0
ksrhyci;Reddit;2024-02-29 23:18:01;out of curiosity will the microservices all share your existing database or will each microservice have a separate db?;0
kss9nxr;Reddit;2024-03-01 02:09:02;microservice is an architecture design pattern to solve large org scaling problems. too many companies ctos architects blindly promote it without understanding what problems they are looking to solve. speak to your manager and architect to understand what problems your team is looking to address with microservice architecture.;0
kstb0g9;Reddit;2024-03-01 06:38:57;ask him to own a single service design and write it and then maintain it going forward. a big drawback of microservices imo is maintaining and rolling them out keep their versioning apis and config in tact.;0
ksqylrl;Reddit;2024-02-29 21:32:00;we are a team of 23 devs not a organisation. i tried to make this clear to the architect as well but he does not agree and just claims microservices are always better.;0
ksqoxfa;Reddit;2024-02-29 20:39:35;generally microservices are a great fit for scaleups who are doubling headcount every year and ownership is a huge problem. as goes facebook then goes amazon then go the tech consultants now that the zirp is over and headcount is realistic again their main use case is falling over;0
ksqy7oy;Reddit;2024-02-29 21:29:54;nah this is a symptom of resumeoriented architecture. grin and bear and put on your own resume that you operated an enterprise microservices architecture.;0
kssfw7y;Reddit;2024-03-01 02:49:22;having designed both megamonoliths and allmicroservice architectures in the past thats my current approach when something warrants being split off into its own service youll generally know it and if the system is modular its pretty easy to separate it;0
kst4jx1;Reddit;2024-03-01 05:43:18;but by then they'll be knee deep in microservice tech debt?;0
ksqyh8e;Reddit;2024-02-29 21:31:19;i don't even know if it's a people question. op hasn't really stated why the project shouldn't be a microservice except for debugging is hard. it's entirely possible it should be microservices.;0
ksqtrgo;Reddit;2024-02-29 21:05:43;what a truly silly take. microservices solve far more than ownership issues. but you need to use common sense when building microservices. you don't want an explosion of tiny microservices for no reason. each one adds a network hop increases deployment complexity etc.;-1
kstkxnh;Reddit;2024-03-01 08:20:10;by then you have experience in microservice development that you can add to your cv;0
kst5ps5;Reddit;2024-03-01 05:52:51;yup. and mr microserviceitect will be blamed. that's all that truly matters in the corporate world make sure there is a scapegoat other than yourself.;0
ksr4iy8;Reddit;2024-02-29 22:03:57;you're insane my guy. you think a 600k line server is easier to debug than 45 microservices??;-1
kss03qw;Reddit;2024-03-01 01:07:58;we split a system into microservice. it's all cool for the guy who makes the diagrams.. the code is 50 redundant everywhere data definitions too with rest calls traversing everything everywhere all at once.. i never thought i'd miss monolithic codebase but i did.;1
l47a512;Reddit;2024-05-15 21:30:42;do you have a crappy unmaintainable monolith? why not try refactoring it into 70 crappy unmaintainable microservices?;-1
l45ny8v;Reddit;2024-05-15 15:56:47;i dunno microservices fit pretty neatly into the whole loosely coupled highly cohesive thing imo microservices may be bad but soa isn't inherently evil even for small companies;0
l45haxw;Reddit;2024-05-15 15:13:53;microservices are great if you need to triple your workload over distributed systems in order to achieve the same result as you would on a monolithic architecture.;1
l46qnaa;Reddit;2024-05-15 19:38:52;ya but my resume needs microservices!;0
l46yvfe;Reddit;2024-05-15 20:26:01;even more direct you don't want microservices if you don't have to. distributed systems suck. say it with me again distributed systems suck. they have all the problems of nondistributed architectures and the problems of distribution in addition. don't do that to yourself if you don't have to.;-1
l472q3t;Reddit;2024-05-15 20:48:15;i find such articles rather frustrating. yes microservices are not always the answer. but that's easy to say. the hard part is deciding when microservices are appropriate and when they aren't. that is the topic i'd love to hear more ideas on.;-1
l46haxa;Reddit;2024-05-15 18:46:11;microservices also let you deal with network interactions for every single thing you do which you know adds exponential complexity.;0
l4a71eo;Reddit;2024-05-16 11:30:43;i feel like this is more about bad software architecture than microservices. microservices are fine when you don't go balls to the wall insane with them like in your example with 350 microservices running in production. that's not about microservices they absolutely have larger problems than that.;-1
l48qns9;Reddit;2024-05-16 03:05:30;i mean probably is doing a lot of lifting. you may not need microservices wont get clicks;0
l46cybe;Reddit;2024-05-15 18:21:42;in my experience full blown microservices makes things difficult to test and maintain. a more domaindriven api approach suits most places better.;0
l46gmzi;Reddit;2024-05-15 18:42:30;i thought i disliked monolithic django until i had the pleasure to implement a microservice based platform. so much chaos.. everybody failing to communicate the right json messages redundancy everywhere accidental coupling.. horrible;-1
l46rf9y;Reddit;2024-05-15 19:43:15;there's a middle ground between monolith and microservices. you can take a few large core components and seperate them out without them becoming micro;0
l472j8a;Reddit;2024-05-15 20:47:09;part of the problem is that to get a job where they actually need microservices you get ahead of the queue if you have experience with microservices. so that's another incentive to implement microservices even if you could make do without them.;0
l47epeg;Reddit;2024-05-15 21:56:38;i dont necessarily agree with the scale being the only reason you could decide to go with microservices you can use microservices when you need very different uptimeload requirements between domains or very different lifecycles.;0
l498t3u;Reddit;2024-05-16 05:15:17;i mean usually what ends up happening with companies building microservices is they end up building a distributed monolith.;0
l499rpv;Reddit;2024-05-16 05:22:56;one serious upside to microservices unrelated to scale of org and user count is being able to keep dependencies of core code slim while leveraging a lot of existing code without compromising security at the cost of speed and financial costs. horses for courses as they say.;0
l4685tq;Reddit;2024-05-15 17:54:18;i think you're right but i also think if the possibility exists that you'll scale in the future a microservice architecture might just be a good initial time investment to reduce headaches later.;0
l49ybn7;Reddit;2024-05-16 09:35:59;the thing is he's not saying it's a circle. he's not saying faang shouldn't use it. he's not saying no company needs it. he's saying you shouldn't start with microservices as a default especially if you're a startup.;0
l4dvf1x;Reddit;2024-05-17 02:13:07;i can't wait for a version of containers to come out with the express purpose of containerizing a monolith server around all your microservices to deploy to a single server because not having to communicate across the entire web is slower.;-1
l48v9ml;Reddit;2024-05-16 03:37:00;you had 37 problems and thought i know ill use microservices. now you have 75 problems.;-1
l45j1rg;Reddit;2024-05-15 15:25:31;and deploying all microservices in a single process is a very useful thing to do you can use that for integration tests that require way less orchestration than your cloud deployment.;1
l4663kg;Reddit;2024-05-15 17:42:40;hot or not i disagree. microservices are about independent deployability and team independency. objects are about neither of that.;0
l471oe0;Reddit;2024-05-15 20:42:15;microservices is explicitly a restricted form of oop. a big part of why people like microservices are because it is restricted. microservices stop you from doing quick cross boundary hacks that cause problems forever after.;0
l464s6q;Reddit;2024-05-15 17:35:13;no absolutely not. a horrible perversion of microservices is like oop across a network. this is what most people do who have no clue. good microservices need to be as independent as possible to avoid all synchronous communication even the original messagebased oop of smalltalk is not like that.;-1
l4dw37r;Reddit;2024-05-17 02:17:47;there is literally no such thing as application that needs microservice architecture. an application could benefit from some aspects being put into microservices but there is just no use case where your entire app needs to be entirely microservice unless the entire app itself does like 2 things.;0
l45ndkx;Reddit;2024-05-15 15:53:13;load balancer 3 instance of the monolith ? worked for a company that had that setup scaled linearly with the amount of machine. no microservice required.;0
l45nvxd;Reddit;2024-05-15 15:56:23;there is so much scaling options these days i cant imagine when a microservice would be an ideal place to start. yes im mad because we started with microservices on a new project..;-1
l45mskr;Reddit;2024-05-15 15:49:37;it's not really developers. this goes to the managers who hear that microservices are the bees knees then makes everyone build microservices. i'd rather not have to print shit to cloudwatch to debug why something that works locally isn't working after deployment.;0
l476ccl;Reddit;2024-05-15 21:09:06;im sorry to hear that. ill probably write some article on when it may be a good idea to use microservices and what companies should prepare to successfully implement them e.g. service catalog rethinking testing strategy etc;-1
l45qmxv;Reddit;2024-05-15 16:13:16;i agree with everything you said. just a note that this article is not a microservices are bad it's a microservices are not always what you need kind of article.;1
l46vdju;Reddit;2024-05-15 20:05:41;scalability of the app isn't always even a result of microservices. scalability of dev throughput is arguable. splitting a monolith into a couple of things with different deployment cadences and usage patterns isn't even microservices. some variation of modular deployed monolith codebase is often more useful.;0
l49ygei;Reddit;2024-05-16 09:37:42;unfortunately i keep hearing microservices but what they actaully mean is what you wrote aka domainmacroservices and its really frustrating. they are anything but micro.;-1
l45twnz;Reddit;2024-05-15 16:32:32;deploying all microservices in a single process does that actually work in practice?;0
l45wq38;Reddit;2024-05-15 16:48:51;this. modularity and message passing are general concepts that apply to both oo and microservices. but there are important differences at build time and run time.;0
l467wds;Reddit;2024-05-15 17:52:50;lol using build time to judge if you should do microservices is like saying developers who put up prs with low lines changed are less productive.;-1
l462zb7;Reddit;2024-05-15 17:25:01;an object contains behavior and state like a microservice is also behavior and state. they both expose their interface as messages that you can pass to them. the implementation is encapsulated.;0
l464tn2;Reddit;2024-05-15 17:35:27;it is not unheard of having a team that manages a system of microservices with more microservices then developers on the team. i find this peak insanity.;-1
l46apas;Reddit;2024-05-15 18:08:52;you don't need microservices for that;0
l45rrsf;Reddit;2024-05-15 16:20:00;that's orthogonal to microservices vs monoliths. you can break api compatibility with microservices too let's just do microservices is not an alternative to proper planning and change management.;0
l461isj;Reddit;2024-05-15 17:16:42;thanks. the challenge with taking on things like events is that you get into a whole other domain of complex design analysis that's needed but you get engineers the same ones blindly pushing for microservices pushing for things like cqrs and eventsourcing right off the bat. no.;0
l45qw71;Reddit;2024-05-15 16:14:48;just a note that this article is not a microservices are bad it's a microservices are not always what you need kind of article. fair enough i jumped to an invalid conclusion there. apologies for that.;-1
l465nbx;Reddit;2024-05-15 17:40:06;they force you to write code in small easily testable and reusable chunks. not necessarily. microservices don't force you do this and you can end up in an even worse hell called a distributed monolith.;-1
l47q0xc;Reddit;2024-05-15 23:02:10;you're describing a distributed monolith which isn't a necessary consequence of using microservices and a sign you've done something horribly wrong. properly isolated microservices won't require you to redeploy everything. which is why understanding things like ddd is very important and not just for microservices.;0
l46m2d7;Reddit;2024-05-15 19:13:05;does that actually work in practice? sure. if you're talking to your microservices over protobuf it's trivially easy to shim it so that the call never actually goes out on a wire. in go using nethttptest you can do the same with http rest calls too.;0
l4801j3;Reddit;2024-05-16 00:03:35;sounds like those backend devs are incompetent and would be doing terrifying stuff regardless of microservice vs monolith;-1
l46ri1n;Reddit;2024-05-15 19:43:40;where i work we have around 40 microservices in the backend with two part time developers. the frontend team is 10 people...;0
l48svzf;Reddit;2024-05-16 03:20:47;people these days are doing soa and calling it microservices. soa is still a really useful set of design principles.;1
l48tbvl;Reddit;2024-05-16 03:23:49;why? microservices should be small and as srp as makes sense. small leads to numerous. its not insane its a natural outcome of the architecture.;0
l47fqum;Reddit;2024-05-15 22:02:38;i think you often have a problem then you have a strategy that solves the problem the strategy then becomes the rules and every square peg is bashed into that round hole because that's the rules. microservices is just one example of this;0
l4e5cam;Reddit;2024-05-17 03:23:05;i can't actually find anything but i don't doubt you. i just don't think what we call microservices today is that. it was containerization that all of a sudden made devs start going hey let's make everything microservices! and made whatever that was into whatever it is today.;0
l4a68rl;Reddit;2024-05-16 11:20:18;there are also plenty of negatives with monoliths which is why people are drawn to microservices. yes a monolith has its own challenges. sometimes is better to have the challenges of microservices than of a monolith. but probably not as many as we accept by default.;0
l466mdl;Reddit;2024-05-15 17:45:36;ugh tightly coupled microservices. the ninth circle of programming hell.;-1
l4hq0ct;Reddit;2024-05-17 20:28:49;nah. i have microserviced stuff that needed to be done in another programming language though.;0
l4ghimw;Reddit;2024-05-17 16:09:02;that's fair. i suppose it's still inline with what i was saying in terms of devsorgs blindly adopting microservices because of misconceptions about it not for the reasons articles like the op point out.;0
l4a75xr;Reddit;2024-05-16 11:32:21;as with every thing it's a trade off i don't think anyone should default to microservices over monoliths though;0
l470ih0;Reddit;2024-05-15 20:35:31;tightly coupled microservices if someone ends up with tightly coupled µservices they had a fundamental misunderstanding of µservice architecture but tried to implement it anyway.;0
l4715n3;Reddit;2024-05-15 20:39:15;are your inprocess microservices interacting over http µservices shouldn't be interacting over http. if they are you don't have µservice architecture.;0
l476o4w;Reddit;2024-05-15 21:10:59;at least in kubernetes different microservices are actually running in separate processes and isolated from each other in containers. so that's an improvement at least...;1
l4a7a97;Reddit;2024-05-16 11:33:53;yes there is nothing wrong with microservices per se. and there is nothing wrong with monoliths as well. but our industry seems to have forgotten that there is no silver bullet.;0
l46jv3r;Reddit;2024-05-15 19:00:28;one the big things i think they do solve is just ownership of stuff but it can be as much of a negative as a plus it's a lot easier to have clear ownership over a microservice than a part of a monolith;0
l46kfne;Reddit;2024-05-15 19:03:44;that only works if each microservice is owned by a separate team which is also the case for monoliths. what happens when it's the same team that owns all the microservices? it's tempting to take shortcuts instead of maintaining proper design discipline.;0
l46lnr3;Reddit;2024-05-15 19:10:48;at least as far as ownership if the same team owns all the microservices or the whole monolith it's the same.;0
l5gsrek;Reddit;2024-05-24 15:10:08;of course if you build a distributed monolith you shouldn't do microservices. but then distributed monoliths aren't really microservices. like everything in software microservices or monoliths are not intrinsically good or bad it's what you make of them that's good or bad.;0
l5hdbza;Reddit;2024-05-24 17:19:07;both have their place its a tradeoff. the always microservice and always monolith crowds are both wrong;-1
l5vdbt1;Reddit;2024-05-27 13:51:24;the tech world is just getting back on his feet! microservice is not an end game but just a possible solution to a clear problem. most of the time totally useless and misused! shiny object syndrome as its best.;-1
l5ipmqk;Reddit;2024-05-24 22:07:09;i would say soa with right sized services beats microservices and monoliths every time and its nothing new were rediscovering hot water..;0
l5h2mz4;Reddit;2024-05-24 16:14:40;the author of this article seems to have a fundamental misunderstanding of microservice architecture.;-1
l5hv4ru;Reddit;2024-05-24 19:03:16;you are not just wrong you are stupid yeah terrible article about microservices by someone who has never dealt with a production monolith;-1
l5h1nfi;Reddit;2024-05-24 16:08:32;anyone that is doing microservices by converting an inmemory function call to a network call has a fundamental misunderstanding of microservice architecture. if someone is using microservices they should have an eventbased architecture. nothing else really makes sense for achieving the goals of microservices.;-1
l5iutrn;Reddit;2024-05-24 22:39:33;i think i will use this whenever someone says microservice should at least make them think about what they are suggesting.;0
l5h6ca1;Reddit;2024-05-24 16:37:24;microservices have become a religion and speaking out or going against it is heresy. pretty much every article posted to rprogramming about microservices that gains traction is negative about them. microservices haven't been in vogue for years.;-1
l5haol9;Reddit;2024-05-24 17:03:21;and here i am as a junior dev working for a company with 3 devs and the boss wants to implement a microservice architecture. the boss is one of the devs.;0
l5gwd2i;Reddit;2024-05-24 15:34:32;i actually recently joined a 4 person team that's using 6 microservices a bff for an application with fewer than 50 users... leaving soon though;0
l64yuc7;Reddit;2024-05-29 07:57:20;what you just described is not microservice but soa which the author puts within the safe starting point zone.;0
l5gec5m;Reddit;2024-05-24 13:15:30;i am saying this as someone who works on a distributed microservice system too. everytime i hear let's make that a service i push back on it because services for tiny things are such a silly idea;-1
l5h0bb7;Reddit;2024-05-24 16:00:04;because there isn't a one size fits all solution that's the reality of it. a lot of us don't work on tiny projects and a lot of us do. all devs work in very different contexts and sometimes microservices are the answer and sometimes not;0
l5gswt9;Reddit;2024-05-24 15:11:11;wait you don't run every dependency as a distinct microservice? s;0
l5i44l8;Reddit;2024-05-24 19:56:18;.net aspire looks really great opinionated microservice architecture;1
l5hftf9;Reddit;2024-05-24 17:33:44;if you need transaction across microservice i would put forward you either didn't split you domain properly or that you should not not do transaction at all and use a stream architecture...;0
l5hvqjm;Reddit;2024-05-24 19:06:50;well if you have a monolith and the sql server goes down youre screwed. microservices might have several smaller storages;0
l5kp8jo;Reddit;2024-05-25 06:59:46;pretty much microservices have a brand loyalty cult vibe these days so we are very cognisant when someone says here is another microservice then another then another. modular monolith or modular macroservice is beautiful when done right.;1
l5gi24q;Reddit;2024-05-24 13:48:17;yes distributed debugging is one of the downsides of the architecture. but if a single bug concerns more than even 5 services then you are not working with microservices but with a distributed monolith.;0
l5gsbwg;Reddit;2024-05-24 15:07:07;if your daily user base isn't measured in millions you don't need microservices. if it is you might need microservices.;0
l5hykmw;Reddit;2024-05-24 19:23:36;yes but what if you need to abstract two lines of code? surely you'll need a microservice;0
l5hd0ya;Reddit;2024-05-24 17:17:18;microservices are fine for large user bases. we have nanoservices and it really sucks to support.;-1
l5gsxui;Reddit;2024-05-24 15:11:24;ok so you suggest splitting the system into multiple processes. postgres has such architecture for exact same reasons. but nobody would claim postgres architecture is microservices. process ! microservice.;0
l5hv6jl;Reddit;2024-05-24 19:03:34;we have 100 users after 2.5 years of microservices. fuck my life;-1
l5nfplg;Reddit;2024-05-25 21:26:25;im not suggesting or advocating anything im saying that that is the case with microservices and that that is one of the plus sides among downsides. in the end it all depends on what you need and with what downsides you are willing to live;0
l5mizly;Reddit;2024-05-25 17:50:25;wait a minute microservices are there to allow you to scale individually. in my view the most important benefit of microservice architecture is independent deployment and independent development. scalability follows from those two things.;0
l5jkews;Reddit;2024-05-25 01:33:17;and once you get a few too many microservices? monorepo! which is just a fuglier word than monolith that suggests intent;-1
l9xpo7c;Reddit;2024-06-23 20:20:40;will someone please just tell me the truth do i need microservices or not?;0
l9z79uj;Reddit;2024-06-24 01:53:28;the thing i need less of are blogs which tell me that i don't need microservices.;-1
l9y7rv3;Reddit;2024-06-23 22:09:00;wait you're telling me that microservices aren't a silver bullet? can such things be?;0
l9ymlyn;Reddit;2024-06-23 23:36:27;more microservices more apps you need to constantly keep up to date and patch;0
l9yvhtc;Reddit;2024-06-24 00:33:51;you probably dont need microservices ftfy;0
l9z1br9;Reddit;2024-06-24 01:12:32;its safe to say that if youre reading advice on microservices from reddit you definitely dont need microservices. if your company is big enough that your bosss bosss boss has hired management consultants to tell you need microservices then maybe its time to consider it.;0
l9z44bx;Reddit;2024-06-24 01:31:32;monorepo and microservices are false futurisms which don't fit majority of the use case. people do it because it's supposed to be done this way;0
l9w0aoc;Reddit;2024-06-23 13:18:21;ive worked in two companies one is pretty much a household name in the usa that went really big on microservices. i hated it so fucking much. i never want to work on a microservice ever again.;-1
l9ww1cj;Reddit;2024-06-23 17:20:06;as your monolith grows you'll wish you did microservices;0
la00bgt;Reddit;2024-06-24 05:27:18;i see startups adopting microservices in a misguided attempt to reduce technical debt. the logic is microservices now avoids needing to break apart a monolith later. what everybody should understand is that breaking apart a monolith later is better than paying all the conceptual pain involve with microservices today.;0
l9z3igq;Reddit;2024-06-24 01:27:25;remember amazon prime video using microservices to process videos? imagine transferring high bitrate 4k videos service to service. this particular usecase isn't compatible with microservice architecture at all.;-1
l9zul6w;Reddit;2024-06-24 04:42:23;1 for the tco angle . not a huge microservices fan but your argument is an angle i had not considered before.;1
la1mvv3;Reddit;2024-06-24 15:17:46;yes you can do microservices poorly.;0
l9xmw6m;Reddit;2024-06-23 20:03:57;if the technical debt in your monolith is so large you wish you used microservices then starting out with microservices will make you wish you wrote a monolith. why? skill issues.;0
l9wh08w;Reddit;2024-06-23 15:41:24;100 this. people seem advocate microservices because it forces them to create an explicit clear api for their library. but they should already be doing that for any library they write.;0
l9w8o3x;Reddit;2024-06-23 14:36:59;because as a single service how would you manage oncall and other operational challenges? microservices are the equivalent of it works on my machine.;0
la033q4;Reddit;2024-06-24 05:50:25;15 minutes? try 2 hours. that's what it's like at my current company. amazon literally invented microservices in 2001 because tests on the daily monolith build took an entire night to run.;0
l9wh7ts;Reddit;2024-06-23 15:42:56;in other words it is just a hype. managing a big monolith is much easier than managing microservices. it is extremely difficult to test an integrated microservice and it's much easier to do the same for a monolith.;0
l9whf9j;Reddit;2024-06-23 15:44:23;where's the micro in here. they are just services. soa and seperation of concerns predate microservice by a lot.;0
l9w0ozr;Reddit;2024-06-23 13:22:31;i am the single dev guy left on a project with some 30 microservices.;0
l9vzk5e;Reddit;2024-06-23 13:10:32;microservices often communicate via rpc not over http. in that sense they to operate like function calls;0
l9xipq6;Reddit;2024-06-23 19:38:49;microservices are worse than the disease. 100000x slower calls between modules extra deployments no transactions refactoring becomes harder inevitably leading to a maintenance nightmare compile time errors become runtime errors etc..;-1
l9xem9g;Reddit;2024-06-23 19:13:52;yes. you are right. what i like best about microservices is the fact that they're easy to use and you can just jump right in and start coding!;1
l9wjcrk;Reddit;2024-06-23 15:57:56;most people who are doing this are using containers and are setting limits and letting something like the k8s scheduler handle eviction and moving services around. no place ive seen using microservices has been using nonclustered hosting. similarly all dbs have been out of cluster;0
l9xildg;Reddit;2024-06-23 19:38:05;but splitting your code into multiple small services that communicate via http is still absolutely microservices. that is nothing but soa and that does not give you independent deployment and development which is the primary advantage of microservices.;0
l9wbbu2;Reddit;2024-06-23 14:58:50;have you perhaps mistaken me for a fan of microservices or of monoliths? theres no one right answer in this field only a series of besteffort compromises.;0
l9w1rp8;Reddit;2024-06-23 13:33:21;you can do http calls. it's better if you do asynchronous communication but it's not forbidden. you can have stateless services that provide functionality just via restrpc calls. that's why the circuit breaker pattern was invented https service a should still be fault tolerant.;0
