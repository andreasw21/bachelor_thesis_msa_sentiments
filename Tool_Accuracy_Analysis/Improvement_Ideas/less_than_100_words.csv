ID;Source;Creation Date;Content;Sentiment
23453676;HackerNews;2020-06-08;still don't need microservices. what you're referring to is just soa which has been around for a couple of decades. microservices typically outnumber engineers or aren't too far off.;-1;-1
23453068;HackerNews;2020-06-08;my point is that microservice architecture is not just the singular pattern of code talking over the internet but a collection of patterns and techniques focusing on when and where to split up code and to focusing on the communication strategy you use.you can 'get around' microservice architecture by not doing it. the point is that if you're familiar with it it's a lot easier to 'accidentally' be successful or at least that's the proposition.;1;1
23452837;HackerNews;2020-06-08;heh i have a masters degree focused on distributed systems. my thesis was about tracing and debugging in microservicestyle systems. i generally write monoliths on purpose. the massive overheads and debugging nightmares are not worth it most of the time.global state still gets pushed out into backend services redis postgres and i can still scale horizontally all day but theres no crazy chain of backend interservice http requests to cause no end of chaos;-1;-1
23452097;HackerNews;2020-06-08;teams of ten. each service is owned by exactly one team.that rules out every monolith i've seen at companies that still did that.but unfortunately microservices becomes a religion a cargo cult and companies have hundreds of tiny little services.my services are not monoliths. but are they microservices? don't care. they work. certainly they are just a couple of services within a network of several hundred but i work at a large company. and every one of those services has one team responsible for them.;-1;-1
23450591;HackerNews;2020-06-07;i see microservices as a peopleteam architecture. it's a way to scale up people and define boundaries around who is responsible for what without having to standardize how everyone implements what they are responsible for. just expose it as a rest api. problem solved. and problems created. this isn't all bad it just isn't a everyone should do this and all your problems will go away architecture. that architecture doesn't exist.;0;0
23450266;HackerNews;2020-06-07;if you have ten people working fulltime on it it is not a microservice it is just a service.i think the discussion about microservices has suffered more than anyone realises from a lack of shared understanding about what a microservice actually is.;-1;-1
23450259;HackerNews;2020-06-07;microservices are useful but not for the reasons listed here or the reasons often assumedpersonally i'm more a fan of realm of responsibility scoped services to decouple technologiesdatastores of parts of a system that do not interact by design for instance your user account credentials handling from literally anything else and then use a system like kafka with producerowned format to have a common data bus that can tolerate services that process data asyncronously or even things that keep users in the typical refresh loop dying for a bit.;1;1
23450219;HackerNews;2020-06-07;microservice testing come with version combination hell.if you have 10 microservices each of which can be on one of two versions that's 1024 combinations. how do you test that?;-1;-1
23450116;HackerNews;2020-06-07;stop off! drop a bunch microservices into the same network without any access control and you don't have a physical barrier at all! in fact it becomes even harder to have a clue as to what's interfacing with what unless you can observe your inter process traffic.;-1;-1
23449910;HackerNews;2020-06-07;at a goto talk an uber engineer said they had so many microservices it was impossible to really count how many they had;-1;-1
23449884;HackerNews;2020-06-07;microservices make the boundary between units defined and forces api design on those boundaries no it doesn't. google distributed monolith to read some horror stories.bad architecture or good architecture without enough quality control over time will cause these issues one way or another.there's no silver bullet for this.;0;0
23449768;HackerNews;2020-06-07;this misses some of the main reason microservices are nice its much easier to change code that isnt woven throughout a code base. microservices make the boundary between units defined and forces api design on those boundaries. yes you can properly design these abstractions without a service boundary but having the forcing function makes it required.;1;1
23449762;HackerNews;2020-06-07;like almost anything when not used for the correct application. say a hammer to insert a screw. it is not a good idea. one of my favorite things about using microservice is that you can use multiple languages. this can grant you the ability to use a language which is better for the task or for other programmers to contribute in their favorite language.;1;1
23449744;HackerNews;2020-06-07;a recent blog post by neobank monzo explains that they have reached the crazy amount of 1500 microservices a ratio of 10 microservices per engineer thats wild. microservices are mostly beneficial organizationally a small team can own a service and be able to communicate with the services of other small teams.if anything i think a 101 software engineers services is probably not far off from the ideal.;1;1
23449738;HackerNews;2020-06-07;microservices are middleware. that's they way i treat them anyway. i build them as the glue between the backend and frontend. they handle things like authentication business logic data aggregation caching persistence and generally act as an api gateway. i really only ever use microservices to handle crosscutting concerns that are not directly implemented by the backend but have a frontend requirement. the only way that is harmful is if you write bad code. bad code is always harmful.;1;1
23449672;HackerNews;2020-06-07;microservices were never about code architecture they were an organisational pattern to enable teams to own different services. most microservices don't actually look micro to those implementing them because it's really just a lot of services.for my personal projects i just have a frontend service http server and a backend service api server. anything more is overkill.;0;0
38174497;HackerNews;2023-11-07;it's not like microservices don't also give you chances to mess your data up. it's hard to do transactions across boundaries you have to deal with eventual consistency sometimes there is no single source of truth.i struggle to see how microservices fix this for people having worked primarily with them for the past 6 years.;-1;-1
38130050;HackerNews;2023-11-03;with proper devops tooling and a half decent design even a junior engineer can manage several microservices without issues. since microservices are about scaling people as much as they are about scaling tech 10 people in one service is a lot to me in that world.the best company i worked at had about 510 deployable per engineers on average and it worked really well. they were small deployed almost instantly dependencies were straightforward etc.monoliths work fine too it's just different tradeoffs.;1;1
38088383;HackerNews;2023-10-31;testing hugely via expensive integration tests or e2e is needed no matter which software you have. and you could easily fall into doing that for microservice architectures. however a common way is rather having contract tests. google fowler's article for it;-1;-1
38086139;HackerNews;2023-10-31;i ended up getting into a few arguments at work with the over excited engineer in my last place. he wanted microservices. i said it was just going to add complexity. the app was already a mess adding network calls rather than function calls wasn't going to help. we had a small teas 3 backend devs one of them doing mostly devops and two frontend.;-1;-1
38082191;HackerNews;2023-10-31;maybe logging should be a microservice....;0;0
38082454;HackerNews;2023-10-31;team size is probably the most important factor that should influence the choice about microservices. unfortunately there was a period when it looked like every project and every team had to adopt them or be declared a dinosaur.;-1;-1
38083263;HackerNews;2023-10-31;absolutely true but also usually your business transactions happen in a business context which happens to be in a microservice. it can be a sign of bad design if you happen to have a lot of those transactional problems.you will have distributed transactions with a distributed microservice setup but most transactions will still be be contained within a single microservice and thus be atomic and not distributed.;0;0
38079931;HackerNews;2023-10-31;no. a number of startups don't either. i hazard to say that even giants like tinder or uber likely can have a 30 min outage and lose some revenue and goodwill but not be hit by some exorbitant liabilities.also microservices add both resilience by running many copies and fragility many loosely coupled moving parts. which effect prevails depends on many factors.;0;0
38077876;HackerNews;2023-10-31;in the department i work there's a lot of microservices about 56 so 56 teams. but everything is quarkusspring java and nothing else.;0;0
38075700;HackerNews;2023-10-30;really doesn't make sense to me that people jump to microservices rather than creating module boundaries in their monolith.;-1;-1
38076765;HackerNews;2023-10-30;ymmv but i think you can only do that if you have a monorepo with the shared library and all the microservices;0;0
38076540;HackerNews;2023-10-30;microservices are necessary and the best way to architect something new that is going to be used at scale. in my experience working with monolithic architecture with 20 teams at a large tech company i have found it takes multiple years to convert to microservices. rebuilding generally is possible in half as much and gives you the opportunity to hire good talent motivate existing employees and use the latest tech. thoughts?;1;1
38076411;HackerNews;2023-10-30;microservices don't cost as much if you deploy them everywhere so you get both vertical and horizontal scaling without lookup cost.of course then you need the same stack which allows multiple apps deployed everywhere.;1;1
38077939;HackerNews;2023-10-31;i look forward to 2030 when microservices are all the rage. anyone who avoids the temptation to tear down and rebuild their entire org as a monolith will be way ahead of the curve.;1;1
38074617;HackerNews;2023-10-30;microservices not being able to talk to each other the network basically never comes up.what you are saying is outright ridiculous.;-1;-1
38072897;HackerNews;2023-10-30;can you point to a comment on hn saying microservices are never justified?;0;0
38073768;HackerNews;2023-10-30;open source projects rarely involve live services or providing saas. in those situations i think microservices are much more helpful;1;1
38071736;HackerNews;2023-10-30;microservices is a newer term than soa.;0;0
38070872;HackerNews;2023-10-30;if your company has a microservice architecture but doesn't have proper knowledge on how should they communicate how should they share code etc then it is the worst thing possible.;-1;-1
hgs6zn9;Reddit;2021-10-15 22:31:59;i agree that most companies don't need microservices but that's because most companies are small. a large portion of developers on the other hand do because large companies hire a ton of people.;0;0
hgs5ewd;Reddit;2021-10-15 22:20:37;take a fortune 500 company. should every single service be in one big monolith? no. should every single rest call be in its own distinct containerwebservermicroservice? no. somewhere between these extremes is a good situation. honestly i think it comes down to the datastore. most services accessing a medium sized database should probably be colocated in the same semimonolith. but then why intermix administration data mininganalysis and primiary crudbusiness purpose calls?;0;0
hgrbb7o;Reddit;2021-10-15 18:52:06;currently in the middle of a multi year migration from monolith to microservices and everything everything about the microservices solution is better. slightly more complexity in terms of deployment but being able to upgrade dependencies in isolation is a huge win.;1;1
hgrra2i;Reddit;2021-10-15 20:41:00;i prefer monolithic design but when i see a system using python functions to send individual commands by opening ssh connections to another device's command line for each microservices sound like a huge improvement nevertheless.;1;1
hgt83g3;Reddit;2021-10-16 03:36:34;first it was monoliths are bad and everyone should use microservices. now it's the opposite lol. i say just do what makes sense for your application. monoliths has its place and microservices has its place.;0;0
hgu8ia5;Reddit;2021-10-16 10:27:05;i can't take the we have many developers so we need microservices nonsense anymore. your workflow is shit? you don't understand what modularity is? you think you have to enforce that through a grpc framework? maybe pick a different career.;-1;-1
hgsw3yw;Reddit;2021-10-16 01:51:12;i swear to god people need to shut the fuck up about monoliths and microservices and just build their shit with some foresight. fuck off;-1;-1
hgst8fc;Reddit;2021-10-16 01:27:12;i disagree with many commenters that microservices are mainly good for scale. i think robustness is a more valid reason to use microservices. i believe all programmers should know how to program in erlang just to learn the basics of good concurrency programming.;1;1
hgttjj3;Reddit;2021-10-16 07:06:56;the biggest annoyance regarding microservices is that everyone builds their own. with no controls over who is building what you end up with 20 getorder services all slightly different perpetuating the problem because a newcomer doesnt trust any of them.;-1;-1
hgxnmwh;Reddit;2021-10-17 04:01:26;microservices suck. they leave you with 47 different repos and it's an impossible amount of work to maintain them and fix bs tech debt. they sound good in principle because you can write your new thing in some other programming language and pile it on top of the jenga pile. but you better get a new job before the tower collapses and you're stuck maintaining the mess.;-1;-1
hgr6bzm;Reddit;2021-10-15 18:18:11;i think it's a balance. in one way i prefer a monolith. we have a few microservices and all they've done is slow down development from having to start 4 microservices locally pulling down the latest versions deploying 4 different applications keeping a test suite running that connects all 4... i haven't seen the benefits. i think to benefit from them you need to be in a larger team where you have individuals responsible for making ci and testing etc easier and more automated otherwise it just ends up being a huge time sap.;0;0
hgsdx3t;Reddit;2021-10-15 23:23:42;ive always been of the mind that microservice architectures are an expression of conways law. thats not a value judgement on microservices they arent good or bad they just are and they have trade offs.;0;0
hgr5tf3;Reddit;2021-10-15 18:14:39;microservices primarily allow developer scale in my experience you omitted word complexity. microservices scale process complexity upwards. the moment you opt to do them you fall for all network fallacies.;-1;-1
hh3x2q6;Reddit;2021-10-18 15:55:41;how small of a team? microservices do a good job of formalizing service boundaries in code rather than having to go through that with each code review and making sure that the boundaries remain intact. a single repo and one hasty prreview can allow coupling and risk to creep back in. separate servicesrepos create implicit friction that make it harder to accidentally introduce those types of regressions.;1;1
hgt8l0i;Reddit;2021-10-16 03:40:55;large companies also buy many smaller ones in a sense collecting selfcontained services once they've matured and teams already silo'd off from the rest of the developers and thus predisposed to microservices by conway's law.;1;1
hgygp8w;Reddit;2021-10-17 08:48:36;i feel like the scale of monolith and micro service isn't great. to me it's too monolithic if deployment takes too long or if there's too many unrelated services in it. it's too much of a microservice when you start to have to call too many apis to accomplish something simple.;-1;-1
hgv3l4j;Reddit;2021-10-16 16:30:17;that's what's happening where i work. new managers came in and declared we're going to use microservices. i'm powerless to stop them and for the reasons you mentioned we're going to be in a world of hurt soon.;-1;-1
hgr5735;Reddit;2021-10-15 18:10:21;you say that but with lots of people adding things in different places and styles the project becomes difficult to reason about very quickly so microservices with clear boundaries mean smaller parts are easier to understand and replace if needed as a solo or small team none of that applies because it is easier to coordinate and the each dev knows a much larger portion of the codebase;1;1
hgt8bmu;Reddit;2021-10-16 03:38:32;i must emphasize that google does consider that your microservices are talking over rpc and not rest and i agree with them don't try to make rest apis if you're only getting called by an internal service of your team. and yet more and more people continue to build microservices talking with and or layering over rest. which becomes a large hassle really quickly.;-1;-1
hgvq7df;Reddit;2021-10-16 19:20:22;microservices don't have to suck. but the approach many so called experts push especially concerning the database side is a recipe for pain unless you really know what you are doing and need that degree of separation. now if you are coming from completely separate data silos yeah that makes sense. but to plan for that is kind of ass backwards imo.;1;1
hgsyvn4;Reddit;2021-10-16 02:14:57;exactly what i thought about microservices concept i mean sure it is easy to scale but mostly this is concept for rapid development where poor code optimalization isn't an issue. proper microservices can work fine but now this concept is used on every project without thinking if it is needed.;-1;-1
hgz1yki;Reddit;2021-10-17 13:32:53;ah yes.. microservices solving dependencies... by splitting everything into 50 deployments so you can just update the dependencies on the one thing you care about this week and 4050 of the things just code rot.;1;1
hguv6u0;Reddit;2021-10-16 15:16:35;that was my point. too many microservice advocates think their architecture prevents intermixing of concerns.;-1;-1
hh62ly0;Reddit;2021-10-19 01:17:31;true but by using microservices and containerizing them you can scale more efficiently. there are a lot of benefits to microservices.;1;1
hgstq2o;Reddit;2021-10-16 01:31:18;microservices are essentially impossible to reason about by design. it is seperation of concerns taken to the extreme. you aren't supposed to be able to reason about other services because that means you havent seperated concerns enough.;1;1
hgsw2ch;Reddit;2021-10-16 01:50:49;no one intended it to be that. that's just what they turn out to be because no one is self critical enough to realise that microservices don't solve anything.;-1;-1
kcckrre;Reddit;2023-12-07 11:17:52;an answer that works is depends on the usecase. our company used to have multiple microservices bundled together for a release. idk why. this meant a bug in another team's code blocked us from high urgency fixes. moving to an actual microservices arch helped speed up releases by a looot. months became days for releases.;0;0
kcctth1;Reddit;2023-12-07 13:10:03;i'm currently in a system that uses microservices for modern solutions while still maintaining a legacy monolith until we have time to break it out completely. i like developing in our microservices and despise developing in the monolith. we use a fork of netflix's eureka service discovery tool to hook all our microservices together and it's pretty nice.;1;1
kchnv0u;Reddit;2023-12-08 12:57:48;guys what if all functions had network latencies? guy about to invent microservices;-1;-1
kccnrx1;Reddit;2023-12-07 11:58:46;microservices suck but nothing will sell me on a giant monolith. giant monoliths are a whole level of suck to whatever you will deal in microservices;-1;-1
kce6d4s;Reddit;2023-12-07 19:05:48;as an honest counterpoint i like working with microservices because the interface is clear and noone can screw around with it once it's established. it also has testability built in. other aspects do suck for sure and some people go way too micro with their microservices but breaking down a large problem into digestible blocks with clear interfaces has helped me personally deal with larger problems as well as delegate work. not saying that you can't do that with monolithic systems just that the incentives for developers push them in different directions.;1;1
kcd2xqe;Reddit;2023-12-07 14:35:10;there's only the bullet lodged in your skull after choosing microservices.;-1;-1
kchyx9u;Reddit;2023-12-08 14:40:30;is the bot using microservices?;0;0
kcjzf86;Reddit;2023-12-08 22:41:30;any synchronous communication between microservices is a recipe for disaster including datastore calls. sorry are you saying that loading data from database should be done in an async manner? genuinely curious about this it's the first time i hear about it.;-1;-1
kcd6z1x;Reddit;2023-12-07 15:07:35;we still do. this is not a picture of a microservice architecture.;0;0
kcdm32v;Reddit;2023-12-07 16:53:23;you need good logging practices and distributed tracing to make large microservice deployments work if you dont have those things debugging is a nightmare;-1;-1
kccmrpg;Reddit;2023-12-07 11:45:21;badly designed monoliths are bad. badly designed microservice architectures are worse. the problem is that it's easier to fuck up with microservices and it's way harder to unfuck. microservices have their place. but they're far from silver bullets.;-1;-1
