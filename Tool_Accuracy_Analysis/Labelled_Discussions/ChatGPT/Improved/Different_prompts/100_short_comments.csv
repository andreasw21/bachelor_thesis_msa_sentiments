ID;Source;CreationDate;Content;ManualSentiment;CalculatedSentiment
23453676;HackerNews;2020-06-08;still don't need microservices. what you're referring to is just soa which has been around for a couple of decades. microservices typically outnumber engineers or aren't too far off.;-1;-1
23450266;HackerNews;2020-06-07;if you have ten people working fulltime on it it is not a microservice it is just a service.i think the discussion about microservices has suffered more than anyone realises from a lack of shared understanding about what a microservice actually is.;-1;0
23450219;HackerNews;2020-06-07;microservice testing come with version combination hell.if you have 10 microservices each of which can be on one of two versions that's 1024 combinations. how do you test that?;-1;0
23450116;HackerNews;2020-06-07;stop off! drop a bunch microservices into the same network without any access control and you don't have a physical barrier at all! in fact it becomes even harder to have a clue as to what's interfacing with what unless you can observe your inter process traffic.;-1;0
23449910;HackerNews;2020-06-07;at a goto talk an uber engineer said they had so many microservices it was impossible to really count how many they had;-1;0
23449884;HackerNews;2020-06-07;microservices make the boundary between units defined and forces api design on those boundaries no it doesn't. google distributed monolith to read some horror stories.bad architecture or good architecture without enough quality control over time will cause these issues one way or another.there's no silver bullet for this.;0;1
38088383;HackerNews;2023-10-31;testing hugely via expensive integration tests or e2e is needed no matter which software you have. and you could easily fall into doing that for microservice architectures. however a common way is rather having contract tests. google fowler's article for it;-1;0
38082191;HackerNews;2023-10-31;maybe logging should be a microservice....;0;0
38082454;HackerNews;2023-10-31;team size is probably the most important factor that should influence the choice about microservices. unfortunately there was a period when it looked like every project and every team had to adopt them or be declared a dinosaur.;-1;0
38077876;HackerNews;2023-10-31;in the department i work there's a lot of microservices about 56 so 56 teams. but everything is quarkusspring java and nothing else.;0;0
38075700;HackerNews;2023-10-30;really doesn't make sense to me that people jump to microservices rather than creating module boundaries in their monolith.;-1;0
38076765;HackerNews;2023-10-30;ymmv but i think you can only do that if you have a monorepo with the shared library and all the microservices;0;0
38076411;HackerNews;2023-10-30;microservices don't cost as much if you deploy them everywhere so you get both vertical and horizontal scaling without lookup cost.of course then you need the same stack which allows multiple apps deployed everywhere.;1;0
38077939;HackerNews;2023-10-31;i look forward to 2030 when microservices are all the rage. anyone who avoids the temptation to tear down and rebuild their entire org as a monolith will be way ahead of the curve.;1;0
38074617;HackerNews;2023-10-30;microservices not being able to talk to each other the network basically never comes up.what you are saying is outright ridiculous.;-1;0
38072897;HackerNews;2023-10-30;can you point to a comment on hn saying microservices are never justified?;0;0
38073768;HackerNews;2023-10-30;open source projects rarely involve live services or providing saas. in those situations i think microservices are much more helpful;1;1
38071736;HackerNews;2023-10-30;microservices is a newer term than soa.;0;0
38070872;HackerNews;2023-10-30;if your company has a microservice architecture but doesn't have proper knowledge on how should they communicate how should they share code etc then it is the worst thing possible.;-1;0
hgs6zn9;Reddit;2021-10-15 22:31:59;i agree that most companies don't need microservices but that's because most companies are small. a large portion of developers on the other hand do because large companies hire a ton of people.;0;-1
hgrbb7o;Reddit;2021-10-15 18:52:06;currently in the middle of a multi year migration from monolith to microservices and everything everything about the microservices solution is better. slightly more complexity in terms of deployment but being able to upgrade dependencies in isolation is a huge win.;1;-1
hgrra2i;Reddit;2021-10-15 20:41:00;i prefer monolithic design but when i see a system using python functions to send individual commands by opening ssh connections to another device's command line for each microservices sound like a huge improvement nevertheless.;1;1
hgt83g3;Reddit;2021-10-16 03:36:34;first it was monoliths are bad and everyone should use microservices. now it's the opposite lol. i say just do what makes sense for your application. monoliths has its place and microservices has its place.;0;0
hgu8ia5;Reddit;2021-10-16 10:27:05;i can't take the we have many developers so we need microservices nonsense anymore. your workflow is shit? you don't understand what modularity is? you think you have to enforce that through a grpc framework? maybe pick a different career.;-1;0
hgsw3yw;Reddit;2021-10-16 01:51:12;i swear to god people need to shut the fuck up about monoliths and microservices and just build their shit with some foresight. fuck off;-1;0
hgst8fc;Reddit;2021-10-16 01:27:12;i disagree with many commenters that microservices are mainly good for scale. i think robustness is a more valid reason to use microservices. i believe all programmers should know how to program in erlang just to learn the basics of good concurrency programming.;1;1
hgttjj3;Reddit;2021-10-16 07:06:56;the biggest annoyance regarding microservices is that everyone builds their own. with no controls over who is building what you end up with 20 getorder services all slightly different perpetuating the problem because a newcomer doesnt trust any of them.;-1;0
hgsdx3t;Reddit;2021-10-15 23:23:42;ive always been of the mind that microservice architectures are an expression of conways law. thats not a value judgement on microservices they arent good or bad they just are and they have trade offs.;0;1
hgr5tf3;Reddit;2021-10-15 18:14:39;microservices primarily allow developer scale in my experience you omitted word complexity. microservices scale process complexity upwards. the moment you opt to do them you fall for all network fallacies.;-1;-1
hgt8l0i;Reddit;2021-10-16 03:40:55;large companies also buy many smaller ones in a sense collecting selfcontained services once they've matured and teams already silo'd off from the rest of the developers and thus predisposed to microservices by conway's law.;1;0
hgv3l4j;Reddit;2021-10-16 16:30:17;that's what's happening where i work. new managers came in and declared we're going to use microservices. i'm powerless to stop them and for the reasons you mentioned we're going to be in a world of hurt soon.;-1;0
hgz1yki;Reddit;2021-10-17 13:32:53;ah yes.. microservices solving dependencies... by splitting everything into 50 deployments so you can just update the dependencies on the one thing you care about this week and 4050 of the things just code rot.;1;0
hguv6u0;Reddit;2021-10-16 15:16:35;that was my point. too many microservice advocates think their architecture prevents intermixing of concerns.;-1;0
hh62ly0;Reddit;2021-10-19 01:17:31;true but by using microservices and containerizing them you can scale more efficiently. there are a lot of benefits to microservices.;1;0
hgstq2o;Reddit;2021-10-16 01:31:18;microservices are essentially impossible to reason about by design. it is seperation of concerns taken to the extreme. you aren't supposed to be able to reason about other services because that means you havent seperated concerns enough.;1;0
hgsw2ch;Reddit;2021-10-16 01:50:49;no one intended it to be that. that's just what they turn out to be because no one is self critical enough to realise that microservices don't solve anything.;-1;0
kchnv0u;Reddit;2023-12-08 12:57:48;guys what if all functions had network latencies? guy about to invent microservices;-1;0
kccnrx1;Reddit;2023-12-07 11:58:46;microservices suck but nothing will sell me on a giant monolith. giant monoliths are a whole level of suck to whatever you will deal in microservices;-1;-1
kcd2xqe;Reddit;2023-12-07 14:35:10;there's only the bullet lodged in your skull after choosing microservices.;-1;0
kchyx9u;Reddit;2023-12-08 14:40:30;is the bot using microservices?;0;0
kcjzf86;Reddit;2023-12-08 22:41:30;any synchronous communication between microservices is a recipe for disaster including datastore calls. sorry are you saying that loading data from database should be done in an async manner? genuinely curious about this it's the first time i hear about it.;-1;0
kcd6z1x;Reddit;2023-12-07 15:07:35;we still do. this is not a picture of a microservice architecture.;0;0
kcdm32v;Reddit;2023-12-07 16:53:23;you need good logging practices and distributed tracing to make large microservice deployments work if you dont have those things debugging is a nightmare;-1;0
kccmrpg;Reddit;2023-12-07 11:45:21;badly designed monoliths are bad. badly designed microservice architectures are worse. the problem is that it's easier to fuck up with microservices and it's way harder to unfuck. microservices have their place. but they're far from silver bullets.;-1;0
32324785;HackerNews;2022-08-02;this is not inherently true. whether it's true or not is down to your implementation. you can most certainly have reliability and security problems while doing microservices.obviously i didn't claim you cannot have reliability or security problems while doing microservices.;-1;0
32272137;HackerNews;2022-07-29;microservices can most definitely be tightly coupled. the same way that most oop code i have seen is a spiderweb of tight dependencies. i bet that code you think is loosely coupled probably isn't. most developers have no clue what loosely coupled actually means.;-1;0
32272020;HackerNews;2022-07-29;you mean a client server system? that is not microservices.;0;0
32271934;HackerNews;2022-07-29;yep because it is true. microservices is just the latest silver bullet that inexperienced developers think will save themselves from doing bad work. the reality is that microservices is inherently more complex than monoliths. so the more you can discourage developers from making that mistake the better.;-1;-1
32271878;HackerNews;2022-07-29;100 agree. you can write bad code using both monoliths and microservices. however microservices are inherently more complex and slower than monoliths because of the added encoding decoding and network overhead.;-1;-1
32271847;HackerNews;2022-07-29;nothing stops microservices from having the same problems. plus all the extra problems you get with distributed systems timing issues logical dependencies etc.;-1;0
32261447;HackerNews;2022-07-28;really? youve never seen an overengineered microservices design that could be a much simpler express app?;-1;0
32259135;HackerNews;2022-07-28;i dont know if you will need microservices or not. i can tell you that many developers and teams will do microservices poorly and will not get an advantage out of it and will have an even more complex ball of mud to maintain.;-1;-1
32253049;HackerNews;2022-07-27;microservices suck when you need to make a process faster so you run a profiler and figure out that 90 of the workload is handling the http requests between the services.;-1;0
32251412;HackerNews;2022-07-27;isn't the devil in the details? some problems are solved better as microservices. some problems are solved better as monoliths. ultimately it is the lack of maintaining the solution we choose that leads to the grass is greener fad chase.;0;1
32251220;HackerNews;2022-07-27;this can be accomplished using a modular monorepo. different teams simply manage different directories or modules of the same repo.breaking up an app into microservices is total overkill in this instance...;-1;0
32251005;HackerNews;2022-07-27;aren't microservices nice because they allow you to have different teams own different parts of the code and minimize the communication overhead?;1;0
10338171;HackerNews;2015-10-06;i see the strengths and weaknesses in the article and the complaints from all the comments here but i still find the trade off of microservices worth it. it requires sophisticated ops and well defined deployment tools and dev environments but we have to handle ten billion requests a month on our stack. the ease at which we handle that scale and the speed at which engineers get to iterate and deploy makes microservices all the more worth it.;1;0
10338414;HackerNews;2015-10-06;the main benefit of microservices is that each team can ideployi their service independently.this is really useful to reduce the level of required of interaction and pressure between teams.;1;0
16202972;HackerNews;2018-01-22;i use microservices and i experienced many benefits. more in general it follows unix phylosophy.;1;0
17030691;HackerNews;2018-05-09;yes i've always seen microservices as an organizational win over any type of technical win.basically having separate teams work on one code base with one deployment cycle can sometimes be really tough. and sometimes you can get a big win by splitting up this service so multiple teams can each have their own service to focus on.this whole team of one developer supporting 8 microservices seems ludicrious to me.;1;0
ewhjy6k;Reddit;2019-08-10 06:15:10;we switched to microservices but it was at huge cost to our company. it took us 2 years to complete the switch over and we have gained easier deployments... awesome... but in that time we could have taken on other projects and probably earned millions of dollars. we might end up saving overall money if we develop for our application for another 15 years.;-1;0
ewhm8ps;Reddit;2019-08-10 06:53:17;our microservices include a postgres database a python api in lambdas data presentation layer ec2 with linux static file server s3 and there are third party services like cognito auth apigateway routing is this not a series of micro services? we are a small team. we use serverless framework and aws cli to deploy and its very powerful.;0;0
ewh5k82;Reddit;2019-08-10 02:54:07;anyone who complains about microservices has clearly not been on a project where it was implemented correctly. microservices are great;1;0
ewgl643;Reddit;2019-08-09 22:59:00;microservices are just soa in cloud. change my mind.;0;0
ewgpo6n;Reddit;2019-08-09 23:50:01;why do we need services so small that we call them microservice. can't we use services or nothing? seems like a lot of unnecessary work i'm being a little facetious;-1;0
ewgjo86;Reddit;2019-08-09 22:42:51;as a general rule i think a microservice makes sense when the service is general enough to benefit many separate users. a databaseserver for example. the same database can help everybody in your organization so don't build your own rdbms. id nobody else but some parts of your application needs a given functionality it would seem to make sense to make it part of your application. the main benefit of a microservice is scalability which means you can run it on multiple servers if needed. but if only your application needs it then you can scale by running your application on multiple servers. in other words it would seem to often make sense to make the whole application into a single microservice not divide it into several of them.;1;0
ewh2a4v;Reddit;2019-08-10 02:14:23;what exactly is a microservice or monolith?;0;0
ewhz60u;Reddit;2019-08-10 11:46:06;this is exactly the thinking that my company needs to adopt. they don't understand that when you only have a dev team of 10 and only work on abandonware during a project once every 20 years microservices hurt more than they help.;-1;0
ewgm8ir;Reddit;2019-08-09 23:11:02;ultimately the problem that most people actually want to solve with microservices is about clear interface boundaries. you can clearly define interface boundaries through judicious use of functions modules classes libraries etc. it's about using the right abstraction level for separation. most teams will never really need a dozen different services but they may need several dozen modules librarie.;0;0
ewh229z;Reddit;2019-08-10 02:11:47;don't do it because of separation of concerns do it because your eng org is growing so big that the only way to push updates quickly is to break apart the code into smaller units of deployment microservices otherwise everyone will have a dependency on a single ops team which can't scale with the rest of the organization. individual teams own everything for their services from build tooling through deployment and operation.;0;0
ewhheaz;Reddit;2019-08-10 05:35:39;i mean wtf were they thinking? if you refer to your engineering department as a team you are way way to small for microservices.;-1;0
ewle6td;Reddit;2019-08-11 12:36:58;when they're done well they are superior to a monolith. only in some cases. in other cases monolith is better. it depends on the size of the project the organization creating and maintaining the software and performance characteristics of the system. microservice architecture is not intrinsically better. it's a tool that applies in some cases. developers have the bad habit of wanting to do things like the big boys do it in high profile companies to play with more exotic or new approaches and technologies or to collect keywords to their resume. all those are selfish motives and often lead to project failure.;0;0
ewhx0u8;Reddit;2019-08-10 10:48:15;both microservice and monolith applications couldnwould use all the rest of the pieces you described. in this context 'services' is usually specifically referring to discrete backend components of which in your example would only be the lambda functions. microservices are the opposite of a monolithic application aka having all your application in one program.;0;0
ewi8ptm;Reddit;2019-08-10 15:08:58;my team of about 12 people own around 50 microservices. at any release we're only updating at max 5 of them. any business functionality that is not related to core domain but uses our data is made a separate microservice. most of them haven't seen any update in over a year. i'm not sure if this is a good solution since it takes massive space but we don't encounter a lot of problems due to architecture.;0;1
ewh2yr9;Reddit;2019-08-10 02:22:26;eh netflix and google are the two companies i'd point to as important in the pioneering of microservices.;0;0
ewgllaj;Reddit;2019-08-09 23:03:42;anytime there is a discussion about microservices my first question is to define microservice. for some people they can be as small as a service per function and others as large as all of authentication. how they are defined makes a huge difference in effort and outcomes. we are a small team and do services. most of which are closer to authentication size but some are lambda functions. but i do agree with the gp that there is no reason to split until you need to. a service boundary should emerge while building the software. i liken it to how an amoeba grows and then splits at some point.;0;0
ewi6j6x;Reddit;2019-08-10 14:32:30;i had a boss force me to do microservices as the sole developer of a project. it's good not to work there anymore.;-1;1
ewh18fb;Reddit;2019-08-10 02:01:51;linux isn't a service of course there wouldn't be microservices. microservices aren't about modularity. note that this isn't microservice advocacy microservices are wrong for small teams but not because of the linux kernel.;-1;0
ewhfm00;Reddit;2019-08-10 05:09:33;well you are pretty close to being right imo. however microservices are just a kind of module. decouple things that dont require a dependency on each other. no need for them to cross polenate. the question is never how small to go or how big to go. it's what are the logical modules to my system. then design around that. you should just write libraries and expose some features of the library via a service front end as needed. if your service is one method so be it. if its 20 whatever. as long as the division of concerns makes sense.;0;-1
ewi448u;Reddit;2019-08-10 13:45:48;i've seen this go so far where teams actually think this is microservices. i've actually seen people think a api oriented design to prepare for let's say a spa is microservices. lol.;0;0
ewijixr;Reddit;2019-08-10 17:23:29;depends on what you call a project. aws is easily 1000 people and a high level service effective touches large portions of that. you could maybe say they are all services not microservices but aws is still one business unit.;0;0
ewh7rax;Reddit;2019-08-10 03:23:06;one service per function kill me now i do not want this. we develop in microservices we put for instance everything to do with user communications in one microservice well that's actually a class library mostly now anything to do with our software distribution system is in another microservice. anything for our internal db is in another. it works well but debugging kind of stinks as we have two dozen launch configs in vscode depending on what you need to spin up for testing. we are working on a unified solution file where our big honking asp.net 4.6 app can live in the same solution as our microservices so you can hit debug and go. i do love that it clearly demarks the limit of the scope of changes for a pull request. if something changes things in more than one microservice beyond the most trivial of change fail. if it hits the mvc and a microservice too fail. it's at least beneficial for that;0;1
ewgllk7;Reddit;2019-08-09 23:03:47;you're hitting some of the benefits but that isnt why microservices started out as a useful thing. the main benefit at large companies was independently scaling services. why scale to ten replicas of my monolith if i just need to split out service foo that is taking out all the traffic?;1;0
ewgyj5a;Reddit;2019-08-10 01:30:16;multiple repos ! microservices. you can have microservices in monorepo.;0;0
ewgyxll;Reddit;2019-08-10 01:34:59;monorepo does not mean monolith. you can have microservices in monorepo.;0;0
ewk49j8;Reddit;2019-08-11 00:31:45;but microservices don't magically scale better than monoliths given the same number of computes. how specifically did you determine that breaking up your monolith would scale better with more computes relative to the monolith with more computes?;-1;1
ewp2zlv;Reddit;2019-08-12 19:52:19;that sounds like a microservices then.;0;0
ewgjk4s;Reddit;2019-08-09 22:41:37;monorepo doesn't imply monolith nor does it imply microservices. famously google runs a monorepo and they do have microservices.;0;0
ewhw7dy;Reddit;2019-08-10 10:26:44;hi i might have a realworld scenario. we are team of 4 maintainig a monolith 1 microservices. our app does some heavyweight image processing some ai lot of prepost processing. although from the feature point of view the image processing is 5 of the features users pay for it uses 99 of cpu and memory we are paying for. the monolith runs in a standard iis and does everything except the image processing which is done in kubernetes some scaling. the image processing needs a lot of cpu and ram but the main bottleneck is memory throughput. we can add faster machine to have more cores or bigger memory but it does not help a lot.;-1;0
ewhsehf;Reddit;2019-08-10 08:54:34;say you send emails for different stuff reset password. instead of adding it to your main web application you create a separate project which basically provides a rest api. this runs on its own container its own web server etc. this is you email microservice.;0;0
ewhr8qx;Reddit;2019-08-10 08:29:07;the app is some application or information machine that has inputs and outputs. for example at the enterprise level we use microservices with kubernetes where different url paths map to different component services such as user authentication content management commenting multimedia specific digital products in nodevuejs etc...;0;0
ewhqd64;Reddit;2019-08-10 08:10:50;microservices are apis too only difference is that the api boundary is a network layer like http instead of a function call.;0;0
ewgh1bm;Reddit;2019-08-09 22:14:13;i agree. i do think that claiming it's the most overrated pattern in web development history is a bit hyperbolic. i get that some people are skeptical but if the goal of good software is highly decoupled and cohesive code that microservices are essentially born from that idea which is a good idea.;1;1
ewh56u6;Reddit;2019-08-10 02:49:20;the key distinction with a microservice design is that you don't speak in the same binary. binary separation isn't happening or enforced at these companies.;0;0
ewhe089;Reddit;2019-08-10 04:46:54;well define complicated? controllers may call many methods in a row to do their work but each method is really simple. for instance a user pastes in a list of computer names. we will save them in a request which can be approved by a peer or their manager. but there is business logic too. first we need to make sure computers are in the right group so we call the ad microservice to limit the computers to those in that user's scope of ous they can touch. we get back the good devices and use that to except out the bad ones. then we have to check and see if the remaining devices aren't in a lock down group for change control so our change control microservice is called to check if the devices are valid for the users chosen date. there might be one or two more microservice calls after that but they're all abstracted into repository methods anyway so it's like calling a method. except the methods called can be used by others in the company outside our tech stack because anyone can do a rest post or get. it would be easier to work in one monolithic app but there are lots of known cons with that apporhc.;0;0
ewj5msx;Reddit;2019-08-10 20:27:51;thanks for the discussion! i concur that's a decent example where you can take advantage of special instance types and want to maximize it. i guess i was misleading with i haven't seen a real world example. i know they exist but in the 510 projects i've worked on i didn't see a use case. these have mostly been crud or ecommerce apps though like most web devs so ymmv if you're in a different specialty. i also should change my view on deployment as you suggest. i saw other comments about how microservices help when release management becomes a pain point and 100 agree. pros and cons definitely depends on the business domain org structure and code quality.;0;0
ewi7l8s;Reddit;2019-08-10 14:50:42;all application servers i have worked with the last ca 10 years have supported deploys without downtime. there are advantages of have microservices but this is not one of them. if anything it is harder to deploy microservices.;-1;0
ewi2k5o;Reddit;2019-08-10 13:11:50;mostly because we're talking about microservices here and how to get there.;0;0
ewius5m;Reddit;2019-08-10 19:11:27;im referring to horizontal scaling. theres no effective difference from the perspective of being able to handle high load between scaling out a single monolith vs scaling out one or more microservices.;0;0
