ID;Source;Creation Date;Content;Sentiment;Senti4SDSentiment;ChatGPTSentiment
23453676;HackerNews;2020-06-08;still don't need microservices. what you're referring to is just soa which has been around for a couple of decades. microservices typically outnumber engineers or aren't too far off.;-1;0
23450266;HackerNews;2020-06-07;if you have ten people working fulltime on it it is not a microservice it is just a service.i think the discussion about microservices has suffered more than anyone realises from a lack of shared understanding about what a microservice actually is.;-1;0
23450219;HackerNews;2020-06-07;microservice testing come with version combination hell.if you have 10 microservices each of which can be on one of two versions that's 1024 combinations. how do you test that?;-1;0
23450116;HackerNews;2020-06-07;stop off! drop a bunch microservices into the same network without any access control and you don't have a physical barrier at all! in fact it becomes even harder to have a clue as to what's interfacing with what unless you can observe your inter process traffic.;-1;0
23449910;HackerNews;2020-06-07;at a goto talk an uber engineer said they had so many microservices it was impossible to really count how many they had;-1;0
23449884;HackerNews;2020-06-07;microservices make the boundary between units defined and forces api design on those boundaries no it doesn't. google distributed monolith to read some horror stories.bad architecture or good architecture without enough quality control over time will cause these issues one way or another.there's no silver bullet for this.;0;-1
38088383;HackerNews;2023-10-31;testing hugely via expensive integration tests or e2e is needed no matter which software you have. and you could easily fall into doing that for microservice architectures. however a common way is rather having contract tests. google fowler's article for it;-1;0
38082191;HackerNews;2023-10-31;maybe logging should be a microservice....;0;0
38082454;HackerNews;2023-10-31;team size is probably the most important factor that should influence the choice about microservices. unfortunately there was a period when it looked like every project and every team had to adopt them or be declared a dinosaur.;-1;0
38077876;HackerNews;2023-10-31;in the department i work there's a lot of microservices about 56 so 56 teams. but everything is quarkusspring java and nothing else.;0;0
38075700;HackerNews;2023-10-30;really doesn't make sense to me that people jump to microservices rather than creating module boundaries in their monolith.;-1;0
38076765;HackerNews;2023-10-30;ymmv but i think you can only do that if you have a monorepo with the shared library and all the microservices;0;0
38076411;HackerNews;2023-10-30;microservices don't cost as much if you deploy them everywhere so you get both vertical and horizontal scaling without lookup cost.of course then you need the same stack which allows multiple apps deployed everywhere.;1;0
38077939;HackerNews;2023-10-31;i look forward to 2030 when microservices are all the rage. anyone who avoids the temptation to tear down and rebuild their entire org as a monolith will be way ahead of the curve.;1;0
38074617;HackerNews;2023-10-30;microservices not being able to talk to each other the network basically never comes up.what you are saying is outright ridiculous.;-1;0
38072897;HackerNews;2023-10-30;can you point to a comment on hn saying microservices are never justified?;0;0
38073768;HackerNews;2023-10-30;open source projects rarely involve live services or providing saas. in those situations i think microservices are much more helpful;1;1
38071736;HackerNews;2023-10-30;microservices is a newer term than soa.;1;0
38070872;HackerNews;2023-10-30;if your company has a microservice architecture but doesn't have proper knowledge on how should they communicate how should they share code etc then it is the worst thing possible.;-1;0
hgs6zn9;Reddit;2021-10-15 22:31:59;i agree that most companies don't need microservices but that's because most companies are small. a large portion of developers on the other hand do because large companies hire a ton of people.;0;0
hgrbb7o;Reddit;2021-10-15 18:52:06;currently in the middle of a multi year migration from monolith to microservices and everything everything about the microservices solution is better. slightly more complexity in terms of deployment but being able to upgrade dependencies in isolation is a huge win.;1;-1
hgrra2i;Reddit;2021-10-15 20:41:00;i prefer monolithic design but when i see a system using python functions to send individual commands by opening ssh connections to another device's command line for each microservices sound like a huge improvement nevertheless.;1;0
hgt83g3;Reddit;2021-10-16 03:36:34;first it was monoliths are bad and everyone should use microservices. now it's the opposite lol. i say just do what makes sense for your application. monoliths has its place and microservices has its place.;1;0
hgu8ia5;Reddit;2021-10-16 10:27:05;i can't take the we have many developers so we need microservices nonsense anymore. your workflow is shit? you don't understand what modularity is? you think you have to enforce that through a grpc framework? maybe pick a different career.;-1;0
hgsw3yw;Reddit;2021-10-16 01:51:12;i swear to god people need to shut the fuck up about monoliths and microservices and just build their shit with some foresight. fuck off;-1;0
hgst8fc;Reddit;2021-10-16 01:27:12;i disagree with many commenters that microservices are mainly good for scale. i think robustness is a more valid reason to use microservices. i believe all programmers should know how to program in erlang just to learn the basics of good concurrency programming.;1;1
hgttjj3;Reddit;2021-10-16 07:06:56;the biggest annoyance regarding microservices is that everyone builds their own. with no controls over who is building what you end up with 20 getorder services all slightly different perpetuating the problem because a newcomer doesnt trust any of them.;-1;-1
hgsdx3t;Reddit;2021-10-15 23:23:42;ive always been of the mind that microservice architectures are an expression of conways law. thats not a value judgement on microservices they arent good or bad they just are and they have trade offs.;0;1
hgr5tf3;Reddit;2021-10-15 18:14:39;microservices primarily allow developer scale in my experience you omitted word complexity. microservices scale process complexity upwards. the moment you opt to do them you fall for all network fallacies.;-1;-1
hgt8l0i;Reddit;2021-10-16 03:40:55;large companies also buy many smaller ones in a sense collecting selfcontained services once they've matured and teams already silo'd off from the rest of the developers and thus predisposed to microservices by conway's law.;1;0
hgv3l4j;Reddit;2021-10-16 16:30:17;that's what's happening where i work. new managers came in and declared we're going to use microservices. i'm powerless to stop them and for the reasons you mentioned we're going to be in a world of hurt soon.;-1;0
hgz1yki;Reddit;2021-10-17 13:32:53;ah yes.. microservices solving dependencies... by splitting everything into 50 deployments so you can just update the dependencies on the one thing you care about this week and 4050 of the things just code rot.;1;0
hguv6u0;Reddit;2021-10-16 15:16:35;that was my point. too many microservice advocates think their architecture prevents intermixing of concerns.;-1;0
hh62ly0;Reddit;2021-10-19 01:17:31;true but by using microservices and containerizing them you can scale more efficiently. there are a lot of benefits to microservices.;1;1
hgstq2o;Reddit;2021-10-16 01:31:18;microservices are essentially impossible to reason about by design. it is seperation of concerns taken to the extreme. you aren't supposed to be able to reason about other services because that means you havent seperated concerns enough.;1;0
hgsw2ch;Reddit;2021-10-16 01:50:49;no one intended it to be that. that's just what they turn out to be because no one is self critical enough to realise that microservices don't solve anything.;-1;0
kchnv0u;Reddit;2023-12-08 12:57:48;guys what if all functions had network latencies? guy about to invent microservices;-1;0
kccnrx1;Reddit;2023-12-07 11:58:46;microservices suck but nothing will sell me on a giant monolith. giant monoliths are a whole level of suck to whatever you will deal in microservices;-1;0
kcd2xqe;Reddit;2023-12-07 14:35:10;there's only the bullet lodged in your skull after choosing microservices.;-1;0
kchyx9u;Reddit;2023-12-08 14:40:30;is the bot using microservices?;0;0
kcjzf86;Reddit;2023-12-08 22:41:30;any synchronous communication between microservices is a recipe for disaster including datastore calls. sorry are you saying that loading data from database should be done in an async manner? genuinely curious about this it's the first time i hear about it.;-1;0
kcd6z1x;Reddit;2023-12-07 15:07:35;we still do. this is not a picture of a microservice architecture.;0;0
kcdm32v;Reddit;2023-12-07 16:53:23;you need good logging practices and distributed tracing to make large microservice deployments work if you dont have those things debugging is a nightmare;-1;1
kccmrpg;Reddit;2023-12-07 11:45:21;badly designed monoliths are bad. badly designed microservice architectures are worse. the problem is that it's easier to fuck up with microservices and it's way harder to unfuck. microservices have their place. but they're far from silver bullets.;-1;-1
