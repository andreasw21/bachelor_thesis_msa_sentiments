ID;Source;Creation Date;Content;Sentiment;ChatGPTSentiment
23453676;HackerNews;2020-06-08;still don't need microservices.  microservices typically outnumber engineers or aren't too far off;-1;-1
23453639;HackerNews;2020-06-08;microservice multiple independently deployable units. these problems go away when you go microservices. my point is in the discussion microservices vs monolith you need to consider a whole bunch of dimensions to figure our what is the best fit for your org;0;1
23453562;HackerNews;2020-06-08;in my experience microservices grew to prominence not because of their technical merit but because it allowed engineering leadership to not have to make decisions.  there are reasons for microservices at big scales if everyone is still fitting in the same roomauditorium for an allhands i would seriously doubt that they're needed;-1;1
23453068;HackerNews;2020-06-08;my point is that microservice architecture is not just the singular pattern of code talking over the internet but a collection of patterns and techniques focusing on when and where to split up code and to focusing on the communication strategy you use. you can 'get around' microservice architecture by not doing it;1;0
23452837;HackerNews;2020-06-08;my thesis was about tracing and debugging in microservicestyle systems;-1;0
23452626;HackerNews;2020-06-08;microservices do have a good usecase even for smaller teams in some cases where functionality is independent of existing service.  think of something like linkedin front end making calls directly to multiple microservices in the backend one that returns your contacts one that shows people similar to you one that shows who viewed your profiles one that shows job ads etc;-1;1
23452097;HackerNews;2020-06-08;but unfortunately microservices becomes a religion a cargo cult and companies have hundreds of tiny little services.  but are they microservices? don't care;-1;-1
23451680;HackerNews;2020-06-08;microservices have some inherent advantages mainly that you can manage modify and deploy one service at a time without taking downredeploying the rest of your applications;1;1
23451147;HackerNews;2020-06-07;in my experience the benefits of microservices are primarily better delineated responsibilities and narrower scope and secondary benefits tend to fall out from these.  microservices do not tend to grossly exacerbate the problem in my experience anyway.  microservices tend to create boundaries that are more strictly enforced. there's also a number of benefits as far as nontechnical management of microservices;1;1
23450591;HackerNews;2020-06-07;i see microservices as a peopleteam architecture;0;0
23450438;HackerNews;2020-06-07;microservices are the actor model erlang or akka except they require lots of devops work being on call for x services every night and a container management system like kubernetes to be manageable. actors are a simple solution to the same problems microservices solve and have existed since the 1970s. so in my opinion microservices are a symptom of an abusive relationship with languages and tools that don't love us grow with us or care about what we care about;-1;1
23450342;HackerNews;2020-06-07;microservices isn't the only solution or the best solution.  the early systems circa 20002005 were built on top of pubsub systems like tibco rv or 29west this was effectively microservices before the term was used popularly;0;1
23450266;HackerNews;2020-06-07;if you have ten people working fulltime on it it is not a microservice it is just a service. i think the discussion about microservices has suffered more than anyone realises from a lack of shared understanding about what a microservice actually is;-1;1
23450259;HackerNews;2020-06-07;microservices are useful but not for the reasons listed here or the reasons often assumedpersonally i'm more a fan of realm of responsibility scoped services to decouple technologiesdatastores of parts of a system that do not interact by design for instance your user account credentials handling from literally anything else and then use a system like kafka with producerowned format to have a common data bus that can tolerate services that process data asyncronously or even things that keep users in the typical refresh loop dying for a bit;1;1
23450219;HackerNews;2020-06-07;microservice testing come with version combination hell. if you have 10 microservices each of which can be on one of two versions that's 1024 combinations;-1;0
23450158;HackerNews;2020-06-07;a major benefit to microservices over monoliths that i havent seen mentioned yet is testability.  with a large monolith a single process might touch a staggering number of the aforementioned dependencies whereas something constrained to be smaller in scope a microservice will have a manageable number. i enjoy writing integration and api tests of a microservice. microservices allow for a healthy pyramid of tests;1;1
23450116;HackerNews;2020-06-07;stop off! drop a bunch microservices into the same network without any access control and you don't have a physical barrier at all! in fact it becomes even harder to have a clue as to what's interfacing with what unless you can observe your inter process traffic;-1;-1
23449910;HackerNews;2020-06-07;at a goto talk an uber engineer said they had so many microservices it was impossible to really count how many they had;-1;1
23449884;HackerNews;2020-06-07;microservices make the boundary between units defined and forces api design on those boundaries no it doesn't;0;0
23449768;HackerNews;2020-06-07;this misses some of the main reason microservices are nice its much easier to change code that isnt woven throughout a code base.  microservices make the boundary between units defined and forces api design on those boundaries;1;1
23449762;HackerNews;2020-06-07;one of my favorite things about using microservice is that you can use multiple languages;1;1
23449744;HackerNews;2020-06-07;a recent blog post by neobank monzo explains that they have reached the crazy amount of 1500 microservices a ratio of 10 microservices per engineer thats wild.  microservices are mostly beneficial organizationally a small team can own a service and be able to communicate with the services of other small teams;1;1
23449738;HackerNews;2020-06-07;microservices are middleware.  i really only ever use microservices to handle crosscutting concerns that are not directly implemented by the backend but have a frontend requirement;1;-1
23449672;HackerNews;2020-06-07;microservices were never about code architecture they were an organisational pattern to enable teams to own different services.  most microservices don't actually look micro to those implementing them because it's really just a lot of services;0;1
38174497;HackerNews;2023-1-07;it's not like microservices don't also give you chances to mess your data up. i struggle to see how microservices fix this for people having worked primarily with them for the past 6 years;-1;-1
38130050;HackerNews;2023-1-03;with proper devops tooling and a half decent design even a junior engineer can manage several microservices without issues.  since microservices are about scaling people as much as they are about scaling tech 10 people in one service is a lot to me in that world;1;1
38088383;HackerNews;2023-10-31;and you could easily fall into doing that for microservice architectures;-1;1
38086139;HackerNews;2023-10-31;he wanted microservices;-1;0
38084540;HackerNews;2023-10-31;the theory is that microservices are supposed to be independent and selfcontained but such a wonderful implementation of ddd is a theoretical fantasy that rarely plays out in practice. if your typical microservice setup is simply distributing your call stack over a network and oftentimes that's all it is then you might as well use a language designed to operate in such a manner and reap the benefits of it.  that kind of microservice architecture only really exists as a function of the organisation's structure such that teams can work more autonomously;-1;1
38082191;HackerNews;2023-10-31;maybe logging should be a microservice;0;0
38082454;HackerNews;2023-10-31;team size is probably the most important factor that should influence the choice about microservices;-1;1
38083263;HackerNews;2023-10-31;absolutely true but also usually your business transactions happen in a business context which happens to be in a microservice. you will have distributed transactions with a distributed microservice setup but most transactions will still be be contained within a single microservice and thus be atomic and not distributed;0;1
38083186;HackerNews;2023-10-31;having few developers with a well defined context working on multiple microservices is a pain though;0;-1
38082898;HackerNews;2023-10-31;microservices are surely not about defaulting to new microservices but to capture a specific context into one service.  there can be technical reasons to split deployments into different microservices but that's not the norm.  what you describe is what happens when people get microservices wrong. in the end i like the viewpoint that microservices are a deployment pattern not so much an architecture pattern.  and without technical details execution environment protocols you couldn't tell if it's describing multiple microservices or multiple components in one service;0;-1
38079931;HackerNews;2023-10-31;also microservices add both resilience by running many copies and fragility many loosely coupled moving parts;0;1
38077876;HackerNews;2023-10-31;in the department i work there's a lot of microservices about 56 so 56 teams;0;0
38075700;HackerNews;2023-10-30;really doesn't make sense to me that people jump to microservices rather than creating module boundaries in their monolith;-1;1
38076765;HackerNews;2023-10-30;ymmv but i think you can only do that if you have a monorepo with the shared library and all the microservices;0;0
38076540;HackerNews;2023-10-30;microservices are necessary and the best way to architect something new that is going to be used at scale.  in my experience working with monolithic architecture with 20 teams at a large tech company i have found it takes multiple years to convert to microservices;1;1
38076411;HackerNews;2023-10-30;microservices don't cost as much if you deploy them everywhere so you get both vertical and horizontal scaling without lookup cost;1;1
38077939;HackerNews;2023-10-31;i look forward to 2030 when microservices are all the rage;1;0
38074617;HackerNews;2023-10-30;microservices not being able to talk to each other the network basically never comes up;-1;1
38072897;HackerNews;2023-10-30;can you point to a comment on hn saying microservices are never justified?;0;-1
38073768;HackerNews;2023-10-30;in those situations i think microservices are much more helpful;1;1
38071736;HackerNews;2023-10-30;microservices is a newer term than soa;0;0
38070872;HackerNews;2023-10-30;if your company has a microservice architecture but doesn't have proper knowledge on how should they communicate how should they share code etc then it is the worst thing possible;-1;-1
hgs6zn9;Reddit;2021-10-15 22:31:59;i agree that most companies don't need microservices but that's because most companies are small;0;1
hgs5ewd;Reddit;2021-10-15 22:20:37;should every single rest call be in its own distinct containerwebservermicroservice? no;0;1
hgrbb7o;Reddit;2021-10-15 18:52:06;currently in the middle of a multi year migration from monolith to microservices and everything everything about the microservices solution is better;1;1
hgtgs4d;Reddit;2021-10-16 04:55:26;controversial opinion nearly every foray into microservices i've seen has been a disaster.  the intricate and complicated ways in which a microservice architecture can fail 9.  here's a simple question to determine if an engineering department is ready for microservices can we reliably scale deploy monitor and manage a monolith? if the team can't manage a single service well it is utterly foolish to think managing many services is a good idea.  i'm currently dealing with an unmitigated disaster of a codebase my company now owns via acquisition that codebase has a dozen or so microservices that don't scale with load aren't reliable make debugging a nightmare make nearly every deploy miserable fail all the time and so forth.  microservices;-1;-1
hgr0i35;Reddit;2021-10-15 17:38:35;id probably start by making microservices.  i wrote a monolith that was essentially a couple loosely coupled internal microservices of different domains;0;-1
hgrra2i;Reddit;2021-10-15 20:41:00;i prefer monolithic design but when i see a system using python functions to send individual commands by opening ssh connections to another device's command line for each microservices sound like a huge improvement nevertheless;1;1
hgt83g3;Reddit;2021-10-16 03:36:34;first it was monoliths are bad and everyone should use microservices.  monoliths has its place and microservices has its place;0;-1
hgu8ia5;Reddit;2021-10-16 10:27:05;i can't take the we have many developers so we need microservices nonsense anymore;-1;1
hgsw3yw;Reddit;2021-10-16 01:51:12;i swear to god people need to shut the fuck up about monoliths and microservices and just build their shit with some foresight;-1;-1
hgst8fc;Reddit;2021-10-16 01:27:12;i disagree with many commenters that microservices are mainly good for scale.  i think robustness is a more valid reason to use microservices;1;1
hgttjj3;Reddit;2021-10-16 07:06:56;the biggest annoyance regarding microservices is that everyone builds their own;-1;1
hgty4ad;Reddit;2021-10-16 08:02:39;i dont think microservice is superior to monolith.  if the a project needs microservice approach it has to be done that way.  problem is lot of startups going microservice for every project just because all big tech companies like uber netflix doing it.  often they think oh it just 3 or 4 microservices that will communicate over a rest api.  after 2 years of development they like 20 of microservices plus devops maintained by 3 developers.  imo if you cant design a good monolith system you definitely can't design a good microservice system.  it will allow to go microservice as needed;0;1
hgxnmwh;Reddit;2021-10-17 04:01:26;microservices suck;-1;0
hgrxkjc;Reddit;2021-10-15 21:24:42;if it's built modular enough you'll be able to microservice it later as needed.  the reason microservices are a hit is because they force modularity and separation of concerns.  generally i think that program should split out in phases that could eventually lead to microservices if the need arises 1.  you get most of the flexibility of microservices from the point of view of a developer;1;1
hgr6bzm;Reddit;2021-10-15 18:18:11;we have a few microservices and all they've done is slow down development from having to start 4 microservices locally pulling down the latest versions deploying 4 different applications keeping a test suite running that connects all 4;0;-1
hgsdx3t;Reddit;2021-10-15 23:23:42;ive always been of the mind that microservice architectures are an expression of conways law.  thats not a value judgement on microservices they arent good or bad they just are and they have trade offs;0;1
hgr5tf3;Reddit;2021-10-15 18:14:39;microservices primarily allow developer scale in my experience you omitted word complexity.  microservices scale process complexity upwards;-1;1
hh3x2q6;Reddit;2021-10-18 15:55:41;how small of a team? microservices do a good job of formalizing service boundaries in code rather than having to go through that with each code review and making sure that the boundaries remain intact;1;1
hgt8l0i;Reddit;2021-10-16 03:40:55;large companies also buy many smaller ones in a sense collecting selfcontained services once they've matured and teams already silo'd off from the rest of the developers and thus predisposed to microservices by conway's law;1;1
hgygp8w;Reddit;2021-10-17 08:48:36;it's too much of a microservice when you start to have to call too many apis to accomplish something simple;-1;1
hgv3l4j;Reddit;2021-10-16 16:30:17;new managers came in and declared we're going to use microservices;-1;1
hgr5735;Reddit;2021-10-15 18:10:21;you say that but with lots of people adding things in different places and styles the project becomes difficult to reason about very quickly so microservices with clear boundaries mean smaller parts are easier to understand and replace if needed as a solo or small team none of that applies because it is easier to coordinate and the each dev knows a much larger portion of the codebase;1;-1
hgt8bmu;Reddit;2021-10-16 03:38:32;i must emphasize that google does consider that your microservices are talking over rpc and not rest and i agree with them don't try to make rest apis if you're only getting called by an internal service of your team.  and yet more and more people continue to build microservices talking with and or layering over rest;-1;1
hgsuqg6;Reddit;2021-10-16 01:39:44;microservices don't really solve anything.  the guy who came up with microservices was like how do we just pretend that never happens and everyone just started writing their own apps and stringing them together;-1;1
hgvq7df;Reddit;2021-10-16 19:20:22;microservices don't have to suck;1;0
hgt1haf;Reddit;2021-10-16 02:37:19;monoliths are a hit because they hide problems that microservices would reveal almost instantly.  microservices doesn't make it better or worse.  what microservices offer is a blameless pile of spaghetti where everyone can pretend it's not their problem.  microservices is many times used as an excuse for cowboy programming.  here this is one of those areas were microservices work;-1;1
hgsyvn4;Reddit;2021-10-16 02:14:57;exactly what i thought about microservices concept i mean sure it is easy to scale but mostly this is concept for rapid development where poor code optimalization isn't an issue.  proper microservices can work fine but now this concept is used on every project without thinking if it is needed;-1;1
hgs4vll;Reddit;2021-10-15 22:16:46;this is the way i've seen microservices done best even at smaller companies although still large enough to have multiple teams;1;1
hgsvutt;Reddit;2021-10-16 01:49:04;microservices don't really solve anything.  so there's definitely a benefit i just really question the just always do microservices lol approach;-1;1
hgz1yki;Reddit;2021-10-17 13:32:53;microservices solving dependencies;1;0
hguv6u0;Reddit;2021-10-16 15:16:35;too many microservice advocates think their architecture prevents intermixing of concerns;-1;1
hh62ly0;Reddit;2021-10-19 01:17:31;true but by using microservices and containerizing them you can scale more efficiently.  there are a lot of benefits to microservices;1;1
hgstq2o;Reddit;2021-10-16 01:31:18;microservices are essentially impossible to reason about by design;1;-1
hgtq3jm;Reddit;2021-10-16 06:28:42;the enterprise i know that added microservices to their new project did so for illdefined reasons with overzealous implementors and it seems to be going very poorly.  however a lot of the ideas in microservices can be used in legitimate architectures to decrease burden;-1;-1
hgsw2ch;Reddit;2021-10-16 01:50:49;that's just what they turn out to be because no one is self critical enough to realise that microservices don't solve anything;-1;0
kccjok7;Reddit;2023-12-07 11:02:18;as someone who has worked on both giant monolith and complex microservice structure i can confidently say both suck! in my case the monolith was much worse though;-1;-1
kcckrre;Reddit;2023-12-07 11:17:52;our company used to have multiple microservices bundled together for a release.  moving to an actual microservices arch helped speed up releases by a looot;0;0
kcctth1;Reddit;2023-12-07 13:10:03;i'm currently in a system that uses microservices for modern solutions while still maintaining a legacy monolith until we have time to break it out completely.  i like developing in our microservices and despise developing in the monolith.  we use a fork of netflix's eureka service discovery tool to hook all our microservices together and it's pretty nice;1;1
kchnv0u;Reddit;2023-12-08 12:57:48;guys what if all functions had network latencies? guy about to invent microservices;-1;0
kccnrx1;Reddit;2023-12-07 11:58:46;microservices suck but nothing will sell me on a giant monolith.  giant monoliths are a whole level of suck to whatever you will deal in microservices;-1;1
kcdhzlu;Reddit;2023-12-07 16:26:26;microservices are a valid architecture choice when used correctly.  too many will make things as microservices that should remain as monoliths because either the utilization is too low the rate of change is too low or the solutionecosystem has a sunset date for replacement.  microservices are more chatty by nature and considerations should be made with network engineering database engineering observability tooling teams such as sres and others to ensure their part of the design will hold up to the increased requirements.  while microservices are a popular design pattern theyre not the only modern or performant one.  i would discourage implementing microservices in cultures which do not adequately practice agile delivery principles product and platform model team structures and prioritize technical debt repayment with a high degree of maturity.  for a microservices architecture to work properly a core collection of guiding principles separation of responsibilities and clearly defined communication contracts between both the services and the product teams who ownmaintain them;1;1
kcfb5t4;Reddit;2023-12-07 23:44:08;microservices are great.  oh and btw that solution is something that should be done with monoliths too so it's not something extra for microservices.  mostly when people complain about microservices it's just complaining about the bad code they have to work with.  half the problems in the article are things microservices actually solve and the author just makes up mental map of the entire system? no other microservices are black boxes;1;1
kccl2k3;Reddit;2023-12-07 11:22:00;if you are making 15 services and doing it just because microservice you are as bad as monolith people;0;-1
kce6d4s;Reddit;2023-12-07 19:05:48;as an honest counterpoint i like working with microservices because the interface is clear and noone can screw around with it once it's established.  other aspects do suck for sure and some people go way too micro with their microservices but breaking down a large problem into digestible blocks with clear interfaces has helped me personally deal with larger problems as well as delegate work;1;1
kcd2xqe;Reddit;2023-12-07 14:35:10;there's only the bullet lodged in your skull after choosing microservices;-1;0
kchyx9u;Reddit;2023-12-08 14:40:30;is the bot using microservices?;0;0
kcjzf86;Reddit;2023-12-08 22:41:30;any synchronous communication between microservices is a recipe for disaster including datastore calls;-1;0
kcf3mtb;Reddit;2023-12-07 22:56:17;people started to realize that maybe using microservices and kubernetes for their pizza delivery app that 200 people use was not the best use of their time and energy;-1;1
kcd6z1x;Reddit;2023-12-07 15:07:35;this is not a picture of a microservice architecture;0;0
kcdm32v;Reddit;2023-12-07 16:53:23;you need good logging practices and distributed tracing to make large microservice deployments work if you dont have those things debugging is a nightmare;-1;1
kccmrpg;Reddit;2023-12-07 11:45:21;badly designed microservice architectures are worse.  the problem is that it's easier to fuck up with microservices and it's way harder to unfuck.  microservices have their place;-1;-1
